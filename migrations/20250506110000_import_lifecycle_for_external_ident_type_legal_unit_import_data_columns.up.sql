BEGIN;

-- Lifecycle callback procedures for link_establishment_to_legal_unit data columns
CREATE OR REPLACE PROCEDURE import.generate_link_lu_data_columns()
LANGUAGE plpgsql AS $$
DECLARE
    v_step_id INT;
    v_ident_type RECORD;
    v_def RECORD;
    v_current_priority INT;
BEGIN
    RAISE DEBUG 'Generating dynamic link_establishment_to_legal_unit data columns...';
    SELECT id INTO v_step_id FROM public.import_step WHERE code = 'link_establishment_to_legal_unit';
    IF v_step_id IS NULL THEN
        RAISE EXCEPTION 'link_establishment_to_legal_unit step not found, cannot generate data columns.';
        RETURN;
    END IF;

    SELECT COALESCE(MAX(idc.priority), 0) INTO v_current_priority
    FROM public.import_data_column idc WHERE idc.step_id = v_step_id;
    RAISE DEBUG '  [-] Initial max priority for step_id % (link_establishment_to_legal_unit): %', v_step_id, v_current_priority;

    -- Add source_input column for each active external_ident_type, prefixed with 'legal_unit_'
    FOR v_ident_type IN SELECT code FROM public.external_ident_type_active ORDER BY priority
    LOOP
        v_current_priority := v_current_priority + 1;
        INSERT INTO public.import_data_column (step_id, column_name, column_type, purpose, is_nullable, is_uniquely_identifying, priority)
        VALUES (v_step_id, 'legal_unit_' || v_ident_type.code, 'TEXT', 'source_input', true, false, v_current_priority)
        ON CONFLICT (step_id, column_name) DO UPDATE SET priority = EXCLUDED.priority WHERE import_data_column.priority IS NULL;
    END LOOP;

    -- The 'legal_unit_id' pk_id column is statically defined in 20250505120000_import_populate_steps.up.sql
    -- and should not be managed by this dynamic lifecycle callback.

    RAISE DEBUG 'Finished generating dynamic link_establishment_to_legal_unit data columns for step %.', v_step_id;
END;
$$;

CREATE OR REPLACE PROCEDURE import.cleanup_link_lu_data_columns()
LANGUAGE plpgsql AS $$
DECLARE
    v_step_id INT;
BEGIN
    RAISE DEBUG 'Cleaning up dynamic link_establishment_to_legal_unit data columns...';
    SELECT id INTO v_step_id FROM public.import_step WHERE code = 'link_establishment_to_legal_unit';
    IF v_step_id IS NULL THEN
        RAISE WARNING 'link_establishment_to_legal_unit step not found, cannot clean up data columns.';
        RETURN;
    END IF;

    -- Delete columns dynamically added by the generate procedure
    DELETE FROM public.import_data_column
    WHERE step_id = v_step_id
      AND (
          -- Delete source_input columns matching the 'legal_unit_%' pattern, as they are all
          -- dynamically generated by this callback based on external_ident_type entries.
          (purpose = 'source_input' AND column_name LIKE 'legal_unit_%')
      );

    RAISE DEBUG 'Finished cleaning up dynamic link_establishment_to_legal_unit data columns.';
END;
$$;

-- Register the lifecycle callback
CALL lifecycle_callbacks.add(
    'import_link_lu_data_columns',
    ARRAY['public.external_ident_type']::regclass[],
    'import.generate_link_lu_data_columns',
    'import.cleanup_link_lu_data_columns'
);

-- Call generate once initially
CALL import.generate_link_lu_data_columns();

END;
