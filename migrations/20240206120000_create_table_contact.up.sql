-- Minor Migration 1_159: create_table_contact
BEGIN;

CREATE TABLE public.contact (
    id integer GENERATED BY DEFAULT AS IDENTITY,
    valid_from date NOT NULL,
    valid_to date,
    valid_until date,
    web_address character varying(256),
    email_address character varying(50),
    phone_number character varying(50),
    landline character varying(50),
    mobile_number character varying(50),
    fax_number character varying(50),
    CONSTRAINT "One information must be provided" CHECK (
        web_address IS NOT NULL OR
        email_address IS NOT NULL OR
        phone_number IS NOT NULL OR
        landline IS NOT NULL OR
        mobile_number IS NOT NULL OR
        fax_number IS NOT NULL
    ),
    establishment_id integer,
    legal_unit_id integer,
    CONSTRAINT "One and only one statistical unit id must be set"
    CHECK( establishment_id IS NOT NULL AND legal_unit_id IS     NULL
        OR establishment_id IS     NULL AND legal_unit_id IS NOT NULL
        ),
    data_source_id integer REFERENCES public.data_source(id),
    edit_comment character varying(512),
    edit_by_user_id integer NOT NULL REFERENCES auth.user(id) ON DELETE RESTRICT,
    edit_at timestamp with time zone NOT NULL DEFAULT statement_timestamp()
);

CREATE INDEX ix_contact_establishment_id ON public.contact USING btree (establishment_id);
CREATE INDEX ix_contact_legal_unit_id ON public.contact USING btree (legal_unit_id);
CREATE INDEX ix_contact_data_source_id ON public.contact USING btree (data_source_id);
CREATE INDEX ix_contact_edit_by_user_id ON public.contact USING btree (edit_by_user_id);
CREATE INDEX ix_contact_legal_unit_id_valid_range ON public.contact USING gist (legal_unit_id, daterange(valid_from, valid_until, '[)'));
CREATE INDEX ix_contact_establishment_id_valid_range ON public.contact USING gist (establishment_id, daterange(valid_from, valid_until, '[)'));

-- Activate era handling
SELECT sql_saga.add_era('public.contact', synchronize_valid_to_column => 'valid_to');
-- This creates a GIST exclusion constraint (`contact_id_valid_excl`) to ensure that there are
-- no overlapping time periods for the same contact ID.
SELECT sql_saga.add_unique_key(
    table_oid => 'public.contact'::regclass,
    key_type => 'primary',
    column_names => ARRAY['id'],
    unique_key_name => 'contact_id_valid'
);
SELECT sql_saga.add_unique_key(
    table_oid => 'public.contact',
    key_type => 'natural',
    column_names => ARRAY['legal_unit_id', 'establishment_id'],
    mutually_exclusive_columns => ARRAY['legal_unit_id', 'establishment_id'],
    unique_key_name => 'contact_natural_key_valid'
);


-- This creates triggers to enforce that a contact's validity period is always contained
-- within the validity period of its parent establishment.
SELECT sql_saga.add_foreign_key(
    fk_table_oid => 'public.contact'::regclass,
    fk_column_names => ARRAY['establishment_id'],
    pk_table_oid => 'public.establishment',
    pk_column_names => ARRAY['id']
);
-- This creates triggers to enforce that a contact's validity period is always contained
-- within the validity period of its parent legal unit.
SELECT sql_saga.add_foreign_key(
    fk_table_oid => 'public.contact'::regclass,
    fk_column_names => ARRAY['legal_unit_id'],
    pk_table_oid => 'public.legal_unit',
    pk_column_names => ARRAY['id']
);

-- Add a view for portion-of updates, allowing for easier updates to specific time slices.
SELECT sql_saga.add_for_portion_of_view('public.contact');

END;
