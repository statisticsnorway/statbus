BEGIN;

CREATE FUNCTION public.connect_legal_unit_to_enterprise(
    legal_unit_id integer, -- $1
    enterprise_id integer, -- $2
    valid_from date DEFAULT current_date, -- $3
    valid_to date DEFAULT 'infinity' -- $4
)
RETURNS jsonb LANGUAGE plpgsql AS $$
#variable_conflict use_variable
DECLARE
    old_enterprise_id integer;
    updated_legal_unit_ids integer[];
    deleted_enterprise_id integer := NULL;
    is_primary BOOLEAN;
    other_legal_units_count INTEGER;
    new_primary_legal_unit_id INTEGER;
    valid_from_p DATE := valid_from;
    valid_until_p DATE;
BEGIN
    -- Handle infinity for valid_to date parameter
    IF connect_legal_unit_to_enterprise.valid_to = 'infinity'::date THEN
        valid_until_p := 'infinity'::date;
    ELSE
        valid_until_p := connect_legal_unit_to_enterprise.valid_to + '1 DAY'::INTERVAL;
    END IF;
    -- Check if the enterprise exists
    IF NOT EXISTS(SELECT 1 FROM public.enterprise WHERE id = connect_legal_unit_to_enterprise.enterprise_id) THEN
        RAISE EXCEPTION 'Enterprise does not exist.';
    END IF;

    -- Retrieve current enterprise_id and if it's primary for the given period.
    -- This assumes the period provided does not span multiple historical versions of the legal unit.
    SELECT lu.enterprise_id, lu.primary_for_enterprise INTO old_enterprise_id, is_primary
    FROM public.legal_unit AS lu
    WHERE lu.id = connect_legal_unit_to_enterprise.legal_unit_id
    AND from_until_overlaps(valid_from_p, valid_until_p, lu.valid_from, lu.valid_until)
    ;
    IF NOT FOUND THEN
        RAISE EXCEPTION 'Legal Unit % does not exist in the period [%, %)', connect_legal_unit_to_enterprise.legal_unit_id, connect_legal_unit_to_enterprise.valid_from, connect_legal_unit_to_enterprise.valid_to;
    END IF;

    -- Idempotency check: If the legal unit is already connected to the given enterprise, do nothing.
    IF old_enterprise_id = connect_legal_unit_to_enterprise.enterprise_id THEN
        RETURN jsonb_build_object(
            'message', 'No changes made as the legal unit is already connected to the specified enterprise.',
            'legal_unit_id', connect_legal_unit_to_enterprise.legal_unit_id,
            'enterprise_id', connect_legal_unit_to_enterprise.enterprise_id
        );
    END IF;

    -- Create a temporary table to stage changes for sql_saga.temporal_merge
    IF to_regclass('pg_temp.temp_lu_source') IS NOT NULL THEN DROP TABLE temp_lu_source; END IF;
    CREATE TEMPORARY TABLE temp_lu_source (
        row_id int generated by default as identity,
        id integer,
        enterprise_id integer,
        primary_for_enterprise boolean,
        valid_from date,
        valid_until date
    ) ON COMMIT DROP;

    -- If the legal unit was primary, we may need to assign a new primary
    IF is_primary THEN
        SELECT COUNT(lu.*) INTO other_legal_units_count
        FROM public.legal_unit AS lu
        WHERE lu.enterprise_id = old_enterprise_id
          AND lu.id <> connect_legal_unit_to_enterprise.legal_unit_id
          AND from_until_overlaps(valid_from_p, valid_until_p, lu.valid_from, lu.valid_until);

        -- If there is only one other legal unit in the old enterprise, make it the new primary.
        IF other_legal_units_count = 1 THEN
            SELECT lu.id INTO new_primary_legal_unit_id
            FROM public.legal_unit AS lu
            WHERE lu.enterprise_id = old_enterprise_id
              AND lu.id <> connect_legal_unit_to_enterprise.legal_unit_id
              AND from_until_overlaps(valid_from_p, valid_until_p, lu.valid_from, lu.valid_until);

            -- Stage the change to make the other unit primary
            INSERT INTO temp_lu_source (id, primary_for_enterprise, valid_from, valid_until)
            VALUES (new_primary_legal_unit_id, true, valid_from_p, valid_until_p);

        ELSIF other_legal_units_count > 1 THEN
            RAISE EXCEPTION 'Cannot move the primary legal unit. Assign a new primary to enterprise % first.', old_enterprise_id;
        END IF;
    END IF;

    -- Determine if the legal unit should become primary in the *new* enterprise.
    SELECT NOT EXISTS (
        SELECT 1
        FROM public.legal_unit AS lu
        WHERE lu.enterprise_id = connect_legal_unit_to_enterprise.enterprise_id
          AND lu.primary_for_enterprise IS TRUE
          AND from_until_overlaps(valid_from_p, valid_until_p, lu.valid_from, lu.valid_until)
    ) INTO is_primary;

    -- Stage the main change: connect the legal unit to the new enterprise.
    INSERT INTO temp_lu_source (id, enterprise_id, primary_for_enterprise, valid_from, valid_until)
    VALUES (
        connect_legal_unit_to_enterprise.legal_unit_id,
        connect_legal_unit_to_enterprise.enterprise_id,
        is_primary,
        valid_from_p,
        valid_until_p
    );

    -- Atomically apply all staged changes to the timeline.
    CALL sql_saga.temporal_merge(
      p_target_table => 'public.legal_unit',
      p_source_table => 'temp_lu_source',
      p_id_columns => ARRAY['id'],
      p_ephemeral_columns => ARRAY[],
      p_mode => 'PATCH_FOR_PORTION_OF',
      p_source_row_id_column => 'row_id'
    );

    -- Capture the IDs of legal units that were modified.
    SELECT array_agg(id) INTO updated_legal_unit_ids FROM temp_lu_source;

    -- If the old enterprise has no more legal units or establishments, delete it.
    WITH deleted AS (
        DELETE FROM public.enterprise AS en
        WHERE en.id = old_enterprise_id
        AND NOT EXISTS(
            SELECT 1
            FROM public.legal_unit AS lu
            WHERE lu.enterprise_id = old_enterprise_id
        )
        AND NOT EXISTS(
            SELECT 1
            FROM public.establishment AS es
            WHERE es.enterprise_id = old_enterprise_id
        )
        RETURNING id
    )
    SELECT id INTO deleted_enterprise_id FROM deleted;

    -- Return a jsonb summary of changes including the updated legal unit ids, old and new enterprise_ids, and deleted enterprise id if applicable
    RETURN jsonb_build_object(
        'updated_legal_unit_ids', updated_legal_unit_ids,
        'old_enterprise_id', old_enterprise_id,
        'new_enterprise_id', connect_legal_unit_to_enterprise.enterprise_id,
        'deleted_enterprise_id', deleted_enterprise_id
    );
END;
$$;

END;
