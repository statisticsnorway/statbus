BEGIN;

CREATE TABLE public.region (
    id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    path public.ltree UNIQUE NOT NULL,
    parent_id integer REFERENCES public.region(id) ON DELETE RESTRICT,
    level int GENERATED ALWAYS AS (public.nlevel(path)) STORED,
    label varchar NOT NULL GENERATED ALWAYS AS (replace(path::text,'.','')) STORED,
    code varchar GENERATED ALWAYS AS (NULLIF(regexp_replace(path::text, '[^0-9]', '', 'g'), '')) STORED,
    name text NOT NULL,
    center_latitude numeric(9, 6),
    center_longitude numeric(9, 6),
    center_altitude numeric(6, 1),
    CONSTRAINT "parent_id is required for child"
      CHECK(public.nlevel(path) = 1 OR parent_id IS NOT NULL),
    CONSTRAINT "center coordinates all or nothing"
      CHECK((center_latitude IS NOT NULL AND center_longitude IS NOT NULL)
         OR (center_latitude IS NULL     AND center_longitude IS NULL)),
    CONSTRAINT "altitude requires coordinates"
      CHECK(CASE
                WHEN center_altitude IS NOT NULL THEN
                    (center_latitude IS NOT NULL AND center_longitude IS NOT NULL)
                ELSE
                    TRUE
            END),
    CONSTRAINT "center_latitude_must_be_from_minus_90_to_90_degrees" CHECK(center_latitude >= -90 AND center_latitude <= 90),
    CONSTRAINT "center_longitude_must_be_from_minus_180_to_180_degrees" CHECK(center_longitude >= -180 AND center_longitude <= 180),
    CONSTRAINT "center_altitude_must_be_positive" CHECK(center_altitude >= 0)
);

CREATE INDEX ix_region_parent_id ON public.region USING btree (parent_id);
CREATE TYPE public.location_type AS ENUM ('physical', 'postal');

END;
