BEGIN;
\i test/setup.sql
-- While the datestyle is set for the database, the pg_regress tool sets the MDY format
-- to ensure consistent date formatting, so we must manually override this
SET datestyle TO 'ISO, DMY';
\if :{?DEBUG}
SET client_min_messages TO debug1;
\else
SET client_min_messages TO NOTICE;
\endif
-- Create temporary function to execute queries as system user
CREATE OR REPLACE FUNCTION test.sudo_exec(
    sql text,
    OUT results jsonb
) RETURNS jsonb
SECURITY DEFINER LANGUAGE plpgsql AS $sudo_exec$
DECLARE
    result_rows jsonb;
BEGIN
    -- Check if the SQL starts with common DDL keywords
    IF sql ~* '^\s*(CREATE|DROP|ALTER|TRUNCATE|GRANT|REVOKE|ANALYZE)' THEN
        -- For DDL statements, execute directly
        EXECUTE sql;
        results := '[]'::jsonb;
    ELSE
        -- For DML/queries, wrap in a SELECT to capture results
        EXECUTE format('
            SELECT COALESCE(
                jsonb_agg(row_to_json(t)),
                ''[]''::jsonb
            )
            FROM (%s) t',
            sql
        ) INTO result_rows;
        results := result_rows;
    END IF;
END;
$sudo_exec$;
-- Grant execute to public since this is for testing
GRANT EXECUTE ON FUNCTION test.sudo_exec(text) TO PUBLIC;
\echo Add users for testing purposes
Add users for testing purposes
SELECT * FROM public.user_create('test.admin@statbus.org', 'admin_user'::statbus_role, 'Admin#123!');
         email          |  password  
------------------------+------------
 test.admin@statbus.org | Admin#123!
(1 row)

SELECT * FROM public.user_create('test.regular@statbus.org', 'regular_user'::statbus_role, 'Regular#123!');
          email           |   password   
--------------------------+--------------
 test.regular@statbus.org | Regular#123!
(1 row)

SELECT * FROM public.user_create('test.restricted@statbus.org', 'restricted_user'::statbus_role, 'Restricted#123!');
            email            |    password     
-----------------------------+-----------------
 test.restricted@statbus.org | Restricted#123!
(1 row)

\echo "Setting up Statbus using the web provided examples"
"Setting up Statbus using the web provided examples"
-- A Super User configures statbus.
CALL test.set_user_from_email('test.admin@statbus.org');
\echo "User selected the Activity Category Standard"
"User selected the Activity Category Standard"
INSERT INTO settings(activity_category_standard_id,only_one_setting)
SELECT id, true FROM activity_category_standard WHERE code = 'isic_v4'
ON CONFLICT (only_one_setting)
DO UPDATE SET
   activity_category_standard_id =(SELECT id FROM activity_category_standard WHERE code = 'isic_v4')
   WHERE settings.id = EXCLUDED.id;
;
SELECT acs.code
  FROM public.settings AS s
  JOIN activity_category_standard AS acs
    ON s.activity_category_standard_id = acs.id;
  code   
---------
 isic_v4
(1 row)

\echo "User uploads the sample activity categories"
"User uploads the sample activity categories"
\copy public.activity_category_available_custom(path,name) FROM 'app/public/demo/activity_custom_isic_demo.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
\echo "User uploads the sample regions"
"User uploads the sample regions"
\copy public.region_upload(path, name) FROM 'app/public/demo/regions_demo.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
\echo "User uploads the sample legal forms"
"User uploads the sample legal forms"
\copy public.legal_form_custom_only(code,name) FROM 'app/public/demo/legal_forms_demo.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
\echo "User uploads the sample sectors"
"User uploads the sample sectors"
\copy public.sector_custom_only(path,name,description) FROM 'app/public/demo/sectors_demo.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
\echo "Initial unit counts"
"Initial unit counts"
SELECT
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.establishment) AS establishment_count,
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.legal_unit) AS legal_unit_count,
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.enterprise) AS enterprise_count;
 establishment_count | legal_unit_count | enterprise_count 
---------------------+------------------+------------------
                   0 |                0 |                0
(1 row)

\echo "Available import definitions for data with source dates, and for turnover updates:"
"Available import definitions for data with source dates, and for turnover updates:"
SELECT slug, name, valid_time_from FROM public.import_definition WHERE valid_time_from = 'source_columns' OR slug LIKE '%update%' ORDER BY slug;
                  slug                  |                 name                  | valid_time_from 
----------------------------------------+---------------------------------------+-----------------
 establishment_for_lu_source_dates      | Establishments for LU (Source Dates)  | source_columns
 establishment_without_lu_source_dates  | Establishments w/o LU (Source Dates)  | source_columns
 generic_unit_stats_update_job_provided | Unit Stats Update (Job Provided Time) | job_provided
 generic_unit_stats_update_source_dates | Unit Stats Update (Source Dates)      | source_columns
 legal_unit_source_dates                | Legal Units (Source Dates)            | source_columns
(5 rows)

-- Create Import Job for Legal Units (Demo CSV with source dates)
INSERT INTO public.import_job (definition_id, slug, description, note, edit_comment)
SELECT
    (SELECT id FROM public.import_definition WHERE slug = 'legal_unit_source_dates'),
    'import_309_lu_wsd',
    'Import LU Demo CSV w/ dates (309_load_demo_data_with_source_dates.sql)',
    'Import job for app/public/demo/legal_units_with_source_dates_demo.csv using legal_unit_source_dates definition.',
    'Test data load (309_load_demo_data_with_source_dates.sql)';
\echo "User uploads the sample legal units with source dates (via import job: import_309_lu_wsd)"
"User uploads the sample legal units with source dates (via import job: import_309_lu_wsd)"
\copy public.import_309_lu_wsd_upload(tax_ident,stat_ident,name,valid_from,physical_address_part1,valid_to,postal_address_part1,postal_address_part2,physical_address_part2,physical_postcode,postal_postcode,physical_address_part3,physical_postplace,postal_address_part3,postal_postplace,phone_number,landline,mobile_number,fax_number,web_address,email_address,secondary_activity_category_code,physical_latitude,physical_longitude,physical_altitude,birth_date,physical_region_code,postal_country_iso_2,physical_country_iso_2,primary_activity_category_code,legal_form_code,sector_code,employees,turnover,data_source_code,status_code,unit_size_code) FROM 'app/public/demo/legal_units_with_source_dates_demo.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
-- Create Import Job for Formal Establishments (Demo CSV with source dates)
INSERT INTO public.import_job (definition_id, slug, description, note, edit_comment)
SELECT
    (SELECT id FROM public.import_definition WHERE slug = 'establishment_for_lu_source_dates'),
    'import_309_esflu_wsd',
    'Import Formal ES Demo CSV w/ dates (309_load_demo_data_with_source_dates.sql)',
    'Import job for app/public/demo/formal_establishments_units_with_source_dates_demo.csv using establishment_for_lu_source_dates definition.',
    'Test data load (309_load_demo_data_with_source_dates.sql)';
\echo "User uploads the sample formal establishments with source dates (via import job: import_309_esflu_wsd)"
"User uploads the sample formal establishments with source dates (via import job: import_309_esflu_wsd)"
\copy public.import_309_esflu_wsd_upload(tax_ident,stat_ident,name,physical_region_code,valid_from,valid_to,postal_country_iso_2,physical_country_iso_2,primary_activity_category_code,secondary_activity_category_code,employees,turnover,legal_unit_tax_ident,data_source_code,physical_address_part1,physical_address_part2,physical_address_part3,postal_address_part1,postal_address_part2,postal_address_part3,phone_number,mobile_number,landline,fax_number,web_address,email_address,physical_latitude,physical_longitude,physical_altitude,birth_date,unit_size_code,status_code) FROM 'app/public/demo/formal_establishments_units_with_source_dates_demo.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
-- Create Import Job for Informal Establishments (Demo CSV with source dates)
INSERT INTO public.import_job (definition_id, slug, description, note, edit_comment)
SELECT
    (SELECT id FROM public.import_definition WHERE slug = 'establishment_without_lu_source_dates'),
    'import_309_eswlu_wsd',
    'Import Informal ES Demo CSV w/ dates (309_load_demo_data_with_source_dates.sql)',
    'Import job for app/public/demo/informal_establishments_units_with_source_dates_demo.csv using establishment_without_lu_source_dates definition.',
    'Test data load (309_load_demo_data_with_source_dates.sql)';
\echo "User uploads the sample informal establishments with source dates (via import job: import_309_eswlu_wsd)"
"User uploads the sample informal establishments with source dates (via import job: import_309_eswlu_wsd)"
\copy public.import_309_eswlu_wsd_upload(tax_ident,stat_ident,name,physical_region_code,valid_from,valid_to,physical_country_iso_2,postal_country_iso_2,primary_activity_category_code,secondary_activity_category_code,employees,turnover,data_source_code,physical_address_part1,physical_address_part2,physical_address_part3,postal_address_part1,postal_address_part2,postal_address_part3,phone_number,mobile_number,landline,fax_number,web_address,email_address,unit_size_code,status_code,physical_latitude,physical_longitude,physical_altitude) FROM 'app/public/demo/informal_establishments_units_with_source_dates_demo.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
\echo "Run worker processing for import jobs - Initial Load"
"Run worker processing for import jobs - Initial Load"
CALL worker.process_tasks(p_queue => 'import');
SELECT queue, state, count(*) FROM worker.tasks AS t JOIN worker.command_registry AS c ON t.command = c.command WHERE c.queue != 'maintenance' GROUP BY queue,state ORDER BY queue,state;
   queue   |   state   | count 
-----------+-----------+-------
 analytics | pending   |     8
 import    | completed |   141
(2 rows)

\echo "Checking import job statuses for Initial Load"
"Checking import job statuses for Initial Load"
SELECT slug, state, time_context_ident, total_rows, imported_rows, error IS NOT NULL AS has_error FROM public.import_job WHERE slug LIKE 'import_309_%' AND slug NOT LIKE '%turnover%' ORDER BY slug;
         slug         |  state   | time_context_ident | total_rows | imported_rows | has_error 
----------------------+----------+--------------------+------------+---------------+-----------
 import_309_esflu_wsd | finished |                    |         26 |            26 | f
 import_309_eswlu_wsd | finished |                    |         12 |            12 | f
 import_309_lu_wsd    | finished |                    |         75 |            72 | f
(3 rows)

\echo "Unit counts after initial load"
"Unit counts after initial load"
SELECT
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.establishment) AS establishment_count,
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.legal_unit) AS legal_unit_count,
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.enterprise) AS enterprise_count;
 establishment_count | legal_unit_count | enterprise_count 
---------------------+------------------+------------------
                  37 |               24 |               36
(1 row)

\echo "Run worker processing for analytics tasks - Initial Load"
"Run worker processing for analytics tasks - Initial Load"
CALL worker.process_tasks(p_queue => 'analytics');
SELECT queue, state, count(*) FROM worker.tasks AS t JOIN worker.command_registry AS c ON t.command = c.command WHERE c.queue != 'maintenance' GROUP BY queue,state ORDER BY queue,state;
   queue   |   state   | count 
-----------+-----------+-------
 analytics | completed |    10
 import    | completed |   141
(2 rows)

\echo "Checking statistics after Initial Load"
"Checking statistics after Initial Load"
\x
SELECT unit_type
     , COUNT(DISTINCT unit_id)
     , jsonb_agg(DISTINCT invalid_codes) FILTER (WHERE invalid_codes IS NOT NULL) AS invalid_codes
     , jsonb_pretty(jsonb_stats_summary_merge_agg(stats_summary)) AS stats_summary
 FROM statistical_unit
 WHERE valid_from <= CURRENT_DATE AND CURRENT_DATE < valid_until
 GROUP BY unit_type;
-[ RECORD 1 ]-+-----------------------------------------------
unit_type     | establishment
count         | 37
invalid_codes | 
stats_summary | {                                             +
              |     "turnover": {                             +
              |         "max": 4444,                          +
              |         "min": 20,                            +
              |         "sum": 49599,                         +
              |         "mean": 1340.51,                      +
              |         "type": "number",                     +
              |         "count": 37,                          +
              |         "stddev": 1192.27,                    +
              |         "variance": 1421508.42,               +
              |         "sum_sq_diff": 51174303.24,           +
              |         "coefficient_of_variation_pct": 88.94 +
              |     },                                        +
              |     "employees": {                            +
              |         "max": 10,                            +
              |         "min": 1,                             +
              |         "sum": 261,                           +
              |         "mean": 7.05,                         +
              |         "type": "number",                     +
              |         "count": 37,                          +
              |         "stddev": 3.69,                       +
              |         "variance": 13.61,                    +
              |         "sum_sq_diff": 489.89,                +
              |         "coefficient_of_variation_pct": 52.29 +
              |     }                                         +
              | }
-[ RECORD 2 ]-+-----------------------------------------------
unit_type     | legal_unit
count         | 24
invalid_codes | 
stats_summary | {                                             +
              |     "turnover": {                             +
              |         "max": 20025,                         +
              |         "min": 20,                            +
              |         "sum": 500755,                        +
              |         "mean": 10654.36,                     +
              |         "type": "number",                     +
              |         "count": 47,                          +
              |         "stddev": 9678.31,                    +
              |         "variance": 93669639.19,              +
              |         "sum_sq_diff": 4308803402.85,         +
              |         "coefficient_of_variation_pct": 90.84 +
              |     },                                        +
              |     "employees": {                            +
              |         "max": 250,                           +
              |         "min": 1,                             +
              |         "sum": 1030,                          +
              |         "mean": 21.91,                        +
              |         "type": "number",                     +
              |         "count": 47,                          +
              |         "stddev": 34.99,                      +
              |         "variance": 1224.17,                  +
              |         "sum_sq_diff": 56311.66,              +
              |         "coefficient_of_variation_pct": 159.65+
              |     }                                         +
              | }
-[ RECORD 3 ]-+-----------------------------------------------
unit_type     | enterprise
count         | 36
invalid_codes | 
stats_summary | {                                             +
              |     "turnover": {                             +
              |         "max": 20025,                         +
              |         "min": 20,                            +
              |         "sum": 527799,                        +
              |         "mean": 9259.63,                      +
              |         "type": "number",                     +
              |         "count": 57,                          +
              |         "stddev": 9308.55,                    +
              |         "variance": 86649162.39,              +
              |         "sum_sq_diff": 4852353093.87,         +
              |         "coefficient_of_variation_pct": 100.53+
              |     },                                        +
              |     "employees": {                            +
              |         "max": 250,                           +
              |         "min": 1,                             +
              |         "sum": 1057,                          +
              |         "mean": 18.54,                        +
              |         "type": "number",                     +
              |         "count": 57,                          +
              |         "stddev": 32.56,                      +
              |         "variance": 1060.10,                  +
              |         "sum_sq_diff": 59365.47,              +
              |         "coefficient_of_variation_pct": 175.58+
              |     }                                         +
              | }

\x
-- Create Import Job for Legal Units Turnover Update
INSERT INTO public.import_job (definition_id, slug, description, note, edit_comment, time_context_ident)
SELECT
    (SELECT id FROM public.import_definition WHERE slug = 'generic_unit_stats_update_job_provided'),
    'import_309_lu_turnover_update',
    'Import LU Turnover Update (309_load_demo_data_with_source_dates.sql)',
    'Import job for app/public/demo/legal_units_turnover_update.csv using generic_unit_stats_update_job_provided definition.',
    'Test data load (309_load_demo_data_with_source_dates.sql)',
    'r_year_curr';
\echo "User uploads the legal units turnover update (via import job: import_309_lu_turnover_update)"
"User uploads the legal units turnover update (via import job: import_309_lu_turnover_update)"
\copy public.import_309_lu_turnover_update_upload(tax_ident,stat_ident,turnover) FROM 'app/public/demo/legal_units_turnover_update.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
\echo "Run worker processing for import jobs - Turnover Update"
"Run worker processing for import jobs - Turnover Update"
CALL worker.process_tasks(p_queue => 'import');
SELECT queue, state, count(*) FROM worker.tasks AS t JOIN worker.command_registry AS c ON t.command = c.command WHERE c.queue != 'maintenance' GROUP BY queue,state ORDER BY queue,state;
   queue   |   state   | count 
-----------+-----------+-------
 analytics | pending   |     1
 analytics | completed |    10
 import    | completed |   161
(3 rows)

\echo "Checking import job statuses for Turnover Update"
"Checking import job statuses for Turnover Update"
SELECT slug, state, time_context_ident, total_rows, imported_rows, error IS NOT NULL AS has_error FROM public.import_job WHERE slug = 'import_309_lu_turnover_update' ORDER BY slug;
             slug              |  state   | time_context_ident | total_rows | imported_rows | has_error 
-------------------------------+----------+--------------------+------------+---------------+-----------
 import_309_lu_turnover_update | finished | r_year_curr        |         25 |            24 | f
(1 row)

\echo "Unit counts after turnover update"
"Unit counts after turnover update"
SELECT
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.establishment) AS establishment_count,
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.legal_unit) AS legal_unit_count,
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.enterprise) AS enterprise_count;
 establishment_count | legal_unit_count | enterprise_count 
---------------------+------------------+------------------
                  37 |               24 |               36
(1 row)

\echo "Run worker processing for analytics tasks - Turnover Update"
"Run worker processing for analytics tasks - Turnover Update"
CALL worker.process_tasks(p_queue => 'analytics');
SELECT queue, state, count(*) FROM worker.tasks AS t JOIN worker.command_registry AS c ON t.command = c.command WHERE c.queue != 'maintenance' GROUP BY queue,state ORDER BY queue,state;
   queue   |   state   | count 
-----------+-----------+-------
 analytics | completed |    13
 import    | completed |   161
(2 rows)

\echo "Calculating expected statistics from raw _upload tables for verification"
"Calculating expected statistics from raw _upload tables for verification"
\x
WITH deduped_updates AS (
    SELECT DISTINCT ON (tax_ident)
        tax_ident, employees, turnover
    FROM public.import_309_lu_turnover_update_upload
    ORDER BY tax_ident, stat_ident DESC -- Deduplicate update file, preferring latest stat_ident
),
update_time_context AS (
    -- The update job uses 'r_year_curr', so we resolve its date range to correctly apply the update
    SELECT valid_from, valid_to AS valid_until FROM public.time_context WHERE ident = 'r_year_curr'
),
active_legal_units AS (
    SELECT
        (import.safe_cast_to_integer(
            -- Apply update only if today is within the update's time context
            CASE WHEN CURRENT_DATE >= utc.valid_from AND CURRENT_DATE < utc.valid_until
                THEN COALESCE(upd.employees, lu.employees)
                ELSE lu.employees
            END
        )).p_value as employees,
        (import.safe_cast_to_numeric(
            CASE WHEN CURRENT_DATE >= utc.valid_from AND CURRENT_DATE < utc.valid_until
                THEN COALESCE(upd.turnover, lu.turnover)
                ELSE lu.turnover
            END
        )).p_value as turnover
    FROM public.import_309_lu_wsd_upload AS lu
    LEFT JOIN deduped_updates AS upd ON lu.tax_ident = upd.tax_ident
    CROSS JOIN update_time_context utc
    WHERE (import.safe_cast_to_date(lu.valid_from)).p_value <= CURRENT_DATE AND CURRENT_DATE < ((import.safe_cast_to_date(lu.valid_to)).p_value + '1 day'::interval)
),
active_establishments AS (
    SELECT
        (import.safe_cast_to_integer(employees)).p_value as employees,
        (import.safe_cast_to_numeric(turnover)).p_value as turnover
    FROM (
        SELECT employees, turnover, valid_from, valid_to FROM public.import_309_esflu_wsd_upload
        UNION ALL
        SELECT employees, turnover, valid_from, valid_to FROM public.import_309_eswlu_wsd_upload
    ) AS all_es
    WHERE (import.safe_cast_to_date(all_es.valid_from)).p_value <= CURRENT_DATE AND CURRENT_DATE < ((import.safe_cast_to_date(all_es.valid_to)).p_value + '1 day'::interval)
),
legal_unit_aggs AS (
    SELECT
        COUNT(*) AS total_active_count,
        COUNT(employees) AS employees_count, SUM(employees) AS employees_sum, AVG(employees) AS employees_mean, MAX(employees) AS employees_max, MIN(employees) AS employees_min, STDDEV_SAMP(employees) AS employees_stddev, VAR_SAMP(employees) AS employees_variance,
        COUNT(turnover) AS turnover_count, SUM(turnover) AS turnover_sum, AVG(turnover) AS turnover_mean, MAX(turnover) AS turnover_max, MIN(turnover) AS turnover_min, STDDEV_SAMP(turnover) AS turnover_stddev, VAR_SAMP(turnover) AS turnover_variance
    FROM active_legal_units
),
establishment_aggs AS (
    SELECT
        COUNT(*) AS total_active_count,
        COUNT(employees) AS employees_count, SUM(employees) AS employees_sum, AVG(employees) AS employees_mean, MAX(employees) AS employees_max, MIN(employees) AS employees_min, STDDEV_SAMP(employees) AS employees_stddev, VAR_SAMP(employees) AS employees_variance,
        COUNT(turnover) AS turnover_count, SUM(turnover) AS turnover_sum, AVG(turnover) AS turnover_mean, MAX(turnover) AS turnover_max, MIN(turnover) AS turnover_min, STDDEV_SAMP(turnover) AS turnover_stddev, VAR_SAMP(turnover) AS turnover_variance
    FROM active_establishments
),
legal_unit_stats AS (
    SELECT
        'legal_unit' AS unit_type,
        total_active_count AS count,
        jsonb_pretty(jsonb_build_object(
            'employees', jsonb_build_object('type','number','count',employees_count,'sum',employees_sum,'mean',round(employees_mean,2),'max',employees_max,'min',employees_min,'stddev',round(employees_stddev,2),'variance',round(employees_variance,2),'sum_sq_diff',round((employees_count-1)*employees_variance,2),'coefficient_of_variation_pct',CASE WHEN employees_mean = 0 THEN 0 ELSE round((employees_stddev/employees_mean)*100,2) END),
            'turnover', jsonb_build_object('type','number','count',turnover_count,'sum',turnover_sum,'mean',round(turnover_mean,2),'max',turnover_max,'min',turnover_min,'stddev',round(turnover_stddev,2),'variance',round(turnover_variance,2),'sum_sq_diff',round((turnover_count-1)*turnover_variance,2),'coefficient_of_variation_pct',CASE WHEN turnover_mean = 0 THEN 0 ELSE round((turnover_stddev/turnover_mean)*100,2) END)
        )) AS stats_summary
    FROM legal_unit_aggs
),
establishment_stats AS (
    SELECT
        'establishment' AS unit_type,
        total_active_count AS count,
        jsonb_pretty(jsonb_build_object(
            'employees', jsonb_build_object('type','number','count',employees_count,'sum',employees_sum,'mean',round(employees_mean,2),'max',employees_max,'min',employees_min,'stddev',round(employees_stddev,2),'variance',round(employees_variance,2),'sum_sq_diff',round((employees_count-1)*employees_variance,2),'coefficient_of_variation_pct',CASE WHEN employees_mean = 0 THEN 0 ELSE round((employees_stddev/employees_mean)*100,2) END),
            'turnover', jsonb_build_object('type','number','count',turnover_count,'sum',turnover_sum,'mean',round(turnover_mean,2),'max',turnover_max,'min',turnover_min,'stddev',round(turnover_stddev,2),'variance',round(turnover_variance,2),'sum_sq_diff',round((turnover_count-1)*turnover_variance,2),'coefficient_of_variation_pct',CASE WHEN turnover_mean = 0 THEN 0 ELSE round((turnover_stddev/turnover_mean)*100,2) END)
        )) AS stats_summary
    FROM establishment_aggs
)
SELECT unit_type, count, stats_summary FROM legal_unit_stats
UNION ALL
SELECT unit_type, count, stats_summary FROM establishment_stats
ORDER BY unit_type;
-[ RECORD 1 ]-+-----------------------------------------------
unit_type     | establishment
count         | 37
stats_summary | {                                             +
              |     "turnover": {                             +
              |         "max": 4444,                          +
              |         "min": 20,                            +
              |         "sum": 49599,                         +
              |         "mean": 1340.51,                      +
              |         "type": "number",                     +
              |         "count": 37,                          +
              |         "stddev": 1192.27,                    +
              |         "variance": 1421508.42,               +
              |         "sum_sq_diff": 51174303.24,           +
              |         "coefficient_of_variation_pct": 88.94 +
              |     },                                        +
              |     "employees": {                            +
              |         "max": 10,                            +
              |         "min": 1,                             +
              |         "sum": 261,                           +
              |         "mean": 7.05,                         +
              |         "type": "number",                     +
              |         "count": 37,                          +
              |         "stddev": 3.69,                       +
              |         "variance": 13.61,                    +
              |         "sum_sq_diff": 489.89,                +
              |         "coefficient_of_variation_pct": 52.29 +
              |     }                                         +
              | }
-[ RECORD 2 ]-+-----------------------------------------------
unit_type     | legal_unit
count         | 24
stats_summary | {                                             +
              |     "turnover": {                             +
              |         "max": 2525,                          +
              |         "min": 2525,                          +
              |         "sum": 60600,                         +
              |         "mean": 2525.00,                      +
              |         "type": "number",                     +
              |         "count": 24,                          +
              |         "stddev": 0.00,                       +
              |         "variance": 0.00,                     +
              |         "sum_sq_diff": 0.00,                  +
              |         "coefficient_of_variation_pct": 0.00  +
              |     },                                        +
              |     "employees": {                            +
              |         "max": 250,                           +
              |         "min": 25,                            +
              |         "sum": 825,                           +
              |         "mean": 34.38,                        +
              |         "type": "number",                     +
              |         "count": 24,                          +
              |         "stddev": 45.93,                      +
              |         "variance": 2109.38,                  +
              |         "sum_sq_diff": 48515.63,              +
              |         "coefficient_of_variation_pct": 133.61+
              |     }                                         +
              | }

\echo ""
""
\echo "Checking statistics after Turnover Update"
"Checking statistics after Turnover Update"
\x
SELECT unit_type
     , COUNT(DISTINCT unit_id)
     , jsonb_agg(DISTINCT invalid_codes) FILTER (WHERE invalid_codes IS NOT NULL) AS invalid_codes
     , jsonb_pretty(jsonb_stats_summary_merge_agg(stats_summary)) AS stats_summary
 FROM statistical_unit
 WHERE valid_from <= CURRENT_DATE AND CURRENT_DATE < valid_until
 GROUP BY unit_type;
   unit_type   | count | invalid_codes |                 stats_summary                  
---------------+-------+---------------+------------------------------------------------
 establishment |    37 |               | {                                             +
               |       |               |     "turnover": {                             +
               |       |               |         "max": 4444,                          +
               |       |               |         "min": 20,                            +
               |       |               |         "sum": 49599,                         +
               |       |               |         "mean": 1340.51,                      +
               |       |               |         "type": "number",                     +
               |       |               |         "count": 37,                          +
               |       |               |         "stddev": 1192.27,                    +
               |       |               |         "variance": 1421508.42,               +
               |       |               |         "sum_sq_diff": 51174303.24,           +
               |       |               |         "coefficient_of_variation_pct": 88.94 +
               |       |               |     },                                        +
               |       |               |     "employees": {                            +
               |       |               |         "max": 10,                            +
               |       |               |         "min": 1,                             +
               |       |               |         "sum": 261,                           +
               |       |               |         "mean": 7.05,                         +
               |       |               |         "type": "number",                     +
               |       |               |         "count": 37,                          +
               |       |               |         "stddev": 3.69,                       +
               |       |               |         "variance": 13.61,                    +
               |       |               |         "sum_sq_diff": 489.89,                +
               |       |               |         "coefficient_of_variation_pct": 52.29 +
               |       |               |     }                                         +
               |       |               | }
 legal_unit    |    24 |               | {                                             +
               |       |               |     "turnover": {                             +
               |       |               |         "max": 2525,                          +
               |       |               |         "min": 20,                            +
               |       |               |         "sum": 80755,                         +
               |       |               |         "mean": 1718.19,                      +
               |       |               |         "type": "number",                     +
               |       |               |         "count": 47,                          +
               |       |               |         "stddev": 863.21,                     +
               |       |               |         "variance": 745124.85,                +
               |       |               |         "sum_sq_diff": 34275743.28,           +
               |       |               |         "coefficient_of_variation_pct": 50.24 +
               |       |               |     },                                        +
               |       |               |     "employees": {                            +
               |       |               |         "max": 250,                           +
               |       |               |         "min": 1,                             +
               |       |               |         "sum": 1030,                          +
               |       |               |         "mean": 21.91,                        +
               |       |               |         "type": "number",                     +
               |       |               |         "count": 47,                          +
               |       |               |         "stddev": 34.99,                      +
               |       |               |         "variance": 1224.17,                  +
               |       |               |         "sum_sq_diff": 56311.66,              +
               |       |               |         "coefficient_of_variation_pct": 159.65+
               |       |               |     }                                         +
               |       |               | }
 enterprise    |    36 |               | {                                             +
               |       |               |     "turnover": {                             +
               |       |               |         "max": 4444,                          +
               |       |               |         "min": 20,                            +
               |       |               |         "sum": 107799,                        +
               |       |               |         "mean": 1891.21,                      +
               |       |               |         "type": "number",                     +
               |       |               |         "count": 57,                          +
               |       |               |         "stddev": 1074.93,                    +
               |       |               |         "variance": 1155479.47,               +
               |       |               |         "sum_sq_diff": 64706850.17,           +
               |       |               |         "coefficient_of_variation_pct": 56.84 +
               |       |               |     },                                        +
               |       |               |     "employees": {                            +
               |       |               |         "max": 250,                           +
               |       |               |         "min": 1,                             +
               |       |               |         "sum": 1057,                          +
               |       |               |         "mean": 18.54,                        +
               |       |               |         "type": "number",                     +
               |       |               |         "count": 57,                          +
               |       |               |         "stddev": 32.56,                      +
               |       |               |         "variance": 1060.10,                  +
               |       |               |         "sum_sq_diff": 59365.47,              +
               |       |               |         "coefficient_of_variation_pct": 175.58+
               |       |               |     }                                         +
               |       |               | }
(3 rows)

\x
RESET client_min_messages;
\i test/rollback_unless_persist_is_specified.sql
---------------------------------------------------------------------------
-- Support development loading of the data without rollback using
--   ./devops/manage-statbus.sh psql --variable=PERSIST=true < test/sql/01_load_web_examples.sql
-- Ref. https://stackoverflow.com/a/32597876/1023558
\set PERSIST :PERSIST
-- now PERSIST is set to the string ':PERSIST' if was not already set.
-- Checking it using a CASE statement:
SELECT CASE
  WHEN :'PERSIST'= ':PERSIST'
  THEN 'false'
  ELSE :'PERSIST'
END::BOOL AS "PERSIST" \gset
-- < \gset call at end of the query to set variable.
\if :PERSIST
COMMIT;
\else
ROLLBACK;
\endif
