SET datestyle TO 'ISO, DMY';
BEGIN;
\i test/setup.sql
-- While the datestyle is set for the database, the pg_regress tool sets the MDY format
-- to ensure consistent date formatting, so we must manually override this
SET datestyle TO 'ISO, DMY';
\if :{?DEBUG}
SET client_min_messages TO debug1;
\else
SET client_min_messages TO NOTICE;
\endif
-- Create temporary function to execute queries as system user
CREATE OR REPLACE FUNCTION test.sudo_exec(
    sql text,
    OUT results jsonb
) RETURNS jsonb
SECURITY DEFINER LANGUAGE plpgsql AS $sudo_exec$
DECLARE
    result_rows jsonb;
BEGIN
    -- Check if the SQL starts with common DDL keywords
    IF sql ~* '^\s*(CREATE|DROP|ALTER|TRUNCATE|GRANT|REVOKE|ANALYZE)' THEN
        -- For DDL statements, execute directly
        EXECUTE sql;
        results := '[]'::jsonb;
    ELSE
        -- For DML/queries, wrap in a SELECT to capture results
        EXECUTE format('
            SELECT COALESCE(
                jsonb_agg(row_to_json(t)),
                ''[]''::jsonb
            )
            FROM (%s) t',
            sql
        ) INTO result_rows;
        results := result_rows;
    END IF;
END;
$sudo_exec$;
-- Grant execute to public since this is for testing
GRANT EXECUTE ON FUNCTION test.sudo_exec(text) TO PUBLIC;
\echo Add users for testing purposes
Add users for testing purposes
SELECT * FROM public.user_create(p_display_name => 'Test Admin', p_email => 'test.admin@statbus.org', p_statbus_role => 'admin_user'::statbus_role, p_password => 'Admin#123!');
         email          |  password  
------------------------+------------
 test.admin@statbus.org | Admin#123!
(1 row)

SELECT * FROM public.user_create(p_display_name => 'Test Regular', p_email => 'test.regular@statbus.org', p_statbus_role => 'regular_user'::statbus_role, p_password => 'Regular#123!');
          email           |   password   
--------------------------+--------------
 test.regular@statbus.org | Regular#123!
(1 row)

SELECT * FROM public.user_create(p_display_name => 'Test Restricted', p_email => 'test.restricted@statbus.org', p_statbus_role => 'restricted_user'::statbus_role, p_password => 'Restricted#123!');
            email            |    password     
-----------------------------+-----------------
 test.restricted@statbus.org | Restricted#123!
(1 row)

CREATE OR REPLACE PROCEDURE test.remove_pg_temp_for_tx_user_switch(p_keep_tables text[] DEFAULT '{}')
LANGUAGE plpgsql
AS $remove_pg_temp_for_tx_user_switch$
DECLARE
    rec record;
    v_found_count integer := 0;
BEGIN
    RAISE DEBUG 'Running test.remove_pg_temp_for_tx_user_switch(p_keep_tables => %)...', p_keep_tables;
    -- Remove temporary cache tables used by import, as we switch user inside the *same* transaction,
    -- and the new user can not modify tables owned by the previous import.
    -- This generic loop cleans up all tables and views in the pg_temp schema, except those specified to keep.
    FOR rec IN
        SELECT
            c.relname,
            c.relkind
        FROM pg_catalog.pg_class AS c
        LEFT JOIN pg_catalog.pg_namespace AS n ON n.oid = c.relnamespace
        WHERE c.relkind IN ('r', 'p', 'v', 'm') AND n.oid = pg_my_temp_schema() -- r=table, p=partitioned, v=view, m=materialized
          AND c.relname <> ALL(p_keep_tables)
    LOOP
        v_found_count := v_found_count + 1;
        IF rec.relkind IN ('r', 'p', 'm') THEN
            RAISE DEBUG '  -> Dropping temp TABLE %', rec.relname;
            EXECUTE format('DROP TABLE IF EXISTS pg_temp.%I CASCADE', rec.relname);
        ELSIF rec.relkind = 'v' THEN
            RAISE DEBUG '  -> Dropping temp VIEW %', rec.relname;
            EXECUTE format('DROP VIEW IF EXISTS pg_temp.%I CASCADE', rec.relname);
        END IF;
    END LOOP;

    RAISE DEBUG '...finished test.remove_pg_temp_for_tx_user_switch(). Found and dropped % objects.', v_found_count;

    -- This procedure is part of the sql_saga extension and has its own cleanup logic.
    -- While the loop above handles tables/views, this call ensures any other temporary
    -- objects it creates are also cleaned up.
    CALL sql_saga.temporal_merge_drop_temp_tables();
END;
$remove_pg_temp_for_tx_user_switch$;
\echo "Test 70: Sad Path - Error Scenarios"
"Test 70: Sad Path - Error Scenarios"
\echo "Setting up Statbus environment for test 70"
"Setting up Statbus environment for test 70"
-- A Super User configures statbus.
CALL test.set_user_from_email('test.admin@statbus.org');
\echo "User selected the Activity Category Standard"
"User selected the Activity Category Standard"
INSERT INTO settings(activity_category_standard_id,only_one_setting)
SELECT id, true FROM activity_category_standard WHERE code = 'nace_v2.1'
ON CONFLICT (only_one_setting)
DO UPDATE SET
   activity_category_standard_id =(SELECT id FROM activity_category_standard WHERE code = 'nace_v2.1')
   WHERE settings.id = EXCLUDED.id;
SELECT acs.code FROM public.settings AS s JOIN activity_category_standard AS acs ON s.activity_category_standard_id = acs.id;
   code    
-----------
 nace_v2.1
(1 row)

\echo "User uploads the sample activity categories, regions, legal forms, sectors"
"User uploads the sample activity categories, regions, legal forms, sectors"
\copy public.activity_category_available_custom(path,name,description) FROM 'samples/norway/activity_category/activity_category_norway.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
\copy public.region_upload(path, name) FROM 'samples/norway/regions/norway-regions-2024.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
\copy public.legal_form_custom_only(code,name) FROM 'samples/norway/legal_form/legal_form_norway.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
\copy public.sector_custom_only(path,name,description) FROM 'samples/norway/sector/sector_norway.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
SAVEPOINT main_test_70_start;
\echo "Initial counts before any test block for Test 70"
"Initial counts before any test block for Test 70"
SELECT
    (SELECT COUNT(*) FROM public.legal_unit) AS legal_unit_count,
    (SELECT COUNT(*) FROM public.establishment) AS establishment_count,
    (SELECT COUNT(*) FROM public.enterprise) AS enterprise_count;
 legal_unit_count | establishment_count | enterprise_count 
------------------+---------------------+------------------
                0 |                   0 |                0
(1 row)

-- Scenario 70.1: Invalid Codes in Input Data
SAVEPOINT scenario_70_1_invalid_codes;
\echo "Scenario 70.1: Invalid Codes in Input Data"
"Scenario 70.1: Invalid Codes in Input Data"
-- Sub-Scenario 70.1.1: LU Import with Various Analysis Errors
\echo "Sub-Scenario 70.1.1: LU Import with Various Analysis Errors (analyse_valid_time_from_source, analyse_legal_unit, analyse_activity, analyse_tags, analyse_statistical_variables, analyse_location, analyse_status)"
"Sub-Scenario 70.1.1: LU Import with Various Analysis Errors (analyse_valid_time_from_source, analyse_legal_unit, analyse_activity, analyse_tags, analyse_statistical_variables, analyse_location, analyse_status)"
DO $$
DECLARE v_definition_id INT; v_definition_slug TEXT := 'legal_unit_source_dates';
BEGIN
    SELECT id INTO v_definition_id FROM public.import_definition WHERE slug = v_definition_slug;
    IF v_definition_id IS NULL THEN RAISE EXCEPTION 'Import definition % not found.', v_definition_slug; END IF;
    INSERT INTO public.import_job (definition_id, slug, description, edit_comment)
    VALUES (v_definition_id, 'import_70_01_01_lu_analysis_errors', 'Test 70.1.1: LU Analysis Errors', 'Test 70.1.1');
END $$;
NOTICE:  identifier "import_70_01_01_lu_analysis_errors_upload_check_state_before_insert" will be truncated to "import_70_01_01_lu_analysis_errors_upload_check_state_before_in"
NOTICE:  identifier "import_70_01_01_lu_analysis_errors_upload_update_state_after_insert" will be truncated to "import_70_01_01_lu_analysis_errors_upload_update_state_after_in"
INSERT INTO public.import_70_01_01_lu_analysis_errors_upload(
    tax_ident, name, valid_from, valid_to, sector_code, legal_form_code, primary_activity_category_code, birth_date, death_date,
    secondary_activity_category_code, tag_path, employees, turnover,
    physical_address_part1, physical_region_code, physical_country_iso_2, physical_latitude,
    status_code, data_source_code, unit_size_code,
    postal_address_part1, postal_region_code, postal_country_iso_2
) VALUES
-- Existing errors from original test (NULLs added for new columns)
('700100001','LU Invalid Sector','2023-01-01','2023-12-31','INVALID_SEC','AS','01.110','2023-01-01',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
('700100002','LU Invalid LF','2023-01-01','2023-12-31','2100','INV_LF','01.110','2023-01-01',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
('700100003','LU Invalid Activity','2023-01-01','2023-12-31','2100','AS','99.999','2023-01-01',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
('700100004','LU Malformed Birth','2023-01-01','2023-12-31','2100','AS','01.110','2023-13-01',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
('700100005','LU Malformed ValidFrom','NOT_A_DATE','2023-12-31','2100','AS','01.110','2023-01-01',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
('700100006','LU Invalid Period','2023-01-01','2022-12-31','2100','AS','01.110','2023-01-01',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
-- New errors for analyse_valid_time_from_source (NULLs added for new columns)
('700100007','LU Malformed ValidTo','2023-01-01','NOT_A_DATE_TOO','2100','AS','01.110','2023-01-01',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
('700100008','LU Missing ValidFrom Source',NULL,'2023-12-31','2100','AS','01.110','2023-01-01',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
('700100009','LU Missing ValidTo Source','2023-01-01',NULL,'2100','AS','01.110','2023-01-01',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL),
-- New errors for analyse_legal_unit (NULLs added for new columns)
('700100010','LU Invalid DataSource','2023-01-01','2023-12-31','2100','AS','01.110','2023-01-01',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'inactive_unknown','INVALID_DS',NULL,NULL,NULL,NULL),
('700100011','LU Invalid UnitSize','2023-01-01','2023-12-31','2100','AS','01.110','2023-01-01',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'inactive_unknown',NULL,'BIGGER',NULL,NULL,NULL),
('700100012','LU Malformed DeathDate','2023-01-01','2023-12-31','2100','AS','01.110','2023-01-01','2023-02-30',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'inactive_unknown',NULL,NULL,NULL,NULL,NULL),
-- New error for analyse_activity (secondary) (NULLs added for new columns)
('700100013','LU Invalid SecondaryActivity','2023-01-01','2023-12-31','2100','AS','01.110','2023-01-01',NULL,'88.888',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'inactive_unknown',NULL,NULL,NULL,NULL,NULL),
-- New errors for analyse_tags (NULLs added for new columns)
('700100014','LU Invalid Tag Format','2023-01-01','2023-12-31','2100','AS','01.110','2023-01-01',NULL,NULL,'a b c',NULL,NULL,NULL,NULL,NULL,NULL,'inactive_unknown',NULL,NULL,NULL,NULL,NULL),
('700100015','LU Tag NotFound','2023-01-01','2023-12-31','2100','AS','01.110','2023-01-01',NULL,NULL,'non.existent.tag',NULL,NULL,NULL,NULL,NULL,NULL,'inactive_unknown',NULL,NULL,NULL,NULL,NULL),
-- New errors for analyse_statistical_variables (NULLs added for new columns)
('700100016','LU Invalid Int Stat','2023-01-01','2023-12-31','2100','AS','01.110','2023-01-01',NULL,NULL,NULL,'abc',NULL,NULL,NULL,NULL,NULL,'inactive_unknown',NULL,NULL,NULL,NULL,NULL),
('700100017','LU Invalid Float Stat','2023-01-01','2023-12-31','2100','AS','01.110','2023-01-01',NULL,NULL,NULL,NULL,'xyz',NULL,NULL,NULL,NULL,'inactive_unknown',NULL,NULL,NULL,NULL,NULL),
-- New errors for analyse_location (physical) (NULLs added for new columns)
('700100018','LU Invalid PhysRegion','2023-01-01','2023-12-31','2100','AS','01.110','2023-01-01',NULL,NULL,NULL,NULL,NULL,NULL,'XX','NO',NULL,'inactive_unknown',NULL,NULL,NULL,NULL,NULL),
('700100019','LU Invalid PhysCountry NF','2023-01-01','2023-12-31','2100','AS','01.110','2023-01-01',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'ZZ',NULL,'inactive_unknown',NULL,NULL,NULL,NULL,NULL),
('700100020','LU Invalid PhysCountry F','2023-01-01','2023-12-31','2100','AS','01.110','2023-01-01',NULL,NULL,NULL,NULL,NULL,'Street 1','01','ZZ',NULL,'inactive_unknown',NULL,NULL,NULL,NULL,NULL),
('700100021','LU Invalid PhysLat Format','2023-01-01','2023-12-31','2100','AS','01.110','2023-01-01',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'NO','abc','inactive_unknown',NULL,NULL,NULL,NULL,NULL),
('700100022','LU PhysLat Range','2023-01-01','2023-12-31','2100','AS','01.110','2023-01-01',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'NO','91.0','inactive_unknown',NULL,NULL,NULL,NULL,NULL),
-- Row for postal location tests (NULLs added for new columns)
('700100023','LU For Postal Location','2023-01-01','2023-12-31','2100','AS','01.110','2023-01-01',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'NO',NULL,'inactive_unknown',NULL,NULL,NULL,NULL,NULL),
-- New soft error test cases
('700100026','LU Invalid Status (Default Active)','2023-01-01','2023-12-31','2100','AS','01.110','2023-01-01',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'sleeping_unknown',NULL,NULL,NULL,NULL,NULL), -- invalid_codes: {status_code}, uses default
('700100028','LU Invalid PostalRegion','2023-01-01','2023-12-31','2100','AS','01.110','2023-01-01',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'active',NULL,NULL,NULL,'POSTAL_XX',NULL), -- invalid_codes: {postal_region_code}
('700100029','LU Invalid PostalCountry NF','2023-01-01','2023-12-31','2100','AS','01.110','2023-01-01',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'active',NULL,NULL,NULL,NULL,'P_ZZ'); -- invalid_codes: {postal_country_iso_2}
CALL worker.process_tasks(p_queue => 'import');
\echo "Job status for import_70_01_01_lu_analysis_errors:"
"Job status for import_70_01_01_lu_analysis_errors:"
SELECT slug, state, total_rows, imported_rows, error IS NOT NULL AS has_error, error as error_details FROM public.import_job WHERE slug = 'import_70_01_01_lu_analysis_errors' ORDER BY slug;
                slug                |  state   | total_rows | imported_rows | has_error | error_details 
------------------------------------+----------+------------+---------------+-----------+---------------
 import_70_01_01_lu_analysis_errors | finished |         26 |            13 | f         | 
(1 row)

\echo "Data table for import_70_01_01_lu_analysis_errors (expect various errors and invalid_codes):"
"Data table for import_70_01_01_lu_analysis_errors (expect various errors and invalid_codes):"
SELECT
    row_id,
    name_raw as name,
    state,
    action,
    valid_from,
    valid_to,
    errors,
    invalid_codes,
    merge_status,
    -- Include potentially affected resolved IDs to verify soft error handling
    status_id,
    (SELECT COUNT(*) FROM public.location l WHERE l.legal_unit_id = (SELECT legal_unit_id FROM public.import_70_01_01_lu_analysis_errors_data d_lu WHERE d_lu.row_id = d.row_id AND d_lu.legal_unit_id IS NOT NULL) AND l.type='postal') as postal_location_count
FROM public.import_70_01_01_lu_analysis_errors_data d ORDER BY row_id;
 row_id |                name                |   state   | action | valid_from |  valid_to  |                                                                                                                        errors                                                                                                                        |                                       invalid_codes                                       |                                       merge_status                                       | status_id | postal_location_count 

      1 | LU Invalid Sector                  | processed | use    | 2023-01-01 | 2023-12-31 | {}                                                                                                                                                                                                                                                   | {"sector_code_raw": "INVALID_SEC"}                                                        | {"legal_unit": "APPLIED", "primary_activity": "APPLIED"}                                 |         1 |                     0
      2 | LU Invalid LF                      | processed | use    | 2023-01-01 | 2023-12-31 | {}                                                                                                                                                                                                                                                   | {"legal_form_code_raw": "INV_LF"}                                                         | {"legal_unit": "APPLIED", "primary_activity": "APPLIED"}                                 |         1 |                     0
      3 | LU Invalid Activity                | processed | use    | 2023-01-01 | 2023-12-31 | {}                                                                                                                                                                                                                                                   | {"primary_activity_category_code_raw": "99.999"}                                          | {"legal_unit": "APPLIED"}                                                                |         1 |                     0
      4 | LU Malformed Birth                 | processed | use    | 2023-01-01 | 2023-12-31 | {}                                                                                                                                                                                                                                                   | {"birth_date_raw": "2023-13-01"}                                                          | {"legal_unit": "APPLIED", "primary_activity": "APPLIED"}                                 |         1 |                     0
      5 | LU Malformed ValidFrom             | error     | skip   |            | 2023-12-31 | {"valid_from_raw": "Invalid date format: 'NOT_A_DATE'. SQLSTATE: 22007"}                                                                                                                                                                             | {}                                                                                        | {}                                                                                       |           |                     0
      6 | LU Invalid Period                  | error     | skip   | 2023-01-01 | 2022-12-31 | {"valid_to_raw": "Resulting period is invalid: valid_from (2023-01-01) must be before valid_until (2023-01-01 00:00:00)", "valid_from_raw": "Resulting period is invalid: valid_from (2023-01-01) must be before valid_until (2023-01-01 00:00:00)"} | {}                                                                                        | {}                                                                                       |           |                     0
      7 | LU Malformed ValidTo               | error     | skip   | 2023-01-01 |            | {"valid_to_raw": "Invalid date format: 'NOT_A_DATE_TOO'. SQLSTATE: 22007"}                                                                                                                                                                           | {}                                                                                        | {}                                                                                       |           |                     0
      8 | LU Missing ValidFrom Source        | error     | skip   |            | 2023-12-31 | {"valid_from_raw": "Missing mandatory value"}                                                                                                                                                                                                        | {}                                                                                        | {}                                                                                       |           |                     0
      9 | LU Missing ValidTo Source          | error     | skip   | 2023-01-01 |            | {"valid_to_raw": "Missing mandatory value"}                                                                                                                                                                                                          | {}                                                                                        | {}                                                                                       |           |                     0
     10 | LU Invalid DataSource              | processed | use    | 2023-01-01 | 2023-12-31 | {}                                                                                                                                                                                                                                                   | {"status_code_raw": "inactive_unknown", "data_source_code_raw": "INVALID_DS"}             | {"legal_unit": "APPLIED", "primary_activity": "APPLIED"}                                 |         1 |                     0
     11 | LU Invalid UnitSize                | processed | use    | 2023-01-01 | 2023-12-31 | {}                                                                                                                                                                                                                                                   | {"status_code_raw": "inactive_unknown", "unit_size_code_raw": "BIGGER"}                   | {"legal_unit": "APPLIED", "primary_activity": "APPLIED"}                                 |         1 |                     0
     12 | LU Malformed DeathDate             | processed | use    | 2023-01-01 | 2023-12-31 | {}                                                                                                                                                                                                                                                   | {"death_date_raw": "2023-02-30", "status_code_raw": "inactive_unknown"}                   | {"legal_unit": "APPLIED", "primary_activity": "APPLIED"}                                 |         1 |                     0
     13 | LU Invalid SecondaryActivity       | processed | use    | 2023-01-01 | 2023-12-31 | {}                                                                                                                                                                                                                                                   | {"status_code_raw": "inactive_unknown", "secondary_activity_category_code_raw": "88.888"} | {"legal_unit": "APPLIED", "primary_activity": "APPLIED"}                                 |         1 |                     0
     14 | LU Invalid Tag Format              | error     | skip   | 2023-01-01 | 2023-12-31 | {"tag_path_raw": "Failed to cast 'a b c' to ltree. SQLSTATE: 42601, SQLERRM: ltree syntax error at character 2"}                                                                                                                                     | {"status_code_raw": "inactive_unknown"}                                                   | {}                                                                                       |         1 |                     0
     15 | LU Tag NotFound                    | error     | skip   | 2023-01-01 | 2023-12-31 | {"tag_path_raw": "Tag not found for path: non.existent.tag"}                                                                                                                                                                                         | {"status_code_raw": "inactive_unknown"}                                                   | {}                                                                                       |         1 |                     0
     16 | LU Invalid Int Stat                | error     | skip   | 2023-01-01 | 2023-12-31 | {"employees_raw": "Invalid integer format: 'abc'. SQLSTATE: 22P02"}                                                                                                                                                                                  | {"status_code_raw": "inactive_unknown"}                                                   | {}                                                                                       |         1 |                     0
     17 | LU Invalid Float Stat              | error     | skip   | 2023-01-01 | 2023-12-31 | {"turnover_raw": "Invalid numeric format: 'xyz'. SQLSTATE: 22P02"}                                                                                                                                                                                   | {"status_code_raw": "inactive_unknown"}                                                   | {}                                                                                       |         1 |                     0
     18 | LU Invalid PhysRegion              | processed | use    | 2023-01-01 | 2023-12-31 | {}                                                                                                                                                                                                                                                   | {"status_code_raw": "inactive_unknown", "physical_region_code_raw": "XX"}                 | {"legal_unit": "APPLIED", "primary_activity": "APPLIED", "physical_location": "APPLIED"} |         1 |                     0
     19 | LU Invalid PhysCountry NF          | processed | use    | 2023-01-01 | 2023-12-31 | {}                                                                                                                                                                                                                                                   | {"status_code_raw": "inactive_unknown", "physical_country_iso_2_raw": "ZZ"}               | {"legal_unit": "APPLIED", "primary_activity": "APPLIED"}                                 |         1 |                     0
     20 | LU Invalid PhysCountry F           | error     | skip   | 2023-01-01 | 2023-12-31 | {"physical_country_iso_2_raw": "Country is required and must be valid when other physical address details are provided."}                                                                                                                            | {"status_code_raw": "inactive_unknown"}                                                   | {}                                                                                       |         1 |                     0
     21 | LU Invalid PhysLat Format          | error     | skip   | 2023-01-01 | 2023-12-31 | {"physical_latitude_raw": "Value 'abc' is not a valid numeric representation for type NUMERIC(9,6). SQLSTATE: 22P02"}                                                                                                                                | {"status_code_raw": "inactive_unknown", "physical_latitude_raw": "abc"}                   | {}                                                                                       |         1 |                     0
     22 | LU PhysLat Range                   | error     | skip   | 2023-01-01 | 2023-12-31 | {"physical_latitude_raw": "Value 91.000000 out of range. Expected -90 to 90."}                                                                                                                                                                       | {"status_code_raw": "inactive_unknown", "physical_latitude_raw": "91.0"}                  | {}                                                                                       |         1 |                     0
     23 | LU For Postal Location             | processed | use    | 2023-01-01 | 2023-12-31 | {}                                                                                                                                                                                                                                                   | {"status_code_raw": "inactive_unknown"}                                                   | {"legal_unit": "APPLIED", "primary_activity": "APPLIED", "physical_location": "APPLIED"} |         1 |                     0
     24 | LU Invalid Status (Default Active) | processed | use    | 2023-01-01 | 2023-12-31 | {}                                                                                                                                                                                                                                                   | {"status_code_raw": "sleeping_unknown"}                                                   | {"legal_unit": "APPLIED", "primary_activity": "APPLIED"}                                 |         1 |                     0
     25 | LU Invalid PostalRegion            | error     | skip   | 2023-01-01 | 2023-12-31 | {"postal_country_iso_2_raw": "Country is required and must be valid when other postal address details are provided."}                                                                                                                                | {}                                                                                        | {}                                                                                       |         1 |                     0
     26 | LU Invalid PostalCountry NF        | processed | use    | 2023-01-01 | 2023-12-31 | {}                                                                                                                                                                                                                                                   | {"postal_country_iso_2_raw": "P_ZZ"}                                                      | {"legal_unit": "APPLIED", "primary_activity": "APPLIED"}                                 |         1 |                     0
(26 rows)

-- Test for analyse_status errors (requires temporarily disabling default status)
SAVEPOINT before_no_default_status_test_70_1_1;
\echo "Temporarily disabling default status for analyse_status tests..."
"Temporarily disabling default status for analyse_status tests..."
UPDATE public.status SET assigned_by_default = false WHERE code = 'active'; -- Assuming 'active' is the default
DO $$
DECLARE v_definition_id INT; v_definition_slug TEXT := 'legal_unit_source_dates';
BEGIN
    SELECT id INTO v_definition_id FROM public.import_definition WHERE slug = v_definition_slug;
    IF v_definition_id IS NULL THEN RAISE EXCEPTION 'Import definition % not found.', v_definition_slug; END IF;
    INSERT INTO public.import_job (definition_id, slug, description, edit_comment)
    VALUES (v_definition_id, 'import_70_01_01_lu_status_errors', 'Test 70.1.1: LU Status Errors (No Default)', 'Test 70.1.1');
END $$;
NOTICE:  identifier "import_70_01_01_lu_status_errors_upload_check_state_before_insert" will be truncated to "import_70_01_01_lu_status_errors_upload_check_state_before_inse"
NOTICE:  identifier "import_70_01_01_lu_status_errors_upload_update_state_after_insert" will be truncated to "import_70_01_01_lu_status_errors_upload_update_state_after_inse"
INSERT INTO public.import_70_01_01_lu_status_errors_upload(
    tax_ident, name, valid_from, valid_to, sector_code, legal_form_code, primary_activity_category_code, birth_date, status_code
) VALUES
('700100024','LU Invalid Status NoDefault','2023-01-01','2023-12-31','2100','AS','01.110','2023-01-01','INVALID_STATUS'), -- error: {status_code: "Provided status_code 'INVALID_STATUS' not found/active and no default available"}, action: skip
('700100025','LU No Status NoDefault','2023-01-01','2023-12-31','2100','AS','01.110','2023-01-01',NULL); -- error: {status_code: "Status code not provided and no active default status found"}, action: skip
CALL worker.process_tasks(p_queue => 'import');
\echo "Job status for import_70_01_01_lu_status_errors:"
"Job status for import_70_01_01_lu_status_errors:"
SELECT slug, state, total_rows, imported_rows, error IS NOT NULL AS has_error, error as error_details FROM public.import_job WHERE slug = 'import_70_01_01_lu_status_errors' ORDER BY slug;
               slug               |  state   | total_rows | imported_rows | has_error | error_details 
----------------------------------+----------+------------+---------------+-----------+---------------
 import_70_01_01_lu_status_errors | finished |          2 |             0 | f         | 
(1 row)

\echo "Data table for import_70_01_01_lu_status_errors (expect status_code errors):"
"Data table for import_70_01_01_lu_status_errors (expect status_code errors):"
SELECT row_id, name_raw as name, state, action, status_id, errors, invalid_codes, merge_status FROM public.import_70_01_01_lu_status_errors_data ORDER BY row_id;
 row_id |            name             | state | action | status_id |                                                 errors                                                 | invalid_codes | merge_status 
--------+-----------------------------+-------+--------+-----------+--------------------------------------------------------------------------------------------------------+---------------+--------------
      1 | LU Invalid Status NoDefault | error | skip   |           | {"status_code_raw": "Provided status_code 'INVALID_STATUS' not found/active and no default available"} | {}            | {}
      2 | LU No Status NoDefault      | error | skip   |           | {"status_code_raw": "Status code not provided and no active default status found"}                     | {}            | {}
(2 rows)

\echo "Restoring default status..."
"Restoring default status..."
ROLLBACK TO before_no_default_status_test_70_1_1;
-- Sub-Scenario 70.1.2: Formal ES Import with Invalid Codes
\echo "Sub-Scenario 70.1.2: Formal ES Import with Invalid Codes"
"Sub-Scenario 70.1.2: Formal ES Import with Invalid Codes"
DO $$
DECLARE v_lu_def_id INT; v_es_def_id INT;
BEGIN
    SELECT id INTO v_lu_def_id FROM public.import_definition WHERE slug = 'legal_unit_source_dates';
    IF v_lu_def_id IS NULL THEN RAISE EXCEPTION 'Import definition legal_unit_source_dates not found.'; END IF;
    SELECT id INTO v_es_def_id FROM public.import_definition WHERE slug = 'establishment_for_lu_source_dates';
    IF v_es_def_id IS NULL THEN RAISE EXCEPTION 'Import definition establishment_for_lu_source_dates not found.'; END IF;

    INSERT INTO public.import_job (definition_id, slug, description, edit_comment) VALUES (v_lu_def_id, 'import_70_01_02_lu_for_es', 'Test 70.1.2: Valid LU for ES', 'Test 70.1.2');
    INSERT INTO public.import_job (definition_id, slug, description, edit_comment) VALUES (v_es_def_id, 'import_70_01_02_es_invalid', 'Test 70.1.2: Formal ES Invalid Codes', 'Test 70.1.2');
END $$;
INSERT INTO public.import_70_01_02_lu_for_es_upload(tax_ident,name,valid_from,valid_to,primary_activity_category_code,sector_code,legal_form_code) VALUES
('700102001','Valid LU for ES Test','2023-01-01','2023-12-31','01.110','2100','AS');
INSERT INTO public.import_70_01_02_es_invalid_upload(tax_ident,name,valid_from,valid_to,primary_activity_category_code,legal_unit_tax_ident) VALUES
('E70010201','Formal ES Invalid Activity','2023-01-01','2023-12-31','99.998','700102001');
CALL worker.process_tasks(p_queue => 'import');
\echo "Job status for import_70_01_02_es_invalid:"
"Job status for import_70_01_02_es_invalid:"
SELECT slug, state, total_rows, imported_rows, error IS NOT NULL AS has_error FROM public.import_job WHERE slug = 'import_70_01_02_es_invalid' ORDER BY slug;
            slug            |  state   | total_rows | imported_rows | has_error 
----------------------------+----------+------------+---------------+-----------
 import_70_01_02_es_invalid | finished |          1 |             1 | f
(1 row)

\echo "Data table for import_70_01_02_es_invalid (expect errors):"
"Data table for import_70_01_02_es_invalid (expect errors):"
SELECT row_id, state, action, valid_from, valid_to, errors, invalid_codes, merge_status FROM public.import_70_01_02_es_invalid_data ORDER BY row_id;
 row_id |   state   | action | valid_from |  valid_to  | errors |                  invalid_codes                   |         merge_status         
--------+-----------+--------+------------+------------+--------+--------------------------------------------------+------------------------------
      1 | processed | use    | 2023-01-01 | 2023-12-31 | {}     | {"primary_activity_category_code_raw": "99.998"} | {"establishment": "APPLIED"}
(1 row)

-- Sub-Scenario 70.1.3: Informal ES Import with Invalid Codes
\echo "Sub-Scenario 70.1.3: Informal ES Import with Invalid Codes"
"Sub-Scenario 70.1.3: Informal ES Import with Invalid Codes"
DO $$
DECLARE v_definition_id INT; v_definition_slug TEXT := 'establishment_without_lu_source_dates';
BEGIN
    SELECT id INTO v_definition_id FROM public.import_definition WHERE slug = v_definition_slug;
    IF v_definition_id IS NULL THEN RAISE EXCEPTION 'Import definition % not found.', v_definition_slug; END IF;
    INSERT INTO public.import_job (definition_id, slug, description, edit_comment)
    VALUES (v_definition_id, 'import_70_01_03_es_inf_invalid', 'Test 70.1.3: Informal ES Invalid Codes', 'Test 70.1.3');
END $$;
INSERT INTO public.import_70_01_03_es_inf_invalid_upload(tax_ident,name,valid_from,valid_to,primary_activity_category_code) VALUES
('E70010301','Informal ES Invalid Activity','2023-01-01','2023-12-31','99.997');
CALL worker.process_tasks(p_queue => 'import');
\echo "Job status for import_70_01_03_es_inf_invalid:"
"Job status for import_70_01_03_es_inf_invalid:"
SELECT slug, state, total_rows, imported_rows, error IS NOT NULL AS has_error FROM public.import_job WHERE slug = 'import_70_01_03_es_inf_invalid' ORDER BY slug;
              slug              |  state   | total_rows | imported_rows | has_error 
--------------------------------+----------+------------+---------------+-----------
 import_70_01_03_es_inf_invalid | finished |          1 |             1 | f
(1 row)

\echo "Data table for import_70_01_03_es_inf_invalid (expect errors):"
"Data table for import_70_01_03_es_inf_invalid (expect errors):"
SELECT row_id, state, action, valid_from, valid_to, errors, invalid_codes, merge_status FROM public.import_70_01_03_es_inf_invalid_data ORDER BY row_id;
 row_id |   state   | action | valid_from |  valid_to  | errors |                  invalid_codes                   |         merge_status         
--------+-----------+--------+------------+------------+--------+--------------------------------------------------+------------------------------
      1 | processed | use    | 2023-01-01 | 2023-12-31 | {}     | {"primary_activity_category_code_raw": "99.997"} | {"establishment": "APPLIED"}
(1 row)

ROLLBACK TO scenario_70_1_invalid_codes;
-- Scenario 70.2: Missing Mandatory Data
SAVEPOINT scenario_70_2_missing_data;
\echo "Scenario 70.2: Missing Mandatory Data"
"Scenario 70.2: Missing Mandatory Data"
-- Sub-Scenario 70.2.1: LU Import - Missing Core Fields
\echo "Sub-Scenario 70.2.1: LU Import - Missing Core Fields"
"Sub-Scenario 70.2.1: LU Import - Missing Core Fields"
DO $$
DECLARE v_definition_id INT; v_definition_slug TEXT := 'legal_unit_source_dates';
BEGIN
    SELECT id INTO v_definition_id FROM public.import_definition WHERE slug = v_definition_slug;
    IF v_definition_id IS NULL THEN RAISE EXCEPTION 'Import definition % not found.', v_definition_slug; END IF;
    INSERT INTO public.import_job (definition_id, slug, description, edit_comment)
    VALUES (v_definition_id, 'import_70_02_01_lu_missing', 'Test 70.2.1: LU Missing Core', 'Test 70.2.1');
END $$;
INSERT INTO public.import_70_02_01_lu_missing_upload(tax_ident,name,valid_from,valid_to,primary_activity_category_code,sector_code,legal_form_code) VALUES
(NULL,'LU Missing TaxIdent','2023-01-01','2023-12-31','01.110','2100','AS'),
('700201002',NULL,'2023-01-01','2023-12-31','01.110','2100','AS'),
('700201003','LU Missing ValidFrom',NULL,'2023-12-31','01.110','2100','AS');
CALL worker.process_tasks(p_queue => 'import');
\echo "Job status for import_70_02_01_lu_missing:"
"Job status for import_70_02_01_lu_missing:"
SELECT slug, state, total_rows, imported_rows, error IS NOT NULL AS has_error FROM public.import_job WHERE slug = 'import_70_02_01_lu_missing' ORDER BY slug;
            slug            |  state   | total_rows | imported_rows | has_error 
----------------------------+----------+------------+---------------+-----------
 import_70_02_01_lu_missing | finished |          3 |             0 | f
(1 row)

\echo "Data table for import_70_02_01_lu_missing (expect errors, e.g., in analyse_external_idents):"
"Data table for import_70_02_01_lu_missing (expect errors, e.g., in analyse_external_idents):"
SELECT row_id, state, action, valid_from, valid_to, errors, invalid_codes, merge_status FROM public.import_70_02_01_lu_missing_data ORDER BY row_id;
 row_id | state | action | valid_from |  valid_to  |                                          errors                                           | invalid_codes | merge_status 
--------+-------+--------+------------+------------+-------------------------------------------------------------------------------------------+---------------+--------------
      1 | error | skip   | 2023-01-01 | 2023-12-31 | {"tax_ident_raw": "No identifier specified", "stat_ident_raw": "No identifier specified"} | {}            | {}
      2 | error | skip   | 2023-01-01 | 2023-12-31 | {"name_raw": "Missing required name for legal unit."}                                     | {}            | {}
      3 | error | skip   |            | 2023-12-31 | {"valid_from_raw": "Missing mandatory value"}                                             | {}            | {}
(3 rows)

-- Sub-Scenario 70.2.2: Formal ES Import - Missing Link
\echo "Sub-Scenario 70.2.2: Formal ES Import - Missing Link to LU"
"Sub-Scenario 70.2.2: Formal ES Import - Missing Link to LU"
DO $$
DECLARE v_lu_def_id INT; v_es_def_id INT;
BEGIN
    SELECT id INTO v_lu_def_id FROM public.import_definition WHERE slug = 'legal_unit_source_dates';
    IF v_lu_def_id IS NULL THEN RAISE EXCEPTION 'Import definition legal_unit_source_dates not found.'; END IF;
    SELECT id INTO v_es_def_id FROM public.import_definition WHERE slug = 'establishment_for_lu_source_dates';
    IF v_es_def_id IS NULL THEN RAISE EXCEPTION 'Import definition establishment_for_lu_source_dates not found.'; END IF;

    INSERT INTO public.import_job (definition_id, slug, description, edit_comment) VALUES (v_lu_def_id, 'import_70_02_02_lu_for_es_link', 'Test 70.2.2: Valid LU for ES', 'Test 70.2.2');
    INSERT INTO public.import_job (definition_id, slug, description, edit_comment) VALUES (v_es_def_id, 'import_70_02_02_es_missing_link', 'Test 70.2.2: Formal ES Missing LU Link', 'Test 70.2.2');
END $$;
NOTICE:  identifier "import_70_02_02_es_missing_link_upload_check_state_before_insert" will be truncated to "import_70_02_02_es_missing_link_upload_check_state_before_inser"
NOTICE:  identifier "import_70_02_02_es_missing_link_upload_update_state_after_insert" will be truncated to "import_70_02_02_es_missing_link_upload_update_state_after_inser"
INSERT INTO public.import_70_02_02_lu_for_es_link_upload(tax_ident,name,valid_from,valid_to,primary_activity_category_code,sector_code,legal_form_code) VALUES
('700202001','Valid LU for ES Link Test','2023-01-01','2023-12-31','01.110','2100','AS');
INSERT INTO public.import_70_02_02_es_missing_link_upload(tax_ident,name,valid_from,valid_to,primary_activity_category_code,legal_unit_tax_ident) VALUES
('E70020201','Formal ES Missing LU Link','2023-01-01','2023-12-31','01.110',NULL);
CALL worker.process_tasks(p_queue => 'import');
\echo "Job status for import_70_02_02_es_missing_link:"
"Job status for import_70_02_02_es_missing_link:"
SELECT slug, state, total_rows, imported_rows, error IS NOT NULL AS has_error FROM public.import_job WHERE slug = 'import_70_02_02_es_missing_link' ORDER BY slug;
              slug               |  state   | total_rows | imported_rows | has_error 
---------------------------------+----------+------------+---------------+-----------
 import_70_02_02_es_missing_link | finished |          1 |             0 | f
(1 row)

\echo "Data table for import_70_02_02_es_missing_link (expect errors in analyse_establishment_legal_unit_link):"
"Data table for import_70_02_02_es_missing_link (expect errors in analyse_establishment_legal_unit_link):"
SELECT row_id, state, action, valid_from, valid_to, errors, invalid_codes, merge_status FROM public.import_70_02_02_es_missing_link_data ORDER BY row_id;
 row_id | state | action | valid_from |  valid_to  |                                                            errors                                                             | invalid_codes | merge_status 
--------+-------+--------+------------+------------+-------------------------------------------------------------------------------------------------------------------------------+---------------+--------------
      1 | error | skip   | 2023-01-01 | 2023-12-31 | {"legal_unit_tax_ident_raw": "Missing legal unit identifier.", "legal_unit_stat_ident_raw": "Missing legal unit identifier."} | {}            | {}
(1 row)

ROLLBACK TO scenario_70_2_missing_data;
-- Scenario 70.3: Referential Integrity Errors during Processing
SAVEPOINT scenario_70_3_referential_integrity;
\echo "Scenario 70.3: Referential Integrity Errors during Processing"
"Scenario 70.3: Referential Integrity Errors during Processing"
-- Sub-Scenario 70.3.1: Formal ES links to Non-Existent LU
\echo "Sub-Scenario 70.3.1: Formal ES links to Non-Existent LU"
"Sub-Scenario 70.3.1: Formal ES links to Non-Existent LU"
DO $$
DECLARE v_definition_id INT; v_definition_slug TEXT := 'establishment_for_lu_source_dates';
BEGIN
    SELECT id INTO v_definition_id FROM public.import_definition WHERE slug = v_definition_slug;
    IF v_definition_id IS NULL THEN RAISE EXCEPTION 'Import definition % not found.', v_definition_slug; END IF;
    INSERT INTO public.import_job (definition_id, slug, description, edit_comment)
    VALUES (v_definition_id, 'import_70_03_01_es_bad_lu_link', 'Test 70.3.1: ES Bad LU Link', 'Test 70.3.1');
END $$;
INSERT INTO public.import_70_03_01_es_bad_lu_link_upload(tax_ident,name,valid_from,valid_to,primary_activity_category_code,legal_unit_tax_ident) VALUES
('E70030101','Formal ES Bad LU Link','2023-01-01','2023-12-31','01.110','NON_EXISTENT_LU_TAX_ID');
CALL worker.process_tasks(p_queue => 'import');
\echo "Job status for import_70_03_01_es_bad_lu_link:"
"Job status for import_70_03_01_es_bad_lu_link:"
SELECT slug, state, total_rows, imported_rows, error IS NOT NULL AS has_error FROM public.import_job WHERE slug = 'import_70_03_01_es_bad_lu_link' ORDER BY slug;
              slug              |  state   | total_rows | imported_rows | has_error 
--------------------------------+----------+------------+---------------+-----------
 import_70_03_01_es_bad_lu_link | finished |          1 |             0 | f
(1 row)

\echo "Data table for import_70_03_01_es_bad_lu_link (expect errors in process_establishment or analyse_establishment_legal_unit_link):"
"Data table for import_70_03_01_es_bad_lu_link (expect errors in process_establishment or analyse_establishment_legal_unit_link):"
SELECT row_id, state, action, valid_from, valid_to, errors, invalid_codes, merge_status FROM public.import_70_03_01_es_bad_lu_link_data ORDER BY row_id;
 row_id | state | action | valid_from |  valid_to  |                                     errors                                      | invalid_codes | merge_status 
--------+-------+--------+------------+------------+---------------------------------------------------------------------------------+---------------+--------------
      1 | error | skip   | 2023-01-01 | 2023-12-31 | {"legal_unit_tax_ident_raw": "Legal unit not found with provided identifiers."} | {}            | {}
(1 row)

ROLLBACK TO scenario_70_3_referential_integrity;
-- Scenario 70.4: Constraint Violations Not Caught by Analysis (Placeholder)
SAVEPOINT scenario_70_4_constraint_violations;
\echo "Scenario 70.4: Constraint Violations Not Caught by Analysis (Placeholder - difficult to reliably simulate if analysis is robust)"
"Scenario 70.4: Constraint Violations Not Caught by Analysis (Placeholder - difficult to reliably simulate if analysis is robust)"
-- No specific tests here yet, as these often depend on specific DB constraints not covered by analysis.
ROLLBACK TO scenario_70_4_constraint_violations;
-- Scenario 70.5: File-Level Errors (Placeholder)
SAVEPOINT scenario_70_5_file_errors;
\echo "Scenario 70.5: File-Level Errors (Placeholder - \copy errors are typically fatal to the psql script itself or hard to verify at job level)"
"Scenario 70.5: File-Level Errors (Placeholder - \copy errors are typically fatal to the psql script itself or hard to verify at job level)"
-- These errors (e.g. wrong delimiter, column count mismatch) usually cause \copy to fail.
-- The import job might not even reach a state where its status can be easily checked for these specific \copy failures.
-- If \copy succeeds but data is malformed leading to prepare step failure, that's a different case.
ROLLBACK TO scenario_70_5_file_errors;
-- Scenario 70.6: Errors in batch_insert_or_replace_generic_valid_time_table
SAVEPOINT scenario_70_6_batch_replace_errors;
\echo "Scenario 70.6: Errors in batch_insert_or_replace_generic_valid_time_table"
"Scenario 70.6: Errors in batch_insert_or_replace_generic_valid_time_table"
-- Sub-Scenario 70.6.1: Unexpected NULL for NOT NULL column (e.g. empty name for LU)
\echo "Sub-Scenario 70.6.1: LU with empty name (assuming name is NOT NULL in public.legal_unit)"
"Sub-Scenario 70.6.1: LU with empty name (assuming name is NOT NULL in public.legal_unit)"
DO $$
DECLARE v_definition_id INT; v_definition_slug TEXT := 'legal_unit_source_dates';
BEGIN
    SELECT id INTO v_definition_id FROM public.import_definition WHERE slug = v_definition_slug;
    IF v_definition_id IS NULL THEN RAISE EXCEPTION 'Import definition % not found.', v_definition_slug; END IF;
    INSERT INTO public.import_job (definition_id, slug, description, edit_comment)
    VALUES (v_definition_id, 'import_70_06_01_lu_empty_name', 'Test 70.6.1: LU Empty Name', 'Test 70.6.1');
END $$;
INSERT INTO public.import_70_06_01_lu_empty_name_upload(tax_ident,name,valid_from,valid_to,primary_activity_category_code,sector_code,legal_form_code) VALUES
('700601001',NULL,'2023-01-01','2023-12-31','01.110','2100','AS');
CALL worker.process_tasks(p_queue => 'import');
\echo "Job status for import_70_06_01_lu_empty_name:"
"Job status for import_70_06_01_lu_empty_name:"
SELECT slug, state, total_rows, imported_rows, error IS NOT NULL AS has_error FROM public.import_job WHERE slug = 'import_70_06_01_lu_empty_name' ORDER BY slug;
             slug              |  state   | total_rows | imported_rows | has_error 
-------------------------------+----------+------------+---------------+-----------
 import_70_06_01_lu_empty_name | finished |          1 |             0 | f
(1 row)

\echo "Data table for import_70_06_01_lu_empty_name (expect errors in process_legal_unit from batch_replace):"
"Data table for import_70_06_01_lu_empty_name (expect errors in process_legal_unit from batch_replace):"
SELECT row_id, state, action, valid_from, valid_to, errors, invalid_codes, merge_status FROM public.import_70_06_01_lu_empty_name_data ORDER BY row_id;
 row_id | state | action | valid_from |  valid_to  |                        errors                         | invalid_codes | merge_status 
--------+-------+--------+------------+------------+-------------------------------------------------------+---------------+--------------
      1 | error | skip   | 2023-01-01 | 2023-12-31 | {"name_raw": "Missing required name for legal unit."} | {}            | {}
(1 row)

ROLLBACK TO scenario_70_6_batch_replace_errors;
-- Scenario 70.7: analyse_external_idents Errors
SAVEPOINT scenario_70_7_external_idents_errors;
\echo "Scenario 70.7: analyse_external_idents Errors"
"Scenario 70.7: analyse_external_idents Errors"
-- Setup common to 70.7.x: Create some LUs, ESTs for conflict checks
DO $$
DECLARE
    v_user_id INT;
    v_lu1_id INT; v_lu2_id INT;
    v_est1_id INT; v_est2_id INT; v_est_formal_id INT;
    v_ent1_id INT;
    v_ent_for_lu1_id INT; v_ent_for_lu2_id INT; -- Added variables for LU enterprises

    -- Variables for patching definitions
    v_lu_def_id_patch INT;
    v_esf_def_id_patch INT;
    v_esi_def_id_patch INT;
    v_def_ids_to_patch INT[];
    v_current_def_id_patch INT;
    v_ext_idents_step_id_patch INT;
    v_custom_ident_data_col_id_patch INT;
    v_new_source_col_id_patch INT;
    v_max_priority_patch INT;
BEGIN
    SELECT id INTO v_user_id FROM public.user WHERE email = 'test.admin@statbus.org';

    -- Ensure custom_est_ident type exists for this test block. The INSERT will trigger
    -- lifecycle callbacks that should create the data column, source columns, and mappings
    -- for 'custom_est_ident' in all relevant default import definitions, making them
    -- available for use in the import jobs below.
    INSERT INTO public.external_ident_type (code, name, description, priority)
    VALUES ('custom_est_ident', 'Custom Establishment Identifier', 'A custom identifier type for testing establishment scenarios.', 10)
    ON CONFLICT (code) DO NOTHING;

    -- Enterprise for LU1
    INSERT INTO public.enterprise (short_name, edit_by_user_id, edit_at)
    VALUES ('ENT for LU1 70.7', v_user_id, now()) RETURNING id INTO v_ent_for_lu1_id;

    -- LU1
    INSERT INTO public.legal_unit (enterprise_id, name, status_id, primary_for_enterprise, edit_by_user_id, edit_at, valid_from)
    VALUES (v_ent_for_lu1_id, 'LU1 for 70.7', (SELECT id FROM public.status WHERE code = 'active'), true, v_user_id, now(), '2000-01-01') RETURNING id INTO v_lu1_id;
    INSERT INTO public.external_ident (legal_unit_id, type_id, ident, edit_by_user_id, edit_at)
    VALUES (v_lu1_id, (SELECT id FROM public.external_ident_type WHERE code = 'tax_ident'), 'LU7071_TAX', v_user_id, now()),
           (v_lu1_id, (SELECT id FROM public.external_ident_type WHERE code = 'stat_ident'), 'LU7071_STAT', v_user_id, now());

    -- Enterprise for LU2
    INSERT INTO public.enterprise (short_name, edit_by_user_id, edit_at)
    VALUES ('ENT for LU2 70.7', v_user_id, now()) RETURNING id INTO v_ent_for_lu2_id;

    -- LU2
    INSERT INTO public.legal_unit (enterprise_id, name, status_id, primary_for_enterprise, edit_by_user_id, edit_at, valid_from)
    VALUES (v_ent_for_lu2_id, 'LU2 for 70.7', (SELECT id FROM public.status WHERE code = 'active'), true, v_user_id, now(), '2000-01-01') RETURNING id INTO v_lu2_id;
    INSERT INTO public.external_ident (legal_unit_id, type_id, ident, edit_by_user_id, edit_at)
    VALUES (v_lu2_id, (SELECT id FROM public.external_ident_type WHERE code = 'stat_ident'), 'LU7072_STAT', v_user_id, now());

    -- EST1 (Informal)
    INSERT INTO public.enterprise (short_name, edit_by_user_id, edit_at) VALUES ('ENT1 70.7 EST1', v_user_id, now()) RETURNING id INTO v_ent1_id;
    INSERT INTO public.establishment (name, status_id, enterprise_id, primary_for_enterprise, edit_by_user_id, edit_at, valid_from)
    VALUES ('EST1 for 70.7 (Informal)', (SELECT id FROM public.status WHERE code = 'active'), v_ent1_id, true, v_user_id, now(), '2000-01-01') RETURNING id INTO v_est1_id;
    INSERT INTO public.external_ident (establishment_id, type_id, ident, edit_by_user_id, edit_at)
    VALUES (v_est1_id, (SELECT id FROM public.external_ident_type WHERE code = 'tax_ident'), 'EST7071_TAX', v_user_id, now());

    -- EST2 (Informal, different enterprise)
    INSERT INTO public.enterprise (short_name, edit_by_user_id, edit_at) VALUES ('ENT2 70.7 EST2', v_user_id, now()) RETURNING id INTO v_ent1_id; -- Re-use v_ent1_id for new enterprise
    INSERT INTO public.establishment (name, status_id, enterprise_id, primary_for_enterprise, edit_by_user_id, edit_at, valid_from)
    VALUES ('EST2 for 70.7 (Informal)', (SELECT id FROM public.status WHERE code = 'active'), v_ent1_id, true, v_user_id, now(), '2000-01-01') RETURNING id INTO v_est2_id;
    INSERT INTO public.external_ident (establishment_id, type_id, ident, edit_by_user_id, edit_at)
    VALUES (v_est2_id, (SELECT id FROM public.external_ident_type WHERE code = 'custom_est_ident'), 'EST7072_CUSTOM', v_user_id, now());

    -- EST_FORMAL (Formal, linked to LU1)
    INSERT INTO public.establishment (name, status_id, legal_unit_id, primary_for_legal_unit, edit_by_user_id, edit_at, valid_from)
    VALUES ('EST_FORMAL for 70.7', (SELECT id FROM public.status WHERE code = 'active'), v_lu1_id, true, v_user_id, now(), '2000-01-01') RETURNING id INTO v_est_formal_id;
    INSERT INTO public.external_ident (establishment_id, type_id, ident, edit_by_user_id, edit_at)
    VALUES (v_est_formal_id, (SELECT id FROM public.external_ident_type WHERE code = 'tax_ident'), 'EST707F_TAX', v_user_id, now());

END $$;
NOTICE:  Dropped index su_ei_stat_ident_idx
NOTICE:  Dropped index su_ei_tax_ident_idx
NOTICE:  Dropped index su_s_employees_idx
NOTICE:  Dropped index su_s_turnover_idx
NOTICE:  Dropped index su_ss_employees_count_idx
NOTICE:  Dropped index su_ss_employees_sum_idx
NOTICE:  Dropped index su_ss_turnover_count_idx
NOTICE:  Dropped index su_ss_turnover_sum_idx
NOTICE:  Created index su_ei_tax_ident for external_ident_type
NOTICE:  Created index su_ei_stat_ident for external_ident_type
NOTICE:  Created index su_ei_custom_est_ident for external_ident_type
NOTICE:  Created indices for stat_definition employees
NOTICE:  Created indices for stat_definition turnover
-- Sub-Scenario 70.7.1: Mode 'legal_unit' (using 'legal_unit_source_dates')
\echo "Sub-Scenario 70.7.1: analyse_external_idents - Mode 'legal_unit'"
"Sub-Scenario 70.7.1: analyse_external_idents - Mode 'legal_unit'"
DO $$
DECLARE v_definition_id INT; v_definition_slug TEXT := 'legal_unit_source_dates';
BEGIN
    SELECT id INTO v_definition_id FROM public.import_definition WHERE slug = v_definition_slug;
    INSERT INTO public.import_job (definition_id, slug, description, edit_comment)
    VALUES (v_definition_id, 'import_70_07_01_lu_idents', 'Test 70.7.1: LU Ident Errors', 'Test 70.7.1');
END $$;
INSERT INTO public.import_70_07_01_lu_idents_upload(tax_ident, stat_ident, name, valid_from, valid_to, sector_code, legal_form_code, primary_activity_category_code, birth_date, custom_est_ident) VALUES
(NULL,NULL,'LU NoIdents','2023-01-01','2023-12-31','2100','AS','01.110','2023-01-01',NULL), -- Error: missing_identifier_value
('LU7071_TAX','LU7072_STAT','LU Inconsistent','2023-01-01','2023-12-31','2100','AS','01.110','2023-01-01',NULL), -- Error: inconsistent_legal_unit
('EST7071_TAX',NULL,'LU CrossType EST','2023-01-01','2023-12-31','2100','AS','01.110','2023-01-01',NULL), -- Error: cross-type conflict (tax_ident used by EST1)
('LU7071_TAX','LU7071_STAT_CHANGED','LU Unstable Ident','2023-01-01','2023-12-31','2100','AS','01.110','2023-01-01',NULL) -- Error: unstable_identifier (attempts to change existing LU1.stat_ident)
;
-- The previous attempt to test an 'unknown_identifier_type' error by inserting into a
-- non-existent column in the _upload table was removed, as this causes a direct SQL error
-- rather than testing the import logic for unknown identifier type codes.
CALL worker.process_tasks(p_queue => 'import');
\echo "Data table for import_70_07_01_lu_idents (expect external_idents errors):"
"Data table for import_70_07_01_lu_idents (expect external_idents errors):"
SELECT row_id, name_raw as name, state, action, operation, errors, invalid_codes, merge_status, legal_unit_id FROM public.import_70_07_01_lu_idents_data ORDER BY row_id;
 row_id |       name        | state | action | operation |                                                                        errors                                                                         | invalid_codes | merge_status | legal_unit_id 
--------+-------------------+-------+--------+-----------+-------------------------------------------------------------------------------------------------------------------------------------------------------+---------------+--------------+---------------
      1 | LU NoIdents       | error | skip   | insert    | {"tax_ident_raw": "No identifier specified", "stat_ident_raw": "No identifier specified", "custom_est_ident_raw": "No identifier specified"}          | {}            | {}           |              
      2 | LU Inconsistent   | error | skip   | update    | {"tax_ident_raw": "Provided identifiers resolve to different Legal Units", "stat_ident_raw": "Provided identifiers resolve to different Legal Units"} | {}            | {}           |              
      3 | LU CrossType EST  | error | skip   | update    | {"tax_ident_raw": "Identifier already used by a Establishment: {\"tax_ident_raw\": \"EST7071_TAX\"}"}                                                 | {}            | {}           |              
      4 | LU Unstable Ident | error | skip   | update    | {"stat_ident_raw": "Identifier stat_ident value 'LU7071_STAT_CHANGED' from input attempts to change existing value 'LU7071_STAT'"}                    | {}            | {}           |              
(4 rows)

-- Sub-Scenario 70.7.2: Mode 'establishment_formal' (using 'establishment_for_lu_source_dates')
\echo "Sub-Scenario 70.7.2: analyse_external_idents - Mode 'establishment_formal'"
"Sub-Scenario 70.7.2: analyse_external_idents - Mode 'establishment_formal'"
DO $$
DECLARE v_definition_id INT; v_definition_slug TEXT := 'establishment_for_lu_source_dates';
BEGIN
    SELECT id INTO v_definition_id FROM public.import_definition WHERE slug = v_definition_slug;
    INSERT INTO public.import_job (definition_id, slug, description, edit_comment)
    VALUES (v_definition_id, 'import_70_07_02_est_f_idents', 'Test 70.7.2: Formal EST Ident Errors', 'Test 70.7.2');
END $$;
INSERT INTO public.import_70_07_02_est_f_idents_upload(tax_ident, name, valid_from, valid_to, primary_activity_category_code, legal_unit_tax_ident) VALUES
('EST7071_TAX','ESTF Inconsistent','2023-01-01','2023-12-31','01.110','LU7071_TAX'), -- Error: inconsistent_establishment (EST1 vs EST2) - Note: custom_est_ident 'EST7072_CUSTOM' removed due to upload table structure
('LU7071_TAX','ESTF CrossType LU','2023-01-01','2023-12-31','01.110','LU7071_TAX'); -- Error: cross-type conflict (tax_ident used by LU1)
CALL worker.process_tasks(p_queue => 'import');
\echo "Data table for import_70_07_02_est_f_idents (expect external_idents errors):"
"Data table for import_70_07_02_est_f_idents (expect external_idents errors):"
SELECT row_id, name_raw as name, state, action, operation, errors, invalid_codes, merge_status, establishment_id FROM public.import_70_07_02_est_f_idents_data ORDER BY row_id;
 row_id |       name        | state | action | operation |                                                     errors                                                     | invalid_codes | merge_status | establishment_id 
--------+-------------------+-------+--------+-----------+----------------------------------------------------------------------------------------------------------------+---------------+--------------+------------------
      1 | ESTF Inconsistent | error | skip   | update    | {"tax_ident_raw": "Identifier already used by a Informal Establishment: {\"tax_ident_raw\": \"EST7071_TAX\"}"} | {}            | {}           |                 
      2 | ESTF CrossType LU | error | skip   | update    | {"tax_ident_raw": "Identifier already used by a Legal Unit: {\"tax_ident_raw\": \"LU7071_TAX\"}"}              | {}            | {}           |                 
(2 rows)

-- Sub-Scenario 70.7.3: Mode 'establishment_informal' (using 'establishment_without_lu_source_dates')
\echo "Sub-Scenario 70.7.3: analyse_external_idents - Mode 'establishment_informal'"
"Sub-Scenario 70.7.3: analyse_external_idents - Mode 'establishment_informal'"
DO $$
DECLARE v_definition_id INT; v_definition_slug TEXT := 'establishment_without_lu_source_dates';
BEGIN
    SELECT id INTO v_definition_id FROM public.import_definition WHERE slug = v_definition_slug;
    INSERT INTO public.import_job (definition_id, slug, description, edit_comment)
    VALUES (v_definition_id, 'import_70_07_03_est_inf_idents', 'Test 70.7.3: Informal EST Ident Errors', 'Test 70.7.3');
END $$;
INSERT INTO public.import_70_07_03_est_inf_idents_upload(tax_ident, name, valid_from, valid_to, primary_activity_category_code) VALUES
('LU7071_TAX','ESTINF CrossType LU','2023-01-01','2023-12-31','01.110'), -- Error: cross-type conflict (tax_ident used by LU1)
('EST707F_TAX','ESTINF CrossType FormalEST','2023-01-01','2023-12-31','01.110'); -- Error: cross-type conflict (tax_ident used by EST_FORMAL)
CALL worker.process_tasks(p_queue => 'import');
\echo "Data table for import_70_07_03_est_inf_idents (expect external_idents errors):"
"Data table for import_70_07_03_est_inf_idents (expect external_idents errors):"
SELECT row_id, name_raw as name, state, action, operation, errors, invalid_codes, merge_status, establishment_id FROM public.import_70_07_03_est_inf_idents_data ORDER BY row_id;
 row_id |            name            | state | action | operation |                                                    errors                                                    | invalid_codes | merge_status | establishment_id 
--------+----------------------------+-------+--------+-----------+--------------------------------------------------------------------------------------------------------------+---------------+--------------+------------------
      1 | ESTINF CrossType LU        | error | skip   | update    | {"tax_ident_raw": "Identifier already used by a Legal Unit: {\"tax_ident_raw\": \"LU7071_TAX\"}"}            | {}            | {}           |                 
      2 | ESTINF CrossType FormalEST | error | skip   | update    | {"tax_ident_raw": "Identifier already used by a Formal Establishment: {\"tax_ident_raw\": \"EST707F_TAX\"}"} | {}            | {}           |                 
(2 rows)

ROLLBACK TO scenario_70_7_external_idents_errors;
-- Scenario 70.8: analyse_link_establishment_to_legal_unit Errors
SAVEPOINT scenario_70_8_link_est_lu_errors;
\echo "Scenario 70.8: analyse_link_establishment_to_legal_unit Errors (Mode 'establishment_formal')"
"Scenario 70.8: analyse_link_establishment_to_legal_unit Errors (Mode 'establishment_formal')"
DO $$
DECLARE
    v_definition_id INT; v_definition_slug TEXT := 'establishment_for_lu_source_dates';
    rec RECORD;
BEGIN
    SELECT id INTO v_definition_id FROM public.import_definition WHERE slug = v_definition_slug;

    RAISE NOTICE 'Diagnostic for Scenario 70.8: Expected source input columns for definition "%" (ID: %) like "legal_unit_%%":', v_definition_slug, v_definition_id;
    FOR rec IN
        SELECT dc.column_name, s.code AS step_code
        FROM public.import_data_column dc
        JOIN public.import_step s ON dc.step_id = s.id
        JOIN public.import_definition_step ds ON ds.step_id = s.id
        WHERE ds.definition_id = v_definition_id
          AND dc.purpose = 'source_input'
          AND dc.column_name ILIKE 'legal_unit_%'
        ORDER BY s.priority, dc.column_name
    LOOP
        RAISE NOTICE '  -> Found source input data column: % (for step: %)', rec.column_name, rec.step_code;
    END LOOP;
    IF NOT FOUND THEN
        RAISE NOTICE '  -> No source input data columns found matching "legal_unit_%%" for definition "%".', v_definition_slug;
    END IF;

    INSERT INTO public.import_job (definition_id, slug, description, edit_comment)
    VALUES (v_definition_id, 'import_70_08_link_est_lu', 'Test 70.8: Link EST to LU Errors', 'Test 70.8');
END $$;
NOTICE:  Diagnostic for Scenario 70.8: Expected source input columns for definition "establishment_for_lu_source_dates" (ID: 4) like "legal_unit_%":
NOTICE:    -> Found source input data column: legal_unit_stat_ident_raw (for step: link_establishment_to_legal_unit)
NOTICE:    -> Found source input data column: legal_unit_tax_ident_raw (for step: link_establishment_to_legal_unit)
-- Setup: LU1 (tax_ident='LU7071_TAX', stat_ident='LU7071_STAT'), LU2 (stat_ident='LU7072_STAT') from 70.7 setup are available.
-- The diagnostic RAISE NOTICE above should confirm that legal_unit_tax_ident and legal_unit_stat_ident are expected source columns.
INSERT INTO public.import_70_08_link_est_lu_upload(tax_ident, name, valid_from, valid_to, primary_activity_category_code, legal_unit_tax_ident, legal_unit_stat_ident) VALUES
('E7081', 'EST No LUIdent', '2023-01-01', '2023-12-31', '01.110', NULL, NULL), -- Error: missing_identifier
('E7082', 'EST LU NotFound', '2023-01-01', '2023-12-31', '01.110', 'LU_NONEXISTENT_TAX', NULL), -- Error: not_found
('E7083', 'EST LU Inconsistent', '2023-01-01', '2023-12-31', '01.110', 'LU7071_TAX', 'LU7072_STAT'); -- Error: inconsistent_legal_unit
CALL worker.process_tasks(p_queue => 'import');
\echo "Data table for import_70_08_link_est_lu (expect link_establishment_to_legal_unit errors):"
"Data table for import_70_08_link_est_lu (expect link_establishment_to_legal_unit errors):"
SELECT row_id, name_raw as name, state, action, errors, invalid_codes, merge_status, legal_unit_id FROM public.import_70_08_link_est_lu_data ORDER BY row_id;
 row_id |        name         | state | action |                                                                             errors                                                                              | invalid_codes | merge_status | legal_unit_id 
--------+---------------------+-------+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------+--------------+---------------
      1 | EST No LUIdent      | error | skip   | {"legal_unit_tax_ident_raw": "Missing legal unit identifier.", "legal_unit_stat_ident_raw": "Missing legal unit identifier."}                                   | {}            | {}           |              
      2 | EST LU NotFound     | error | skip   | {"legal_unit_tax_ident_raw": "Legal unit not found with provided identifiers."}                                                                                 | {}            | {}           |              
      3 | EST LU Inconsistent | error | skip   | {"legal_unit_tax_ident_raw": "Legal unit not found with provided identifiers.", "legal_unit_stat_ident_raw": "Legal unit not found with provided identifiers."} | {}            | {}           |              
(3 rows)

ROLLBACK TO scenario_70_8_link_est_lu_errors;
-- Scenario 70.9: Job Creation Validation Errors (Time Context & Default Dates)
SAVEPOINT scenario_70_9_job_creation_errors;
\echo "Scenario 70.9: Job Creation Validation Errors (Time Context & Default Dates)"
"Scenario 70.9: Job Creation Validation Errors (Time Context & Default Dates)"
DO $$
DECLARE
    v_def_context_id INT;
    v_def_source_id INT;
BEGIN
    SELECT id INTO v_def_context_id FROM public.import_definition WHERE slug = 'legal_unit_job_provided';
    IF v_def_context_id IS NULL THEN RAISE EXCEPTION 'Setup for Test 70.9 FAILED: Definition "legal_unit_job_provided" not found.'; END IF;

    SELECT id INTO v_def_source_id FROM public.import_definition WHERE slug = 'legal_unit_source_dates';
    IF v_def_source_id IS NULL THEN RAISE EXCEPTION 'Setup for Test 70.9 FAILED: Definition "legal_unit_source_dates" not found.'; END IF;

    -- Test 70.9.1: Create job for 'time_context' definition WITHOUT providing time_context_ident (should fail)
    BEGIN
        INSERT INTO public.import_job (definition_id, slug, description, edit_comment)
        VALUES (v_def_context_id, 'import_70_09_01_ctx_missing_ident', 'Test 70.9.1: Missing time_context_ident', 'Test 70.9.1');
        RAISE EXCEPTION 'Test 70.9.1 FAILED: Expected INSERT to fail due to missing time_context_ident.';
    EXCEPTION
        WHEN raise_exception THEN
            RAISE NOTICE 'Test 70.9.1 PASSED: Correctly failed to create job for time_context definition without time_context_ident. SQLERRM: %', SQLERRM;
    END;

    -- Test 70.9.2: Create job for 'time_context' definition WITH both time_context_ident AND default_valid_from (should fail)
    BEGIN
        INSERT INTO public.import_job (definition_id, slug, description, edit_comment, time_context_ident, default_valid_from)
        VALUES (v_def_context_id, 'import_70_09_02_ctx_conflict_from', 'Test 70.9.2: time_context_ident conflicts with default_valid_from', 'Test 70.9.2', 'r_year_curr', '2023-01-01');
        RAISE EXCEPTION 'Test 70.9.2 FAILED: Expected INSERT to fail due to conflict between time_context_ident and default_valid_from.';
    EXCEPTION
        WHEN raise_exception THEN
            RAISE NOTICE 'Test 70.9.2 PASSED: Correctly failed to create job with conflicting time_context_ident and default_valid_from. SQLERRM: %', SQLERRM;
    END;

    -- Test 70.9.3: Create job for 'source_columns' definition WITH time_context_ident (should fail)
    BEGIN
        INSERT INTO public.import_job (definition_id, slug, description, edit_comment, time_context_ident)
        VALUES (v_def_source_id, 'import_70_09_03_source_conflict_ctx', 'Test 70.9.3: time_context_ident with source_columns definition', 'Test 70.9.3', 'r_year_curr');
        RAISE EXCEPTION 'Test 70.9.3 FAILED: Expected INSERT to fail due to providing time_context_ident for a source_columns definition.';
    EXCEPTION
        WHEN raise_exception THEN
            RAISE NOTICE 'Test 70.9.3 PASSED: Correctly failed to create job with conflicting time_context_ident for source_columns definition. SQLERRM: %', SQLERRM;
    END;

    -- Test 70.9.4: Job for 'source_columns' definition with default_valid_from/to (should fail)
    BEGIN
        INSERT INTO public.import_job (definition_id, slug, description, edit_comment, default_valid_from, default_valid_to)
        VALUES (v_def_source_id, 'import_70_09_04_job_inv_period', 'Test 70.9.4: Job with default_valid_from/to for source_columns def', 'Test 70.9.4', '2024-01-01', '2023-12-31');
        RAISE EXCEPTION 'Test 70.9.4 FAILED: Expected INSERT to fail due to providing default dates for a source_columns definition.';
    EXCEPTION
        WHEN raise_exception THEN -- The trigger should raise an exception
            RAISE NOTICE 'Test 70.9.4 PASSED: Correctly failed to create job with default dates for a source_columns definition. SQLERRM: %', SQLERRM;
        WHEN others THEN
             RAISE NOTICE 'Test 70.9.4 FAILED: Expected raise_exception but got different error. SQLERRM: %', SQLERRM;
             RAISE; -- Re-raise other unexpected errors
    END;

    -- Test 70.9.5: Job for 'source_columns' definition with default_valid_from/to (should fail)
    BEGIN
        INSERT INTO public.import_job (definition_id, slug, description, edit_comment, default_valid_from, default_valid_to)
        VALUES (v_def_source_id, 'import_70_09_05_job_from_null_to', 'Test 70.9.5: Job with default_valid_from for source_columns def', 'Test 70.9.5', '2023-01-01', NULL);
        RAISE EXCEPTION 'Test 70.9.5 FAILED: Expected INSERT to fail due to providing default dates for a source_columns definition.';
    EXCEPTION
        WHEN raise_exception THEN -- The trigger should raise an exception
            RAISE NOTICE 'Test 70.9.5 PASSED: Correctly failed to create job with default dates for a source_columns definition. SQLERRM: %', SQLERRM;
        WHEN others THEN
            RAISE NOTICE 'Test 70.9.5 FAILED: Expected raise_exception but got different error. SQLERRM: %', SQLERRM;
            RAISE;
    END;

    -- Test 70.9.6: Job for 'source_columns' definition with default_valid_from/to (should fail)
    BEGIN
        INSERT INTO public.import_job (definition_id, slug, description, edit_comment, default_valid_from, default_valid_to)
        VALUES (v_def_source_id, 'import_70_09_06_job_null_from_to', 'Test 70.9.6: Job with default_valid_to for source_columns def', 'Test 70.9.6', NULL, '2023-12-31');
        RAISE EXCEPTION 'Test 70.9.6 FAILED: Expected INSERT to fail due to providing default dates for a source_columns definition.';
    EXCEPTION
        WHEN raise_exception THEN -- The trigger should raise an exception
            RAISE NOTICE 'Test 70.9.6 PASSED: Correctly failed to create job with default dates for a source_columns definition. SQLERRM: %', SQLERRM;
        WHEN others THEN
            RAISE NOTICE 'Test 70.9.6 FAILED: Expected raise_exception but got different error. SQLERRM: %', SQLERRM;
            RAISE;
    END;

END $$;
NOTICE:  Test 70.9.1 PASSED: Correctly failed to create job for time_context definition without time_context_ident. SQLERRM: Must specify either a time_context_ident or explicit default_valid_from/to dates for a job with definition Legal Units (Job Provided Time).
NOTICE:  Test 70.9.2 PASSED: Correctly failed to create job with conflicting time_context_ident and default_valid_from. SQLERRM: Cannot specify both a time_context_ident and explicit default_valid_from/to dates for a job with definition Legal Units (Job Provided Time).
NOTICE:  Test 70.9.3 PASSED: Correctly failed to create job with conflicting time_context_ident for source_columns definition. SQLERRM: Cannot specify a time_context_ident for an import job when its definition (Legal Units (Source Dates)) has valid_time_from="source_columns".
NOTICE:  Test 70.9.4 PASSED: Correctly failed to create job with default dates for a source_columns definition. SQLERRM: Cannot specify default_valid_from/to for an import job when its definition (Legal Units (Source Dates)) has valid_time_from="source_columns".
NOTICE:  Test 70.9.5 PASSED: Correctly failed to create job with default dates for a source_columns definition. SQLERRM: Cannot specify default_valid_from/to for an import job when its definition (Legal Units (Source Dates)) has valid_time_from="source_columns".
NOTICE:  Test 70.9.6 PASSED: Correctly failed to create job with default dates for a source_columns definition. SQLERRM: Cannot specify default_valid_from/to for an import job when its definition (Legal Units (Source Dates)) has valid_time_from="source_columns".
-- Since the jobs in 70.9 are expected to fail at creation, there will be no _data tables to query.
-- The RAISE NOTICE statements within the EXCEPTION blocks will serve as verification.
\echo "Scenario 70.9: Verification is done via RAISE NOTICE in EXCEPTION blocks above."
"Scenario 70.9: Verification is done via RAISE NOTICE in EXCEPTION blocks above."
ROLLBACK TO scenario_70_9_job_creation_errors;
\echo "Final counts after all test blocks for Test 70 (should be same as initial due to rollbacks)"
"Final counts after all test blocks for Test 70 (should be same as initial due to rollbacks)"
SELECT
    (SELECT COUNT(*) FROM public.legal_unit) AS legal_unit_count,
    (SELECT COUNT(*) FROM public.establishment) AS establishment_count,
    (SELECT COUNT(*) FROM public.enterprise) AS enterprise_count;
 legal_unit_count | establishment_count | enterprise_count 
------------------+---------------------+------------------
                0 |                   0 |                0
(1 row)

ROLLBACK TO main_test_70_start;
\echo "Test 70 completed and rolled back to main start."
"Test 70 completed and rolled back to main start."
ROLLBACK; -- Final rollback for the entire transaction
