BEGIN;
\echo "Setting up Statbus to load establishments without legal units"
"Setting up Statbus to load establishments without legal units"
\echo "User selected the Activity Category Standard"
"User selected the Activity Category Standard"
INSERT INTO settings(activity_category_standard_id,only_one_setting)
SELECT id, true FROM activity_category_standard WHERE code = 'nace_v2.1'
ON CONFLICT (only_one_setting)
DO UPDATE SET
   activity_category_standard_id =(SELECT id FROM activity_category_standard WHERE code = 'nace_v2.1')
   WHERE settings.id = EXCLUDED.id;
;
SELECT acs.code
  FROM public.settings AS s
  JOIN activity_category_standard AS acs
    ON s.activity_category_standard_id = acs.id;
   code    
-----------
 nace_v2.1
(1 row)

--\echo "User uploads the sample activity categories"
--\copy public.activity_category_available_custom(path,name,description) FROM 'app/public/activity_category_norway.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
--SELECT count(*) FROM public.activity_category_available;
--\echo "User uploads the sample regions"
--\copy public.region_upload(path, name) FROM 'app/public/norway-regions-2024.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
--SELECT count(*) FROM public.region;
--\echo "User uploads the sample legal forms"
--\copy public.legal_form_custom_only(code,name) FROM 'app/public/legal_form_norway.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
--SELECT count(*) FROM public.legal_form_available;
\d public.sector_custom_only
           View "public.sector_custom_only"
   Column    | Type  | Collation | Nullable | Default 
-------------+-------+-----------+----------+---------
 path        | ltree |           |          | 
 name        | text  |           |          | 
 description | text  |           |          | 
Triggers:
    sector_custom_only_prepare_trigger BEFORE INSERT ON sector_custom_only FOR EACH STATEMENT EXECUTE FUNCTION admin.sector_custom_only_prepare()
    sector_custom_only_upsert INSTEAD OF INSERT ON sector_custom_only FOR EACH ROW EXECUTE FUNCTION admin.sector_custom_only_upsert()

\sf admin.sector_custom_only_upsert
CREATE OR REPLACE FUNCTION admin.sector_custom_only_upsert()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
DECLARE
    maybe_parent_id int := NULL;
    row RECORD;
BEGIN
    -- Find parent sector based on NEW.path
    IF public.nlevel(NEW.path) > 1 THEN
        SELECT id INTO maybe_parent_id
          FROM public.sector
         WHERE path OPERATOR(public.=) public.subltree(NEW.path, 0, public.nlevel(NEW.path) - 1)
           AND active
           AND custom;
        IF NOT FOUND THEN
          RAISE EXCEPTION 'Could not find parent for path %', NEW.path;
        END IF;
        RAISE DEBUG 'maybe_parent_id %', maybe_parent_id;
    END IF;

    -- Perform an upsert operation on public.sector
    BEGIN
        INSERT INTO public.sector
            ( path
            , parent_id
            , name
            , description
            , updated_at
            , active
            , custom
            )
        VALUES
            ( NEW.path
            , maybe_parent_id
            , NEW.name
            , NEW.description
            , statement_timestamp()
            , TRUE -- Active
            , TRUE -- Custom
            )
        ON CONFLICT (path, active, custom)
        DO UPDATE SET
                parent_id = maybe_parent_id
              , name = NEW.name
              , description = NEW.description
              , updated_at = statement_timestamp()
              , active = TRUE
              , custom = TRUE
           RETURNING * INTO row;

        -- Log the upserted row
        RAISE DEBUG 'UPSERTED %', to_json(row);

    EXCEPTION WHEN unique_violation THEN
        DECLARE
            code varchar := regexp_replace(regexp_replace(NEW.path::TEXT, '[^0-9]', '', 'g'),'^([0-9]{2})(.+)$','\1.\2','');
            data JSONB := to_jsonb(NEW);
        BEGIN
           data := jsonb_set(data, '{code}', code::jsonb, true);
            RAISE EXCEPTION '% for row %', SQLERRM, data
                USING
                DETAIL = 'Failed during UPSERT operation',
                HINT = 'Check for path derived numeric code violations';
        END;
    END;

    RETURN NULL;
END;
$function$
\echo "User uploads the sample sectors"
"User uploads the sample sectors"
\copy public.sector_custom_only(path,name,description) FROM 'test/data/30_ug_sectorcodes_with_index_error.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
ERROR:  duplicate key value violates unique constraint "sector_code_active_key" for row {"code": 1, "name": "er ror,part2 ", "path": "s1", "description": "desc works"}
DETAIL:  Failed during UPSERT operation
HINT:  Check for path derived numeric code violations
CONTEXT:  PL/pgSQL function admin.sector_custom_only_upsert() line 58 at RAISE
COPY sector_custom_only, line 9: "s1,"er ror,part2 ",desc works"
ROLLBACK;
