BEGIN;
-- Create a function to disable RLS on import tables to support the \copy command.
-- and that requires privileges, make it a security definer, such that it can be
-- called by the user the tests run as.
CREATE PROCEDURE public.disable_rls_on_table(schema_name text, table_name text) LANGUAGE plpgsql SECURITY DEFINER AS $disable_rls_on_table$
BEGIN
  EXECUTE format('ALTER TABLE %I DISABLE ROW LEVEL SECURITY', table_name);
END;
$disable_rls_on_table$;
-- Grant execute permission to authenticated users
GRANT EXECUTE ON PROCEDURE public.disable_rls_on_table TO authenticated;
\i test/setup.sql
SELECT * FROM public.statbus_user_create('test.super@statbus.org', 'super_user'::statbus_role_type, 'Super#123!');
         email          |  password  
------------------------+------------
 test.super@statbus.org | Super#123!
(1 row)

SELECT * FROM public.statbus_user_create('test.regular@statbus.org', 'regular_user'::statbus_role_type, 'Regular#123!');
          email           |   password   
--------------------------+--------------
 test.regular@statbus.org | Regular#123!
(1 row)

SELECT * FROM public.statbus_user_create('test.restricted@statbus.org', 'restricted_user'::statbus_role_type, 'Restricted#123!');
            email            |    password     
-----------------------------+-----------------
 test.restricted@statbus.org | Restricted#123!
(1 row)

\if :{?DEBUG}
SET client_min_messages TO debug1;
\else
SET client_min_messages TO NOTICE;
\endif
-- Display all import definitions with their mappings
SELECT
    id.slug AS import_definition_slug,
    id.name AS import_name,
    it.schema_name AS target_schema_name,
    it.table_name AS data_table_name,
    id.note AS import_note,
    isc.column_name AS source_column,
    itc.column_name AS target_column,
    im.source_expression,
    im.source_value,
    isc.priority AS source_column_priority
FROM public.import_definition id
JOIN public.import_target it ON id.target_id = it.id
LEFT JOIN public.import_mapping im ON id.id = im.definition_id
LEFT JOIN public.import_source_column isc ON im.source_column_id = isc.id
LEFT JOIN public.import_target_column itc ON im.target_column_id = itc.id
ORDER BY id.slug, isc.priority NULLS LAST;
         import_definition_slug          |                    import_name                    | target_schema_name |               data_table_name               |                                        import_note                                        |          source_column           |          target_column           | source_expression | source_value | source_column_priority 
-----------------------------------------+---------------------------------------------------+--------------------+---------------------------------------------+-------------------------------------------------------------------------------------------+----------------------------------+----------------------------------+-------------------+--------------+------------------------
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | tax_ident                        | tax_ident                        |                   |              |                      1
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | stat_ident                       | stat_ident                       |                   |              |                      2
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | legal_unit_tax_ident             | legal_unit_tax_ident             |                   |              |                      3
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | legal_unit_stat_ident            | legal_unit_stat_ident            |                   |              |                      4
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | name                             | name                             |                   |              |                      5
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | birth_date                       | birth_date                       |                   |              |                      6
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | death_date                       | death_date                       |                   |              |                      7
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | physical_address_part1           | physical_address_part1           |                   |              |                      8
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | physical_address_part2           | physical_address_part2           |                   |              |                      9
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | physical_address_part3           | physical_address_part3           |                   |              |                     10
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | physical_postcode                | physical_postcode                |                   |              |                     11
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | physical_postplace               | physical_postplace               |                   |              |                     12
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | physical_latitude                | physical_latitude                |                   |              |                     13
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | physical_longitude               | physical_longitude               |                   |              |                     14
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | physical_altitude                | physical_altitude                |                   |              |                     15
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | physical_region_code             | physical_region_code             |                   |              |                     16
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | physical_region_path             | physical_region_path             |                   |              |                     17
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | physical_country_iso_2           | physical_country_iso_2           |                   |              |                     18
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | postal_address_part1             | postal_address_part1             |                   |              |                     19
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | postal_address_part2             | postal_address_part2             |                   |              |                     20
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | postal_address_part3             | postal_address_part3             |                   |              |                     21
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | postal_postcode                  | postal_postcode                  |                   |              |                     22
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | postal_postplace                 | postal_postplace                 |                   |              |                     23
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | postal_latitude                  | postal_latitude                  |                   |              |                     24
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | postal_longitude                 | postal_longitude                 |                   |              |                     25
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | postal_altitude                  | postal_altitude                  |                   |              |                     26
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | postal_region_code               | postal_region_code               |                   |              |                     27
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | postal_region_path               | postal_region_path               |                   |              |                     28
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | postal_country_iso_2             | postal_country_iso_2             |                   |              |                     29
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | web_address                      | web_address                      |                   |              |                     30
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | email_address                    | email_address                    |                   |              |                     31
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | phone_number                     | phone_number                     |                   |              |                     32
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | landline                         | landline                         |                   |              |                     33
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | mobile_number                    | mobile_number                    |                   |              |                     34
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | fax_number                       | fax_number                       |                   |              |                     35
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | primary_activity_category_code   | primary_activity_category_code   |                   |              |                     36
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | secondary_activity_category_code | secondary_activity_category_code |                   |              |                     37
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | status_code                      | status_code                      |                   |              |                     38
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | data_source_code                 | data_source_code                 |                   |              |                     39
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | employees                        | employees                        |                   |              |                     40
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | turnover                         | turnover                         |                   |              |                     41
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      | tag_path                         | tag_path                         |                   |              |                     42
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      |                                  | valid_from                       | default           |              |                       
 establishment_for_lu_current_year       | Establishment for Legal Unit - Current Year       | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with validity period set to current year      |                                  | valid_to                         | default           |              |                       
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | valid_from                       | valid_from                       |                   |              |                      1
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | valid_to                         | valid_to                         |                   |              |                      2
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | tax_ident                        | tax_ident                        |                   |              |                      3
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | stat_ident                       | stat_ident                       |                   |              |                      4
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | legal_unit_tax_ident             | legal_unit_tax_ident             |                   |              |                      5
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | legal_unit_stat_ident            | legal_unit_stat_ident            |                   |              |                      6
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | name                             | name                             |                   |              |                      7
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | birth_date                       | birth_date                       |                   |              |                      8
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | death_date                       | death_date                       |                   |              |                      9
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | physical_address_part1           | physical_address_part1           |                   |              |                     10
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | physical_address_part2           | physical_address_part2           |                   |              |                     11
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | physical_address_part3           | physical_address_part3           |                   |              |                     12
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | physical_postcode                | physical_postcode                |                   |              |                     13
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | physical_postplace               | physical_postplace               |                   |              |                     14
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | physical_latitude                | physical_latitude                |                   |              |                     15
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | physical_longitude               | physical_longitude               |                   |              |                     16
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | physical_altitude                | physical_altitude                |                   |              |                     17
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | physical_region_code             | physical_region_code             |                   |              |                     18
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | physical_region_path             | physical_region_path             |                   |              |                     19
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | physical_country_iso_2           | physical_country_iso_2           |                   |              |                     20
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | postal_address_part1             | postal_address_part1             |                   |              |                     21
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | postal_address_part2             | postal_address_part2             |                   |              |                     22
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | postal_address_part3             | postal_address_part3             |                   |              |                     23
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | postal_postcode                  | postal_postcode                  |                   |              |                     24
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | postal_postplace                 | postal_postplace                 |                   |              |                     25
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | postal_latitude                  | postal_latitude                  |                   |              |                     26
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | postal_longitude                 | postal_longitude                 |                   |              |                     27
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | postal_altitude                  | postal_altitude                  |                   |              |                     28
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | postal_region_code               | postal_region_code               |                   |              |                     29
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | postal_region_path               | postal_region_path               |                   |              |                     30
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | postal_country_iso_2             | postal_country_iso_2             |                   |              |                     31
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | web_address                      | web_address                      |                   |              |                     32
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | email_address                    | email_address                    |                   |              |                     33
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | phone_number                     | phone_number                     |                   |              |                     34
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | landline                         | landline                         |                   |              |                     35
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | mobile_number                    | mobile_number                    |                   |              |                     36
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | fax_number                       | fax_number                       |                   |              |                     37
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | primary_activity_category_code   | primary_activity_category_code   |                   |              |                     38
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | secondary_activity_category_code | secondary_activity_category_code |                   |              |                     39
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | status_code                      | status_code                      |                   |              |                     40
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | data_source_code                 | data_source_code                 |                   |              |                     41
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | employees                        | employees                        |                   |              |                     42
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | turnover                         | turnover                         |                   |              |                     43
 establishment_for_lu_explicit_dates     | Establishment for Legal Unit - Explicit Dates     | public             | import_establishment_era_for_legal_unit     | Import establishments linked to legal units with explicit valid_from and valid_to columns | tag_path                         | tag_path                         |                   |              |                     44
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | tax_ident                        | tax_ident                        |                   |              |                      1
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | stat_ident                       | stat_ident                       |                   |              |                      2
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | name                             | name                             |                   |              |                      3
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | birth_date                       | birth_date                       |                   |              |                      4
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | death_date                       | death_date                       |                   |              |                      5
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | physical_address_part1           | physical_address_part1           |                   |              |                      6
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | physical_address_part2           | physical_address_part2           |                   |              |                      7
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | physical_address_part3           | physical_address_part3           |                   |              |                      8
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | physical_postcode                | physical_postcode                |                   |              |                      9
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | physical_postplace               | physical_postplace               |                   |              |                     10
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | physical_latitude                | physical_latitude                |                   |              |                     11
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | physical_longitude               | physical_longitude               |                   |              |                     12
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | physical_altitude                | physical_altitude                |                   |              |                     13
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | physical_region_code             | physical_region_code             |                   |              |                     14
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | physical_region_path             | physical_region_path             |                   |              |                     15
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | physical_country_iso_2           | physical_country_iso_2           |                   |              |                     16
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | postal_address_part1             | postal_address_part1             |                   |              |                     17
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | postal_address_part2             | postal_address_part2             |                   |              |                     18
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | postal_address_part3             | postal_address_part3             |                   |              |                     19
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | postal_postcode                  | postal_postcode                  |                   |              |                     20
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | postal_postplace                 | postal_postplace                 |                   |              |                     21
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | postal_latitude                  | postal_latitude                  |                   |              |                     22
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | postal_longitude                 | postal_longitude                 |                   |              |                     23
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | postal_altitude                  | postal_altitude                  |                   |              |                     24
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | postal_region_code               | postal_region_code               |                   |              |                     25
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | postal_region_path               | postal_region_path               |                   |              |                     26
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | postal_country_iso_2             | postal_country_iso_2             |                   |              |                     27
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | web_address                      | web_address                      |                   |              |                     28
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | email_address                    | email_address                    |                   |              |                     29
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | phone_number                     | phone_number                     |                   |              |                     30
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | landline                         | landline                         |                   |              |                     31
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | mobile_number                    | mobile_number                    |                   |              |                     32
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | fax_number                       | fax_number                       |                   |              |                     33
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | primary_activity_category_code   | primary_activity_category_code   |                   |              |                     34
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | secondary_activity_category_code | secondary_activity_category_code |                   |              |                     35
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | sector_code                      | sector_code                      |                   |              |                     36
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | status_code                      | status_code                      |                   |              |                     37
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | data_source_code                 | data_source_code                 |                   |              |                     38
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | employees                        | employees                        |                   |              |                     39
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | turnover                         | turnover                         |                   |              |                     40
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 | tag_path                         | tag_path                         |                   |              |                     41
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 |                                  | valid_to                         | default           |              |                       
 establishment_without_lu_current_year   | Establishment without Legal Unit - Current Year   | public             | import_establishment_era_without_legal_unit | Import standalone establishments with validity period set to current year                 |                                  | valid_from                       | default           |              |                       
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | valid_from                       | valid_from                       |                   |              |                      1
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | valid_to                         | valid_to                         |                   |              |                      2
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | tax_ident                        | tax_ident                        |                   |              |                      3
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | stat_ident                       | stat_ident                       |                   |              |                      4
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | name                             | name                             |                   |              |                      5
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | birth_date                       | birth_date                       |                   |              |                      6
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | death_date                       | death_date                       |                   |              |                      7
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | physical_address_part1           | physical_address_part1           |                   |              |                      8
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | physical_address_part2           | physical_address_part2           |                   |              |                      9
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | physical_address_part3           | physical_address_part3           |                   |              |                     10
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | physical_postcode                | physical_postcode                |                   |              |                     11
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | physical_postplace               | physical_postplace               |                   |              |                     12
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | physical_latitude                | physical_latitude                |                   |              |                     13
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | physical_longitude               | physical_longitude               |                   |              |                     14
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | physical_altitude                | physical_altitude                |                   |              |                     15
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | physical_region_code             | physical_region_code             |                   |              |                     16
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | physical_region_path             | physical_region_path             |                   |              |                     17
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | physical_country_iso_2           | physical_country_iso_2           |                   |              |                     18
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | postal_address_part1             | postal_address_part1             |                   |              |                     19
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | postal_address_part2             | postal_address_part2             |                   |              |                     20
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | postal_address_part3             | postal_address_part3             |                   |              |                     21
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | postal_postcode                  | postal_postcode                  |                   |              |                     22
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | postal_postplace                 | postal_postplace                 |                   |              |                     23
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | postal_latitude                  | postal_latitude                  |                   |              |                     24
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | postal_longitude                 | postal_longitude                 |                   |              |                     25
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | postal_altitude                  | postal_altitude                  |                   |              |                     26
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | postal_region_code               | postal_region_code               |                   |              |                     27
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | postal_region_path               | postal_region_path               |                   |              |                     28
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | postal_country_iso_2             | postal_country_iso_2             |                   |              |                     29
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | web_address                      | web_address                      |                   |              |                     30
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | email_address                    | email_address                    |                   |              |                     31
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | phone_number                     | phone_number                     |                   |              |                     32
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | landline                         | landline                         |                   |              |                     33
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | mobile_number                    | mobile_number                    |                   |              |                     34
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | fax_number                       | fax_number                       |                   |              |                     35
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | primary_activity_category_code   | primary_activity_category_code   |                   |              |                     36
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | secondary_activity_category_code | secondary_activity_category_code |                   |              |                     37
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | sector_code                      | sector_code                      |                   |              |                     38
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | status_code                      | status_code                      |                   |              |                     39
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | data_source_code                 | data_source_code                 |                   |              |                     40
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | employees                        | employees                        |                   |              |                     41
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | turnover                         | turnover                         |                   |              |                     42
 establishment_without_lu_explicit_dates | Establishment without Legal Unit - Explicit Dates | public             | import_establishment_era_without_legal_unit | Import standalone establishments with explicit valid_from and valid_to columns            | tag_path                         | tag_path                         |                   |              |                     43
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | tax_ident                        | tax_ident                        |                   |              |                      1
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | stat_ident                       | stat_ident                       |                   |              |                      2
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | name                             | name                             |                   |              |                      3
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | birth_date                       | birth_date                       |                   |              |                      4
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | death_date                       | death_date                       |                   |              |                      5
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | physical_address_part1           | physical_address_part1           |                   |              |                      6
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | physical_address_part2           | physical_address_part2           |                   |              |                      7
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | physical_address_part3           | physical_address_part3           |                   |              |                      8
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | physical_postcode                | physical_postcode                |                   |              |                      9
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | physical_postplace               | physical_postplace               |                   |              |                     10
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | physical_latitude                | physical_latitude                |                   |              |                     11
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | physical_longitude               | physical_longitude               |                   |              |                     12
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | physical_altitude                | physical_altitude                |                   |              |                     13
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | physical_region_code             | physical_region_code             |                   |              |                     14
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | physical_region_path             | physical_region_path             |                   |              |                     15
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | physical_country_iso_2           | physical_country_iso_2           |                   |              |                     16
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | postal_address_part1             | postal_address_part1             |                   |              |                     17
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | postal_address_part2             | postal_address_part2             |                   |              |                     18
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | postal_address_part3             | postal_address_part3             |                   |              |                     19
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | postal_postcode                  | postal_postcode                  |                   |              |                     20
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | postal_postplace                 | postal_postplace                 |                   |              |                     21
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | postal_latitude                  | postal_latitude                  |                   |              |                     22
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | postal_longitude                 | postal_longitude                 |                   |              |                     23
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | postal_altitude                  | postal_altitude                  |                   |              |                     24
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | postal_region_code               | postal_region_code               |                   |              |                     25
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | postal_region_path               | postal_region_path               |                   |              |                     26
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | postal_country_iso_2             | postal_country_iso_2             |                   |              |                     27
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | web_address                      | web_address                      |                   |              |                     28
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | email_address                    | email_address                    |                   |              |                     29
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | phone_number                     | phone_number                     |                   |              |                     30
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | landline                         | landline                         |                   |              |                     31
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | mobile_number                    | mobile_number                    |                   |              |                     32
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | fax_number                       | fax_number                       |                   |              |                     33
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | primary_activity_category_code   | primary_activity_category_code   |                   |              |                     34
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | secondary_activity_category_code | secondary_activity_category_code |                   |              |                     35
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | sector_code                      | sector_code                      |                   |              |                     36
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | status_code                      | status_code                      |                   |              |                     37
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | data_source_code                 | data_source_code                 |                   |              |                     38
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | legal_form_code                  | legal_form_code                  |                   |              |                     39
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | employees                        | employees                        |                   |              |                     40
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | turnover                         | turnover                         |                   |              |                     41
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               | tag_path                         | tag_path                         |                   |              |                     42
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               |                                  | valid_to                         | default           |              |                       
 legal_unit_current_year                 | Legal Unit - Current Year                         | public             | import_legal_unit_era                       | Import legal units with validity period set to current year                               |                                  | valid_from                       | default           |              |                       
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | valid_from                       | valid_from                       |                   |              |                      1
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | valid_to                         | valid_to                         |                   |              |                      2
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | tax_ident                        | tax_ident                        |                   |              |                      3
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | stat_ident                       | stat_ident                       |                   |              |                      4
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | name                             | name                             |                   |              |                      5
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | birth_date                       | birth_date                       |                   |              |                      6
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | death_date                       | death_date                       |                   |              |                      7
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | physical_address_part1           | physical_address_part1           |                   |              |                      8
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | physical_address_part2           | physical_address_part2           |                   |              |                      9
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | physical_address_part3           | physical_address_part3           |                   |              |                     10
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | physical_postcode                | physical_postcode                |                   |              |                     11
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | physical_postplace               | physical_postplace               |                   |              |                     12
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | physical_latitude                | physical_latitude                |                   |              |                     13
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | physical_longitude               | physical_longitude               |                   |              |                     14
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | physical_altitude                | physical_altitude                |                   |              |                     15
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | physical_region_code             | physical_region_code             |                   |              |                     16
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | physical_region_path             | physical_region_path             |                   |              |                     17
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | physical_country_iso_2           | physical_country_iso_2           |                   |              |                     18
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | postal_address_part1             | postal_address_part1             |                   |              |                     19
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | postal_address_part2             | postal_address_part2             |                   |              |                     20
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | postal_address_part3             | postal_address_part3             |                   |              |                     21
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | postal_postcode                  | postal_postcode                  |                   |              |                     22
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | postal_postplace                 | postal_postplace                 |                   |              |                     23
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | postal_latitude                  | postal_latitude                  |                   |              |                     24
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | postal_longitude                 | postal_longitude                 |                   |              |                     25
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | postal_altitude                  | postal_altitude                  |                   |              |                     26
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | postal_region_code               | postal_region_code               |                   |              |                     27
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | postal_region_path               | postal_region_path               |                   |              |                     28
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | postal_country_iso_2             | postal_country_iso_2             |                   |              |                     29
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | web_address                      | web_address                      |                   |              |                     30
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | email_address                    | email_address                    |                   |              |                     31
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | phone_number                     | phone_number                     |                   |              |                     32
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | landline                         | landline                         |                   |              |                     33
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | mobile_number                    | mobile_number                    |                   |              |                     34
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | fax_number                       | fax_number                       |                   |              |                     35
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | primary_activity_category_code   | primary_activity_category_code   |                   |              |                     36
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | secondary_activity_category_code | secondary_activity_category_code |                   |              |                     37
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | sector_code                      | sector_code                      |                   |              |                     38
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | status_code                      | status_code                      |                   |              |                     39
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | data_source_code                 | data_source_code                 |                   |              |                     40
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | legal_form_code                  | legal_form_code                  |                   |              |                     41
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | employees                        | employees                        |                   |              |                     42
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | turnover                         | turnover                         |                   |              |                     43
 legal_unit_explicit_dates               | Legal Unit - Explicit Dates                       | public             | import_legal_unit_era                       | Import legal units with explicit valid_from and valid_to columns                          | tag_path                         | tag_path                         |                   |              |                     44
(262 rows)

CALL test.set_user_from_email('test.super@statbus.org');
\i samples/norway/brreg/create-import-definition-legal_unit.sql
-- Pretend the user has clicked and created import definition for BRREG Hovedenhet (legal_unit)
WITH it AS (
    SELECT * FROM public.import_target
    WHERE schema_name = 'public'
      AND table_name = 'import_legal_unit_era'
), def AS (
    INSERT INTO public.import_definition
        ( target_id
        , slug
        , name
        , note
        )
    SELECT it.id
        , 'brreg_hovedenhet'
        , 'Import of BRREG Hovedenhet'
        , 'Easy upload of the CSV file found at brreg.'
    FROM it
    RETURNING *
), raw_mapping(source_column_name, source_expression, target_column_name) AS (
VALUES
      (NULL, 'default'::public.import_source_expression, 'valid_from')
    , (NULL, 'default'::public.import_source_expression, 'valid_to')
    , ('organisasjonsnummer', NULL, 'tax_ident')
    , ('navn', NULL, 'name')
    , ('organisasjonsform.kode', NULL, 'legal_form_code')
    , ('organisasjonsform.beskrivelse', NULL, NULL)
    , ('naeringskode1.kode', NULL, 'primary_activity_category_code')
    , ('naeringskode1.beskrivelse', NULL, NULL)
    , ('naeringskode2.kode', NULL, 'secondary_activity_category_code')
    , ('naeringskode2.beskrivelse', NULL, NULL)
    , ('naeringskode3.kode', NULL, NULL)
    , ('naeringskode3.beskrivelse', NULL, NULL)
    , ('hjelpeenhetskode.kode', NULL, NULL)
    , ('hjelpeenhetskode.beskrivelse', NULL, NULL)
    , ('harRegistrertAntallAnsatte', NULL, NULL)
    , ('antallAnsatte', NULL, NULL)
    , ('hjemmeside', NULL, NULL)
    , ('postadresse.adresse', NULL, 'postal_address_part1')
    , ('postadresse.poststed', NULL, 'postal_postplace')
    , ('postadresse.postnummer', NULL, 'postal_postcode')
    , ('postadresse.kommune', NULL, NULL)
    , ('postadresse.kommunenummer', NULL, 'postal_region_code')
    , ('postadresse.land', NULL, NULL)
    , ('postadresse.landkode', NULL, 'postal_country_iso_2')
    , ('forretningsadresse.adresse', NULL, 'physical_address_part1')
    , ('forretningsadresse.poststed', NULL, 'physical_postplace')
    , ('forretningsadresse.postnummer', NULL, 'physical_postcode')
    , ('forretningsadresse.kommune', NULL, NULL)
    , ('forretningsadresse.kommunenummer', NULL, 'physical_region_code')
    , ('forretningsadresse.land', NULL, NULL)
    , ('forretningsadresse.landkode', NULL, 'physical_country_iso_2')
    , ('institusjonellSektorkode.kode', NULL, 'sector_code')
    , ('institusjonellSektorkode.beskrivelse', NULL, NULL)
    , ('sisteInnsendteAarsregnskap', NULL, NULL)
    , ('registreringsdatoenhetsregisteret', NULL, NULL)
    , ('stiftelsesdato', NULL, 'birth_date')
    , ('registrertIMvaRegisteret', NULL, NULL)
    , ('frivilligMvaRegistrertBeskrivelser', NULL, NULL)
    , ('registrertIFrivillighetsregisteret', NULL, NULL)
    , ('registrertIForetaksregisteret', NULL, NULL)
    , ('registrertIStiftelsesregisteret', NULL, NULL)
    , ('konkurs', NULL, NULL)
    , ('konkursdato', NULL, NULL)
    , ('underAvvikling', NULL, NULL)
    , ('underAvviklingDato', NULL, NULL)
    , ('underTvangsavviklingEllerTvangsopplosning', NULL, NULL)
    , ('tvangsopplostPgaManglendeDagligLederDato', NULL, NULL)
    , ('tvangsopplostPgaManglendeRevisorDato', NULL, NULL)
    , ('tvangsopplostPgaManglendeRegnskapDato', NULL, NULL)
    , ('tvangsopplostPgaMangelfulltStyreDato', NULL, NULL)
    , ('tvangsavvikletPgaManglendeSlettingDato', NULL, NULL)
    , ('overordnetEnhet', NULL, NULL)
    , ('maalform', NULL, NULL)
    , ('vedtektsdato', NULL, NULL)
    , ('vedtektsfestetFormaal', NULL, NULL)
    , ('aktivitet', NULL, NULL)
), name_mapping AS (
    SELECT
        ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) as priority,
        source_column_name,
        source_expression,
        target_column_name
    FROM raw_mapping
), inserted_source_column AS (
    INSERT INTO public.import_source_column (definition_id,column_name, priority)
    SELECT def.id, name_mapping.source_column_name, name_mapping.priority
    FROM def, name_mapping
    WHERE source_column_name IS NOT NULL
    ORDER BY priority
   RETURNING *
), mapping AS (
    SELECT def.id
         , isc.id
         , nm.source_expression
         , itc.id
    FROM def
       , name_mapping AS nm
       LEFT JOIN inserted_source_column AS isc
         ON isc.column_name = nm.source_column_name
       LEFT JOIN public.import_target_column AS itc
       ON itc.column_name = nm.target_column_name
       WHERE itc.target_id IS NULL OR itc.target_id = def.target_id
), mapped AS (
  INSERT INTO public.import_mapping
      ( definition_id
      , source_column_id
      , source_expression
      , target_column_id
      )
      SELECT * FROM mapping
  RETURNING *
)
--SELECT * FROM mapped;
SELECT d.slug as definition_slug,
       sc.column_name as source_column,
       m.source_value,
       m.source_expression,
       sc.priority AS source_column_priority,
       tc.column_name AS target_column
FROM mapped m
LEFT JOIN def d ON d.id = m.definition_id
LEFT JOIN inserted_source_column sc ON sc.id = m.source_column_id
LEFT JOIN public.import_target_column tc ON tc.id = m.target_column_id
ORDER BY source_column_priority, target_column;
 definition_slug  |               source_column               | source_value | source_expression | source_column_priority |          target_column           
------------------+-------------------------------------------+--------------+-------------------+------------------------+----------------------------------
 brreg_hovedenhet | organisasjonsnummer                       |              |                   |                      3 | tax_ident
 brreg_hovedenhet | navn                                      |              |                   |                      4 | name
 brreg_hovedenhet | organisasjonsform.kode                    |              |                   |                      5 | legal_form_code
 brreg_hovedenhet | organisasjonsform.beskrivelse             |              |                   |                      6 | 
 brreg_hovedenhet | naeringskode1.kode                        |              |                   |                      7 | primary_activity_category_code
 brreg_hovedenhet | naeringskode1.beskrivelse                 |              |                   |                      8 | 
 brreg_hovedenhet | naeringskode2.kode                        |              |                   |                      9 | secondary_activity_category_code
 brreg_hovedenhet | naeringskode2.beskrivelse                 |              |                   |                     10 | 
 brreg_hovedenhet | naeringskode3.kode                        |              |                   |                     11 | 
 brreg_hovedenhet | naeringskode3.beskrivelse                 |              |                   |                     12 | 
 brreg_hovedenhet | hjelpeenhetskode.kode                     |              |                   |                     13 | 
 brreg_hovedenhet | hjelpeenhetskode.beskrivelse              |              |                   |                     14 | 
 brreg_hovedenhet | harRegistrertAntallAnsatte                |              |                   |                     15 | 
 brreg_hovedenhet | antallAnsatte                             |              |                   |                     16 | 
 brreg_hovedenhet | hjemmeside                                |              |                   |                     17 | 
 brreg_hovedenhet | postadresse.adresse                       |              |                   |                     18 | postal_address_part1
 brreg_hovedenhet | postadresse.poststed                      |              |                   |                     19 | postal_postplace
 brreg_hovedenhet | postadresse.postnummer                    |              |                   |                     20 | postal_postcode
 brreg_hovedenhet | postadresse.kommune                       |              |                   |                     21 | 
 brreg_hovedenhet | postadresse.kommunenummer                 |              |                   |                     22 | postal_region_code
 brreg_hovedenhet | postadresse.land                          |              |                   |                     23 | 
 brreg_hovedenhet | postadresse.landkode                      |              |                   |                     24 | postal_country_iso_2
 brreg_hovedenhet | forretningsadresse.adresse                |              |                   |                     25 | physical_address_part1
 brreg_hovedenhet | forretningsadresse.poststed               |              |                   |                     26 | physical_postplace
 brreg_hovedenhet | forretningsadresse.postnummer             |              |                   |                     27 | physical_postcode
 brreg_hovedenhet | forretningsadresse.kommune                |              |                   |                     28 | 
 brreg_hovedenhet | forretningsadresse.kommunenummer          |              |                   |                     29 | physical_region_code
 brreg_hovedenhet | forretningsadresse.land                   |              |                   |                     30 | 
 brreg_hovedenhet | forretningsadresse.landkode               |              |                   |                     31 | physical_country_iso_2
 brreg_hovedenhet | institusjonellSektorkode.kode             |              |                   |                     32 | sector_code
 brreg_hovedenhet | institusjonellSektorkode.beskrivelse      |              |                   |                     33 | 
 brreg_hovedenhet | sisteInnsendteAarsregnskap                |              |                   |                     34 | 
 brreg_hovedenhet | registreringsdatoenhetsregisteret         |              |                   |                     35 | 
 brreg_hovedenhet | stiftelsesdato                            |              |                   |                     36 | birth_date
 brreg_hovedenhet | registrertIMvaRegisteret                  |              |                   |                     37 | 
 brreg_hovedenhet | frivilligMvaRegistrertBeskrivelser        |              |                   |                     38 | 
 brreg_hovedenhet | registrertIFrivillighetsregisteret        |              |                   |                     39 | 
 brreg_hovedenhet | registrertIForetaksregisteret             |              |                   |                     40 | 
 brreg_hovedenhet | registrertIStiftelsesregisteret           |              |                   |                     41 | 
 brreg_hovedenhet | konkurs                                   |              |                   |                     42 | 
 brreg_hovedenhet | konkursdato                               |              |                   |                     43 | 
 brreg_hovedenhet | underAvvikling                            |              |                   |                     44 | 
 brreg_hovedenhet | underAvviklingDato                        |              |                   |                     45 | 
 brreg_hovedenhet | underTvangsavviklingEllerTvangsopplosning |              |                   |                     46 | 
 brreg_hovedenhet | tvangsopplostPgaManglendeDagligLederDato  |              |                   |                     47 | 
 brreg_hovedenhet | tvangsopplostPgaManglendeRevisorDato      |              |                   |                     48 | 
 brreg_hovedenhet | tvangsopplostPgaManglendeRegnskapDato     |              |                   |                     49 | 
 brreg_hovedenhet | tvangsopplostPgaMangelfulltStyreDato      |              |                   |                     50 | 
 brreg_hovedenhet | tvangsavvikletPgaManglendeSlettingDato    |              |                   |                     51 | 
 brreg_hovedenhet | overordnetEnhet                           |              |                   |                     52 | 
 brreg_hovedenhet | maalform                                  |              |                   |                     53 | 
 brreg_hovedenhet | vedtektsdato                              |              |                   |                     54 | 
 brreg_hovedenhet | vedtektsfestetFormaal                     |              |                   |                     55 | 
 brreg_hovedenhet | aktivitet                                 |              |                   |                     56 | 
 brreg_hovedenhet |                                           |              | default           |                        | valid_from
 brreg_hovedenhet |                                           |              | default           |                        | valid_to
(56 rows)

SELECT d.slug,
       d.name,
       t.table_name as target_table,
       d.note,
       ds.code as data_source,
       d.time_context_ident,
       d.draft,
       d.valid,
       d.validation_error
FROM public.import_definition d
JOIN public.import_target t ON t.id = d.target_id
LEFT JOIN public.data_source ds ON ds.id = d.data_source_id
WHERE d.slug = 'brreg_hovedenhet';
       slug       |            name            |     target_table      |                    note                     | data_source | time_context_ident | draft | valid | validation_error 
------------------+----------------------------+-----------------------+---------------------------------------------+-------------+--------------------+-------+-------+------------------
 brreg_hovedenhet | Import of BRREG Hovedenhet | import_legal_unit_era | Easy upload of the CSV file found at brreg. |             |                    | t     | f     | 
(1 row)

UPDATE public.import_definition
SET draft = false
WHERE draft
  AND slug = 'brreg_hovedenhet';
\i samples/norway/brreg/create-import-definition-establishment.sql
-- Pretend the user has clicked and created import definition for BRREG Underenhet (establishment for establishment)
WITH it AS (
    SELECT * FROM public.import_target
    WHERE schema_name = 'public'
      AND table_name = 'import_establishment_era_for_legal_unit'
), def AS (
    INSERT INTO public.import_definition
        ( target_id
        , slug
        , name
        , note
        )
    SELECT it.id
        , 'brreg_underenhet'
        , 'Import of BRREG Underenhet'
        , 'Easy upload of the CSV file found at brreg.'
    FROM it
    RETURNING *
), raw_mapping(source_column_name, source_expression, target_column_name) AS (
VALUES
      (NULL, 'default'::public.import_source_expression, 'valid_from')
    , (NULL, 'default'::public.import_source_expression, 'valid_to')
    , ('organisasjonsnummer', NULL, 'tax_ident')
    , ('navn', NULL, 'name')
    , ('organisasjonsform.kode', NULL, NULL)
    , ('organisasjonsform.beskrivelse', NULL, NULL)
    , ('naeringskode1.kode', NULL, 'primary_activity_category_code')
    , ('naeringskode1.beskrivelse', NULL, NULL)
    , ('naeringskode2.kode', NULL, 'secondary_activity_category_code')
    , ('naeringskode2.beskrivelse', NULL, NULL)
    , ('naeringskode3.kode', NULL, NULL)
    , ('naeringskode3.beskrivelse', NULL, NULL)
    , ('hjelpeenhetskode.kode', NULL, NULL)
    , ('hjelpeenhetskode.beskrivelse', NULL, NULL)
    , ('harRegistrertAntallAnsatte', NULL, NULL)
    , ('antallAnsatte', NULL, NULL)
    , ('hjemmeside', NULL, NULL)
    , ('postadresse.adresse', NULL, 'postal_address_part1')
    , ('postadresse.poststed', NULL, 'postal_postplace')
    , ('postadresse.postnummer', NULL, 'postal_postcode')
    , ('postadresse.kommune', NULL, NULL)
    , ('postadresse.kommunenummer', NULL, 'postal_region_code')
    , ('postadresse.land', NULL, NULL)
    , ('postadresse.landkode', NULL, 'postal_country_iso_2')
    , ('beliggenhetsadresse.adresse', NULL, 'physical_address_part1')
    , ('beliggenhetsadresse.poststed', NULL, 'physical_postplace')
    , ('beliggenhetsadresse.postnummer', NULL, 'physical_postcode')
    , ('beliggenhetsadresse.kommune', NULL, NULL)
    , ('beliggenhetsadresse.kommunenummer', NULL, 'physical_region_code')
    , ('beliggenhetsadresse.land', NULL, NULL)
    , ('beliggenhetsadresse.landkode', NULL, 'physical_country_iso_2')
    , ('registreringsdatoIEnhetsregisteret', NULL, NULL)
    , ('frivilligMvaRegistrertBeskrivelser', NULL, NULL)
    , ('registrertIMvaregisteret', NULL, NULL)
    , ('oppstartsdato', NULL, 'birth_date')
    , ('datoEierskifte', NULL, NULL)
    , ('overordnetEnhet', NULL, 'legal_unit_tax_ident')
    , ('nedleggelsesdato', NULL, 'death_date')
), name_mapping AS (
    SELECT
        ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) as priority,
        source_column_name,
        source_expression,
        target_column_name
    FROM raw_mapping
), inserted_source_column AS (
    INSERT INTO public.import_source_column (definition_id,column_name, priority)
    SELECT def.id, name_mapping.source_column_name, name_mapping.priority
    FROM def, name_mapping
    WHERE source_column_name IS NOT NULL
    ORDER BY priority
    RETURNING *
), mapping AS (
    SELECT def.id
          , isc.id
          , nm.source_expression
          , itc.id
    FROM def
        , name_mapping AS nm
        LEFT JOIN inserted_source_column AS isc
          ON isc.column_name = nm.source_column_name
        LEFT JOIN public.import_target_column AS itc
        ON itc.column_name = nm.target_column_name
        WHERE itc.target_id IS NULL OR itc.target_id = def.target_id
), mapped AS (
  INSERT INTO public.import_mapping
      ( definition_id
      , source_column_id
      , source_expression
      , target_column_id
      )
      SELECT * FROM mapping
  RETURNING *
)
--SELECT * FROM mapped;
SELECT d.slug as definition_slug,
        sc.column_name as source_column,
        m.source_value,
        m.source_expression,
        sc.priority AS source_column_priority,
        tc.column_name AS target_column
FROM mapped m
LEFT JOIN def d ON d.id = m.definition_id
LEFT JOIN inserted_source_column sc ON sc.id = m.source_column_id
LEFT JOIN public.import_target_column tc ON tc.id = m.target_column_id
ORDER BY source_column_priority, target_column;
 definition_slug  |           source_column            | source_value | source_expression | source_column_priority |          target_column           
------------------+------------------------------------+--------------+-------------------+------------------------+----------------------------------
 brreg_underenhet | organisasjonsnummer                |              |                   |                      3 | tax_ident
 brreg_underenhet | navn                               |              |                   |                      4 | name
 brreg_underenhet | organisasjonsform.kode             |              |                   |                      5 | 
 brreg_underenhet | organisasjonsform.beskrivelse      |              |                   |                      6 | 
 brreg_underenhet | naeringskode1.kode                 |              |                   |                      7 | primary_activity_category_code
 brreg_underenhet | naeringskode1.beskrivelse          |              |                   |                      8 | 
 brreg_underenhet | naeringskode2.kode                 |              |                   |                      9 | secondary_activity_category_code
 brreg_underenhet | naeringskode2.beskrivelse          |              |                   |                     10 | 
 brreg_underenhet | naeringskode3.kode                 |              |                   |                     11 | 
 brreg_underenhet | naeringskode3.beskrivelse          |              |                   |                     12 | 
 brreg_underenhet | hjelpeenhetskode.kode              |              |                   |                     13 | 
 brreg_underenhet | hjelpeenhetskode.beskrivelse       |              |                   |                     14 | 
 brreg_underenhet | harRegistrertAntallAnsatte         |              |                   |                     15 | 
 brreg_underenhet | antallAnsatte                      |              |                   |                     16 | 
 brreg_underenhet | hjemmeside                         |              |                   |                     17 | 
 brreg_underenhet | postadresse.adresse                |              |                   |                     18 | postal_address_part1
 brreg_underenhet | postadresse.poststed               |              |                   |                     19 | postal_postplace
 brreg_underenhet | postadresse.postnummer             |              |                   |                     20 | postal_postcode
 brreg_underenhet | postadresse.kommune                |              |                   |                     21 | 
 brreg_underenhet | postadresse.kommunenummer          |              |                   |                     22 | postal_region_code
 brreg_underenhet | postadresse.land                   |              |                   |                     23 | 
 brreg_underenhet | postadresse.landkode               |              |                   |                     24 | postal_country_iso_2
 brreg_underenhet | beliggenhetsadresse.adresse        |              |                   |                     25 | physical_address_part1
 brreg_underenhet | beliggenhetsadresse.poststed       |              |                   |                     26 | physical_postplace
 brreg_underenhet | beliggenhetsadresse.postnummer     |              |                   |                     27 | physical_postcode
 brreg_underenhet | beliggenhetsadresse.kommune        |              |                   |                     28 | 
 brreg_underenhet | beliggenhetsadresse.kommunenummer  |              |                   |                     29 | physical_region_code
 brreg_underenhet | beliggenhetsadresse.land           |              |                   |                     30 | 
 brreg_underenhet | beliggenhetsadresse.landkode       |              |                   |                     31 | physical_country_iso_2
 brreg_underenhet | registreringsdatoIEnhetsregisteret |              |                   |                     32 | 
 brreg_underenhet | frivilligMvaRegistrertBeskrivelser |              |                   |                     33 | 
 brreg_underenhet | registrertIMvaregisteret           |              |                   |                     34 | 
 brreg_underenhet | oppstartsdato                      |              |                   |                     35 | birth_date
 brreg_underenhet | datoEierskifte                     |              |                   |                     36 | 
 brreg_underenhet | overordnetEnhet                    |              |                   |                     37 | legal_unit_tax_ident
 brreg_underenhet | nedleggelsesdato                   |              |                   |                     38 | death_date
 brreg_underenhet |                                    |              | default           |                        | valid_from
 brreg_underenhet |                                    |              | default           |                        | valid_to
(38 rows)

SELECT d.slug,
        d.name,
        t.table_name as target_table,
        d.note,
        ds.code as data_source,
        d.time_context_ident,
        d.draft,
        d.valid,
        d.validation_error
FROM public.import_definition d
JOIN public.import_target t ON t.id = d.target_id
LEFT JOIN public.data_source ds ON ds.id = d.data_source_id
WHERE d.slug = 'brreg_underenhet';
       slug       |            name            |              target_table               |                    note                     | data_source | time_context_ident | draft | valid | validation_error 
------------------+----------------------------+-----------------------------------------+---------------------------------------------+-------------+--------------------+-------+-------+------------------
 brreg_underenhet | Import of BRREG Underenhet | import_establishment_era_for_legal_unit | Easy upload of the CSV file found at brreg. |             |                    | t     | f     | 
(1 row)

UPDATE public.import_definition
SET draft = false
WHERE draft
  AND slug = 'brreg_underenhet';
SELECT d.slug,
       d.name,
       t.table_name as target_table,
       d.note,
       ds.code as data_source,
       d.time_context_ident,
       d.draft,
       d.valid,
       d.validation_error
FROM public.import_definition d
JOIN public.import_target t ON t.id = d.target_id
LEFT JOIN public.data_source ds ON ds.id = d.data_source_id
WHERE d.slug = 'brreg_hovedenhet';
       slug       |            name            |     target_table      |                    note                     | data_source | time_context_ident | draft | valid | validation_error 
------------------+----------------------------+-----------------------+---------------------------------------------+-------------+--------------------+-------+-------+------------------
 brreg_hovedenhet | Import of BRREG Hovedenhet | import_legal_unit_era | Easy upload of the CSV file found at brreg. |             |                    | f     | t     | 
(1 row)

SELECT d.slug,
       d.name,
       t.table_name as target_table,
       d.note,
       ds.code as data_source,
       d.time_context_ident,
       d.draft,
       d.valid,
       d.validation_error
FROM public.import_definition d
JOIN public.import_target t ON t.id = d.target_id
LEFT JOIN public.data_source ds ON ds.id = d.data_source_id
WHERE d.slug = 'brreg_underenhet';
       slug       |            name            |              target_table               |                    note                     | data_source | time_context_ident | draft | valid | validation_error 
------------------+----------------------------+-----------------------------------------+---------------------------------------------+-------------+--------------------+-------+-------+------------------
 brreg_underenhet | Import of BRREG Underenhet | import_establishment_era_for_legal_unit | Easy upload of the CSV file found at brreg. |             |                    | f     | t     | 
(1 row)

-- Per year jobs for hovedenhet
WITH def AS (SELECT id FROM public.import_definition where slug = 'brreg_hovedenhet')
INSERT INTO public.import_job (definition_id,slug,default_valid_from,default_valid_to,description,note)
SELECT  def.id, 'import_hovedenhet_2015', '2015-01-01'::DATE, 'infinity'::DATE, 'Import Job for BRREG Hovedenhet', 'This job handles the import of BRREG Hovedenhet data.'
FROM def RETURNING slug, description, note, default_valid_from, default_valid_to, upload_table_name, data_table_name, import_information_snapshot_table_name, state;
          slug          |           description           |                         note                          | default_valid_from | default_valid_to |       upload_table_name       |       data_table_name       |  import_information_snapshot_table_name   |       state        
------------------------+---------------------------------+-------------------------------------------------------+--------------------+------------------+-------------------------------+-----------------------------+-------------------------------------------+--------------------
 import_hovedenhet_2015 | Import Job for BRREG Hovedenhet | This job handles the import of BRREG Hovedenhet data. | 01-01-2015         | infinity         | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | import_hovedenhet_2015_import_information | waiting_for_upload
(1 row)

WITH def AS (SELECT id FROM public.import_definition where slug = 'brreg_hovedenhet')
INSERT INTO public.import_job (definition_id,slug,default_valid_from,default_valid_to,description,note)
SELECT  def.id, 'import_hovedenhet_2016', '2016-01-01'::DATE, 'infinity'::DATE, 'Import Job for BRREG Hovedenhet', 'This job handles the import of BRREG Hovedenhet data.'
FROM def RETURNING slug, description, note, default_valid_from, default_valid_to, upload_table_name, data_table_name, import_information_snapshot_table_name, state;
          slug          |           description           |                         note                          | default_valid_from | default_valid_to |       upload_table_name       |       data_table_name       |  import_information_snapshot_table_name   |       state        
------------------------+---------------------------------+-------------------------------------------------------+--------------------+------------------+-------------------------------+-----------------------------+-------------------------------------------+--------------------
 import_hovedenhet_2016 | Import Job for BRREG Hovedenhet | This job handles the import of BRREG Hovedenhet data. | 01-01-2016         | infinity         | import_hovedenhet_2016_upload | import_hovedenhet_2016_data | import_hovedenhet_2016_import_information | waiting_for_upload
(1 row)

WITH def AS (SELECT id FROM public.import_definition where slug = 'brreg_hovedenhet')
INSERT INTO public.import_job (definition_id,slug,default_valid_from,default_valid_to,description,note)
SELECT  def.id, 'import_hovedenhet_2017', '2017-01-01'::DATE, 'infinity'::DATE, 'Import Job for BRREG Hovedenhet', 'This job handles the import of BRREG Hovedenhet data.'
FROM def RETURNING slug, description, note, default_valid_from, default_valid_to, upload_table_name, data_table_name, import_information_snapshot_table_name, state;
          slug          |           description           |                         note                          | default_valid_from | default_valid_to |       upload_table_name       |       data_table_name       |  import_information_snapshot_table_name   |       state        
------------------------+---------------------------------+-------------------------------------------------------+--------------------+------------------+-------------------------------+-----------------------------+-------------------------------------------+--------------------
 import_hovedenhet_2017 | Import Job for BRREG Hovedenhet | This job handles the import of BRREG Hovedenhet data. | 01-01-2017         | infinity         | import_hovedenhet_2017_upload | import_hovedenhet_2017_data | import_hovedenhet_2017_import_information | waiting_for_upload
(1 row)

WITH def AS (SELECT id FROM public.import_definition where slug = 'brreg_hovedenhet')
INSERT INTO public.import_job (definition_id,slug,default_valid_from,default_valid_to,description,note)
SELECT  def.id, 'import_hovedenhet_2018', '2018-01-01'::DATE, 'infinity'::DATE, 'Import Job for BRREG Hovedenhet', 'This job handles the import of BRREG Hovedenhet data.'
FROM def RETURNING slug, description, note, default_valid_from, default_valid_to, upload_table_name, data_table_name, import_information_snapshot_table_name, state;
          slug          |           description           |                         note                          | default_valid_from | default_valid_to |       upload_table_name       |       data_table_name       |  import_information_snapshot_table_name   |       state        
------------------------+---------------------------------+-------------------------------------------------------+--------------------+------------------+-------------------------------+-----------------------------+-------------------------------------------+--------------------
 import_hovedenhet_2018 | Import Job for BRREG Hovedenhet | This job handles the import of BRREG Hovedenhet data. | 01-01-2018         | infinity         | import_hovedenhet_2018_upload | import_hovedenhet_2018_data | import_hovedenhet_2018_import_information | waiting_for_upload
(1 row)

-- Per year jobs for underenhet
WITH def AS (SELECT id FROM public.import_definition where slug = 'brreg_underenhet')
INSERT INTO public.import_job (definition_id,slug,default_valid_from,default_valid_to,description,note)
SELECT  def.id, 'import_underenhet_2015', '2015-01-01'::DATE, 'infinity'::DATE, 'Import Job for BRREG Underenhet', 'This job handles the import of BRREG Underenhet data.'
FROM def RETURNING slug, description, note, default_valid_from, default_valid_to, upload_table_name, data_table_name, import_information_snapshot_table_name, state;
          slug          |           description           |                         note                          | default_valid_from | default_valid_to |       upload_table_name       |       data_table_name       |  import_information_snapshot_table_name   |       state        
------------------------+---------------------------------+-------------------------------------------------------+--------------------+------------------+-------------------------------+-----------------------------+-------------------------------------------+--------------------
 import_underenhet_2015 | Import Job for BRREG Underenhet | This job handles the import of BRREG Underenhet data. | 01-01-2015         | infinity         | import_underenhet_2015_upload | import_underenhet_2015_data | import_underenhet_2015_import_information | waiting_for_upload
(1 row)

WITH def AS (SELECT id FROM public.import_definition where slug = 'brreg_underenhet')
INSERT INTO public.import_job (definition_id,slug,default_valid_from,default_valid_to,description,note)
SELECT  def.id, 'import_underenhet_2016', '2016-01-01'::DATE, 'infinity'::DATE, 'Import Job for BRREG Underenhet', 'This job handles the import of BRREG Underenhet data.'
FROM def RETURNING slug, description, note, default_valid_from, default_valid_to, upload_table_name, data_table_name, import_information_snapshot_table_name, state;
          slug          |           description           |                         note                          | default_valid_from | default_valid_to |       upload_table_name       |       data_table_name       |  import_information_snapshot_table_name   |       state        
------------------------+---------------------------------+-------------------------------------------------------+--------------------+------------------+-------------------------------+-----------------------------+-------------------------------------------+--------------------
 import_underenhet_2016 | Import Job for BRREG Underenhet | This job handles the import of BRREG Underenhet data. | 01-01-2016         | infinity         | import_underenhet_2016_upload | import_underenhet_2016_data | import_underenhet_2016_import_information | waiting_for_upload
(1 row)

WITH def AS (SELECT id FROM public.import_definition where slug = 'brreg_underenhet')
INSERT INTO public.import_job (definition_id,slug,default_valid_from,default_valid_to,description,note)
SELECT  def.id, 'import_underenhet_2017', '2017-01-01'::DATE, 'infinity'::DATE, 'Import Job for BRREG Underenhet', 'This job handles the import of BRREG Underenhet data.'
FROM def RETURNING slug, description, note, default_valid_from, default_valid_to, upload_table_name, data_table_name, import_information_snapshot_table_name, state;
          slug          |           description           |                         note                          | default_valid_from | default_valid_to |       upload_table_name       |       data_table_name       |  import_information_snapshot_table_name   |       state        
------------------------+---------------------------------+-------------------------------------------------------+--------------------+------------------+-------------------------------+-----------------------------+-------------------------------------------+--------------------
 import_underenhet_2017 | Import Job for BRREG Underenhet | This job handles the import of BRREG Underenhet data. | 01-01-2017         | infinity         | import_underenhet_2017_upload | import_underenhet_2017_data | import_underenhet_2017_import_information | waiting_for_upload
(1 row)

WITH def AS (SELECT id FROM public.import_definition where slug = 'brreg_underenhet')
INSERT INTO public.import_job (definition_id,slug,default_valid_from,default_valid_to,description,note)
SELECT  def.id, 'import_underenhet_2018', '2018-01-01'::DATE, 'infinity'::DATE, 'Import Job for BRREG Underenhet', 'This job handles the import of BRREG Underenhet data.'
FROM def RETURNING slug, description, note, default_valid_from, default_valid_to, upload_table_name, data_table_name, import_information_snapshot_table_name, state;
          slug          |           description           |                         note                          | default_valid_from | default_valid_to |       upload_table_name       |       data_table_name       |  import_information_snapshot_table_name   |       state        
------------------------+---------------------------------+-------------------------------------------------------+--------------------+------------------+-------------------------------+-----------------------------+-------------------------------------------+--------------------
 import_underenhet_2018 | Import Job for BRREG Underenhet | This job handles the import of BRREG Underenhet data. | 01-01-2018         | infinity         | import_underenhet_2018_upload | import_underenhet_2018_data | import_underenhet_2018_import_information | waiting_for_upload
(1 row)

-- Verify that snapshot tables were created
SELECT slug, import_information_snapshot_table_name
FROM public.import_job
ORDER BY id;
          slug          |  import_information_snapshot_table_name   
------------------------+-------------------------------------------
 import_hovedenhet_2015 | import_hovedenhet_2015_import_information
 import_hovedenhet_2016 | import_hovedenhet_2016_import_information
 import_hovedenhet_2017 | import_hovedenhet_2017_import_information
 import_hovedenhet_2018 | import_hovedenhet_2018_import_information
 import_underenhet_2015 | import_underenhet_2015_import_information
 import_underenhet_2016 | import_underenhet_2016_import_information
 import_underenhet_2017 | import_underenhet_2017_import_information
 import_underenhet_2018 | import_underenhet_2018_import_information
(8 rows)

-- Verify that the snapshot tables exist in the database
SELECT ij.slug, ij.import_information_snapshot_table_name,
       CASE WHEN EXISTS (
           SELECT 1 FROM pg_tables
           WHERE schemaname = 'public' AND tablename = ij.import_information_snapshot_table_name
       ) THEN 'exists' ELSE 'missing' END AS table_status
FROM public.import_job ij
ORDER BY ij.id;
          slug          |  import_information_snapshot_table_name   | table_status 
------------------------+-------------------------------------------+--------------
 import_hovedenhet_2015 | import_hovedenhet_2015_import_information | exists
 import_hovedenhet_2016 | import_hovedenhet_2016_import_information | exists
 import_hovedenhet_2017 | import_hovedenhet_2017_import_information | exists
 import_hovedenhet_2018 | import_hovedenhet_2018_import_information | exists
 import_underenhet_2015 | import_underenhet_2015_import_information | exists
 import_underenhet_2016 | import_underenhet_2016_import_information | exists
 import_underenhet_2017 | import_underenhet_2017_import_information | exists
 import_underenhet_2018 | import_underenhet_2018_import_information | exists
(8 rows)

\echo Verify the concrete tables of one import job
Verify the concrete tables of one import job
\d public.import_hovedenhet_2015_upload
               Unlogged table "public.import_hovedenhet_2015_upload"
                  Column                   | Type | Collation | Nullable | Default 
-------------------------------------------+------+-----------+----------+---------
 organisasjonsnummer                       | text |           |          | 
 navn                                      | text |           |          | 
 organisasjonsform.kode                    | text |           |          | 
 organisasjonsform.beskrivelse             | text |           |          | 
 naeringskode1.kode                        | text |           |          | 
 naeringskode1.beskrivelse                 | text |           |          | 
 naeringskode2.kode                        | text |           |          | 
 naeringskode2.beskrivelse                 | text |           |          | 
 naeringskode3.kode                        | text |           |          | 
 naeringskode3.beskrivelse                 | text |           |          | 
 hjelpeenhetskode.kode                     | text |           |          | 
 hjelpeenhetskode.beskrivelse              | text |           |          | 
 harRegistrertAntallAnsatte                | text |           |          | 
 antallAnsatte                             | text |           |          | 
 hjemmeside                                | text |           |          | 
 postadresse.adresse                       | text |           |          | 
 postadresse.poststed                      | text |           |          | 
 postadresse.postnummer                    | text |           |          | 
 postadresse.kommune                       | text |           |          | 
 postadresse.kommunenummer                 | text |           |          | 
 postadresse.land                          | text |           |          | 
 postadresse.landkode                      | text |           |          | 
 forretningsadresse.adresse                | text |           |          | 
 forretningsadresse.poststed               | text |           |          | 
 forretningsadresse.postnummer             | text |           |          | 
 forretningsadresse.kommune                | text |           |          | 
 forretningsadresse.kommunenummer          | text |           |          | 
 forretningsadresse.land                   | text |           |          | 
 forretningsadresse.landkode               | text |           |          | 
 institusjonellSektorkode.kode             | text |           |          | 
 institusjonellSektorkode.beskrivelse      | text |           |          | 
 sisteInnsendteAarsregnskap                | text |           |          | 
 registreringsdatoenhetsregisteret         | text |           |          | 
 stiftelsesdato                            | text |           |          | 
 registrertIMvaRegisteret                  | text |           |          | 
 frivilligMvaRegistrertBeskrivelser        | text |           |          | 
 registrertIFrivillighetsregisteret        | text |           |          | 
 registrertIForetaksregisteret             | text |           |          | 
 registrertIStiftelsesregisteret           | text |           |          | 
 konkurs                                   | text |           |          | 
 konkursdato                               | text |           |          | 
 underAvvikling                            | text |           |          | 
 underAvviklingDato                        | text |           |          | 
 underTvangsavviklingEllerTvangsopplosning | text |           |          | 
 tvangsopplostPgaManglendeDagligLederDato  | text |           |          | 
 tvangsopplostPgaManglendeRevisorDato      | text |           |          | 
 tvangsopplostPgaManglendeRegnskapDato     | text |           |          | 
 tvangsopplostPgaMangelfulltStyreDato      | text |           |          | 
 tvangsavvikletPgaManglendeSlettingDato    | text |           |          | 
 overordnetEnhet                           | text |           |          | 
 maalform                                  | text |           |          | 
 vedtektsdato                              | text |           |          | 
 vedtektsfestetFormaal                     | text |           |          | 
 aktivitet                                 | text |           |          | 
Policies:
    POLICY "import_hovedenhet_2015_upload_authenticated_read" FOR SELECT
      TO authenticated
      USING (true)
    POLICY "import_hovedenhet_2015_upload_regular_user_manage"
      TO authenticated
      USING (auth.has_statbus_role(auth.uid(), 'regular_user'::statbus_role_type))
      WITH CHECK (auth.has_statbus_role(auth.uid(), 'regular_user'::statbus_role_type))
    POLICY "import_hovedenhet_2015_upload_super_user_manage"
      TO authenticated
      USING (auth.has_statbus_role(auth.uid(), 'super_user'::statbus_role_type))
      WITH CHECK (auth.has_statbus_role(auth.uid(), 'super_user'::statbus_role_type))
Triggers:
    import_hovedenhet_2015_upload_check_state_before_insert BEFORE INSERT ON import_hovedenhet_2015_upload FOR EACH STATEMENT EXECUTE FUNCTION admin.check_import_job_state_for_insert('17')
    import_hovedenhet_2015_upload_update_state_after_insert AFTER INSERT ON import_hovedenhet_2015_upload FOR EACH STATEMENT EXECUTE FUNCTION admin.update_import_job_state_after_insert('17')

\d public.import_hovedenhet_2015_data
                            Unlogged table "public.import_hovedenhet_2015_data"
              Column              |       Type        | Collation | Nullable |           Default            
----------------------------------+-------------------+-----------+----------+------------------------------
 tax_ident                        | text              |           |          | 
 name                             | text              |           |          | 
 legal_form_code                  | text              |           |          | 
 primary_activity_category_code   | text              |           |          | 
 secondary_activity_category_code | text              |           |          | 
 postal_address_part1             | text              |           |          | 
 postal_postplace                 | text              |           |          | 
 postal_postcode                  | text              |           |          | 
 postal_region_code               | text              |           |          | 
 postal_country_iso_2             | text              |           |          | 
 physical_address_part1           | text              |           |          | 
 physical_postplace               | text              |           |          | 
 physical_postcode                | text              |           |          | 
 physical_region_code             | text              |           |          | 
 physical_country_iso_2           | text              |           |          | 
 sector_code                      | text              |           |          | 
 birth_date                       | text              |           |          | 
 valid_from                       | text              |           |          | 
 valid_to                         | text              |           |          | 
 state                            | import_data_state |           | not null | 'pending'::import_data_state
Indexes:
    "import_hovedenhet_2015_data_state_idx" btree (state)
    "import_hovedenhet_2015_data_unique_key" UNIQUE CONSTRAINT, btree (tax_ident)
Policies:
    POLICY "import_hovedenhet_2015_data_authenticated_read" FOR SELECT
      TO authenticated
      USING (true)
    POLICY "import_hovedenhet_2015_data_regular_user_manage"
      TO authenticated
      USING (auth.has_statbus_role(auth.uid(), 'regular_user'::statbus_role_type))
      WITH CHECK (auth.has_statbus_role(auth.uid(), 'regular_user'::statbus_role_type))
    POLICY "import_hovedenhet_2015_data_super_user_manage"
      TO authenticated
      USING (auth.has_statbus_role(auth.uid(), 'super_user'::statbus_role_type))
      WITH CHECK (auth.has_statbus_role(auth.uid(), 'super_user'::statbus_role_type))

\d public.import_hovedenhet_2015_import_information
         Unlogged table "public.import_hovedenhet_2015_import_information"
         Column         |           Type           | Collation | Nullable | Default 
------------------------+--------------------------+-----------+----------+---------
 job_id                 | integer                  |           |          | 
 definition_id          | integer                  |           |          | 
 import_job_slug        | text                     |           |          | 
 import_definition_slug | text                     |           |          | 
 import_name            | text                     |           |          | 
 import_note            | text                     |           |          | 
 target_schema_name     | text                     |           |          | 
 upload_table_name      | text                     |           |          | 
 data_table_name        | text                     |           |          | 
 source_column          | text                     |           |          | 
 source_value           | text                     |           |          | 
 source_expression      | import_source_expression |           |          | 
 target_column          | text                     |           |          | 
 target_type            | text                     |           |          | 
 uniquely_identifying   | boolean                  |           |          | 
 source_column_priority | integer                  |           |          | 
Indexes:
    "import_hovedenhet_2015_import_inform_source_column_priority_idx" btree (source_column_priority)
Policies:
    POLICY "import_hovedenhet_2015_import_information_authenticated_read" FOR SELECT
      TO authenticated
      USING (true)
    POLICY "import_hovedenhet_2015_import_information_regular_user_read" FOR SELECT
      TO authenticated
      USING (auth.has_statbus_role(auth.uid(), 'regular_user'::statbus_role_type))
    POLICY "import_hovedenhet_2015_import_information_super_user_manage"
      TO authenticated
      USING (auth.has_statbus_role(auth.uid(), 'super_user'::statbus_role_type))
      WITH CHECK (auth.has_statbus_role(auth.uid(), 'super_user'::statbus_role_type))

\d public.import_underenhet_2015_upload
           Unlogged table "public.import_underenhet_2015_upload"
               Column               | Type | Collation | Nullable | Default 
------------------------------------+------+-----------+----------+---------
 organisasjonsnummer                | text |           |          | 
 navn                               | text |           |          | 
 organisasjonsform.kode             | text |           |          | 
 organisasjonsform.beskrivelse      | text |           |          | 
 naeringskode1.kode                 | text |           |          | 
 naeringskode1.beskrivelse          | text |           |          | 
 naeringskode2.kode                 | text |           |          | 
 naeringskode2.beskrivelse          | text |           |          | 
 naeringskode3.kode                 | text |           |          | 
 naeringskode3.beskrivelse          | text |           |          | 
 hjelpeenhetskode.kode              | text |           |          | 
 hjelpeenhetskode.beskrivelse       | text |           |          | 
 harRegistrertAntallAnsatte         | text |           |          | 
 antallAnsatte                      | text |           |          | 
 hjemmeside                         | text |           |          | 
 postadresse.adresse                | text |           |          | 
 postadresse.poststed               | text |           |          | 
 postadresse.postnummer             | text |           |          | 
 postadresse.kommune                | text |           |          | 
 postadresse.kommunenummer          | text |           |          | 
 postadresse.land                   | text |           |          | 
 postadresse.landkode               | text |           |          | 
 beliggenhetsadresse.adresse        | text |           |          | 
 beliggenhetsadresse.poststed       | text |           |          | 
 beliggenhetsadresse.postnummer     | text |           |          | 
 beliggenhetsadresse.kommune        | text |           |          | 
 beliggenhetsadresse.kommunenummer  | text |           |          | 
 beliggenhetsadresse.land           | text |           |          | 
 beliggenhetsadresse.landkode       | text |           |          | 
 registreringsdatoIEnhetsregisteret | text |           |          | 
 frivilligMvaRegistrertBeskrivelser | text |           |          | 
 registrertIMvaregisteret           | text |           |          | 
 oppstartsdato                      | text |           |          | 
 datoEierskifte                     | text |           |          | 
 overordnetEnhet                    | text |           |          | 
 nedleggelsesdato                   | text |           |          | 
Policies:
    POLICY "import_underenhet_2015_upload_authenticated_read" FOR SELECT
      TO authenticated
      USING (true)
    POLICY "import_underenhet_2015_upload_regular_user_manage"
      TO authenticated
      USING (auth.has_statbus_role(auth.uid(), 'regular_user'::statbus_role_type))
      WITH CHECK (auth.has_statbus_role(auth.uid(), 'regular_user'::statbus_role_type))
    POLICY "import_underenhet_2015_upload_super_user_manage"
      TO authenticated
      USING (auth.has_statbus_role(auth.uid(), 'super_user'::statbus_role_type))
      WITH CHECK (auth.has_statbus_role(auth.uid(), 'super_user'::statbus_role_type))
Triggers:
    import_underenhet_2015_upload_check_state_before_insert BEFORE INSERT ON import_underenhet_2015_upload FOR EACH STATEMENT EXECUTE FUNCTION admin.check_import_job_state_for_insert('21')
    import_underenhet_2015_upload_update_state_after_insert AFTER INSERT ON import_underenhet_2015_upload FOR EACH STATEMENT EXECUTE FUNCTION admin.update_import_job_state_after_insert('21')

\d public.import_underenhet_2015_data
                            Unlogged table "public.import_underenhet_2015_data"
              Column              |       Type        | Collation | Nullable |           Default            
----------------------------------+-------------------+-----------+----------+------------------------------
 tax_ident                        | text              |           |          | 
 name                             | text              |           |          | 
 primary_activity_category_code   | text              |           |          | 
 secondary_activity_category_code | text              |           |          | 
 postal_address_part1             | text              |           |          | 
 postal_postplace                 | text              |           |          | 
 postal_postcode                  | text              |           |          | 
 postal_region_code               | text              |           |          | 
 postal_country_iso_2             | text              |           |          | 
 physical_address_part1           | text              |           |          | 
 physical_postplace               | text              |           |          | 
 physical_postcode                | text              |           |          | 
 physical_region_code             | text              |           |          | 
 physical_country_iso_2           | text              |           |          | 
 birth_date                       | text              |           |          | 
 legal_unit_tax_ident             | text              |           |          | 
 death_date                       | text              |           |          | 
 valid_from                       | text              |           |          | 
 valid_to                         | text              |           |          | 
 state                            | import_data_state |           | not null | 'pending'::import_data_state
Indexes:
    "import_underenhet_2015_data_state_idx" btree (state)
    "import_underenhet_2015_data_unique_key" UNIQUE CONSTRAINT, btree (tax_ident)
Policies:
    POLICY "import_underenhet_2015_data_authenticated_read" FOR SELECT
      TO authenticated
      USING (true)
    POLICY "import_underenhet_2015_data_regular_user_manage"
      TO authenticated
      USING (auth.has_statbus_role(auth.uid(), 'regular_user'::statbus_role_type))
      WITH CHECK (auth.has_statbus_role(auth.uid(), 'regular_user'::statbus_role_type))
    POLICY "import_underenhet_2015_data_super_user_manage"
      TO authenticated
      USING (auth.has_statbus_role(auth.uid(), 'super_user'::statbus_role_type))
      WITH CHECK (auth.has_statbus_role(auth.uid(), 'super_user'::statbus_role_type))

\d public.import_underenhet_2015_import_information
         Unlogged table "public.import_underenhet_2015_import_information"
         Column         |           Type           | Collation | Nullable | Default 
------------------------+--------------------------+-----------+----------+---------
 job_id                 | integer                  |           |          | 
 definition_id          | integer                  |           |          | 
 import_job_slug        | text                     |           |          | 
 import_definition_slug | text                     |           |          | 
 import_name            | text                     |           |          | 
 import_note            | text                     |           |          | 
 target_schema_name     | text                     |           |          | 
 upload_table_name      | text                     |           |          | 
 data_table_name        | text                     |           |          | 
 source_column          | text                     |           |          | 
 source_value           | text                     |           |          | 
 source_expression      | import_source_expression |           |          | 
 target_column          | text                     |           |          | 
 target_type            | text                     |           |          | 
 uniquely_identifying   | boolean                  |           |          | 
 source_column_priority | integer                  |           |          | 
Indexes:
    "import_underenhet_2015_import_inform_source_column_priority_idx" btree (source_column_priority)
Policies:
    POLICY "import_underenhet_2015_import_information_authenticated_read" FOR SELECT
      TO authenticated
      USING (true)
    POLICY "import_underenhet_2015_import_information_regular_user_read" FOR SELECT
      TO authenticated
      USING (auth.has_statbus_role(auth.uid(), 'regular_user'::statbus_role_type))
    POLICY "import_underenhet_2015_import_information_super_user_manage"
      TO authenticated
      USING (auth.has_statbus_role(auth.uid(), 'super_user'::statbus_role_type))
      WITH CHECK (auth.has_statbus_role(auth.uid(), 'super_user'::statbus_role_type))

SELECT import_job_slug, import_definition_slug, import_name, import_note, target_schema_name, upload_table_name, data_table_name, source_column, source_value, source_expression, target_column, target_type, uniquely_identifying, source_column_priority
FROM public.import_hovedenhet_2015_import_information;
    import_job_slug     | import_definition_slug |        import_name         |                 import_note                 | target_schema_name |       upload_table_name       |       data_table_name       |               source_column               | source_value | source_expression |          target_column           | target_type | uniquely_identifying | source_column_priority 
------------------------+------------------------+----------------------------+---------------------------------------------+--------------------+-------------------------------+-----------------------------+-------------------------------------------+--------------+-------------------+----------------------------------+-------------+----------------------+------------------------
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | organisasjonsnummer                       |              |                   | tax_ident                        | text        | t                    |                      3
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | navn                                      |              |                   | name                             | text        | f                    |                      4
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | organisasjonsform.kode                    |              |                   | legal_form_code                  | text        | f                    |                      5
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | organisasjonsform.beskrivelse             |              |                   |                                  |             |                      |                      6
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | naeringskode1.kode                        |              |                   | primary_activity_category_code   | text        | f                    |                      7
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | naeringskode1.beskrivelse                 |              |                   |                                  |             |                      |                      8
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | naeringskode2.kode                        |              |                   | secondary_activity_category_code | text        | f                    |                      9
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | naeringskode2.beskrivelse                 |              |                   |                                  |             |                      |                     10
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | naeringskode3.kode                        |              |                   |                                  |             |                      |                     11
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | naeringskode3.beskrivelse                 |              |                   |                                  |             |                      |                     12
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | hjelpeenhetskode.kode                     |              |                   |                                  |             |                      |                     13
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | hjelpeenhetskode.beskrivelse              |              |                   |                                  |             |                      |                     14
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | harRegistrertAntallAnsatte                |              |                   |                                  |             |                      |                     15
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | antallAnsatte                             |              |                   |                                  |             |                      |                     16
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | hjemmeside                                |              |                   |                                  |             |                      |                     17
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | postadresse.adresse                       |              |                   | postal_address_part1             | text        | f                    |                     18
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | postadresse.poststed                      |              |                   | postal_postplace                 | text        | f                    |                     19
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | postadresse.postnummer                    |              |                   | postal_postcode                  | text        | f                    |                     20
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | postadresse.kommune                       |              |                   |                                  |             |                      |                     21
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | postadresse.kommunenummer                 |              |                   | postal_region_code               | text        | f                    |                     22
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | postadresse.land                          |              |                   |                                  |             |                      |                     23
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | postadresse.landkode                      |              |                   | postal_country_iso_2             | text        | f                    |                     24
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | forretningsadresse.adresse                |              |                   | physical_address_part1           | text        | f                    |                     25
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | forretningsadresse.poststed               |              |                   | physical_postplace               | text        | f                    |                     26
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | forretningsadresse.postnummer             |              |                   | physical_postcode                | text        | f                    |                     27
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | forretningsadresse.kommune                |              |                   |                                  |             |                      |                     28
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | forretningsadresse.kommunenummer          |              |                   | physical_region_code             | text        | f                    |                     29
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | forretningsadresse.land                   |              |                   |                                  |             |                      |                     30
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | forretningsadresse.landkode               |              |                   | physical_country_iso_2           | text        | f                    |                     31
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | institusjonellSektorkode.kode             |              |                   | sector_code                      | text        | f                    |                     32
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | institusjonellSektorkode.beskrivelse      |              |                   |                                  |             |                      |                     33
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | sisteInnsendteAarsregnskap                |              |                   |                                  |             |                      |                     34
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | registreringsdatoenhetsregisteret         |              |                   |                                  |             |                      |                     35
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | stiftelsesdato                            |              |                   | birth_date                       | text        | f                    |                     36
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | registrertIMvaRegisteret                  |              |                   |                                  |             |                      |                     37
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | frivilligMvaRegistrertBeskrivelser        |              |                   |                                  |             |                      |                     38
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | registrertIFrivillighetsregisteret        |              |                   |                                  |             |                      |                     39
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | registrertIForetaksregisteret             |              |                   |                                  |             |                      |                     40
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | registrertIStiftelsesregisteret           |              |                   |                                  |             |                      |                     41
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | konkurs                                   |              |                   |                                  |             |                      |                     42
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | konkursdato                               |              |                   |                                  |             |                      |                     43
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | underAvvikling                            |              |                   |                                  |             |                      |                     44
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | underAvviklingDato                        |              |                   |                                  |             |                      |                     45
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | underTvangsavviklingEllerTvangsopplosning |              |                   |                                  |             |                      |                     46
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | tvangsopplostPgaManglendeDagligLederDato  |              |                   |                                  |             |                      |                     47
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | tvangsopplostPgaManglendeRevisorDato      |              |                   |                                  |             |                      |                     48
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | tvangsopplostPgaManglendeRegnskapDato     |              |                   |                                  |             |                      |                     49
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | tvangsopplostPgaMangelfulltStyreDato      |              |                   |                                  |             |                      |                     50
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | tvangsavvikletPgaManglendeSlettingDato    |              |                   |                                  |             |                      |                     51
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | overordnetEnhet                           |              |                   |                                  |             |                      |                     52
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | maalform                                  |              |                   |                                  |             |                      |                     53
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | vedtektsdato                              |              |                   |                                  |             |                      |                     54
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | vedtektsfestetFormaal                     |              |                   |                                  |             |                      |                     55
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | aktivitet                                 |              |                   |                                  |             |                      |                     56
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data |                                           |              | default           | valid_from                       | text        | f                    |                       
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data |                                           |              | default           | valid_to                         | text        | f                    |                       
(56 rows)

\echo Review public.import_information for ensure it matches import_hovedenhet_2015_import_information_snapshot
Review public.import_information for ensure it matches import_hovedenhet_2015_import_information_snapshot
SELECT import_job_slug, import_definition_slug, import_name, import_note, target_schema_name, upload_table_name, data_table_name, source_column, source_value, source_expression, target_column, target_type, uniquely_identifying, source_column_priority
FROM public.import_information
WHERE import_job_slug = 'import_hovedenhet_2015';
    import_job_slug     | import_definition_slug |        import_name         |                 import_note                 | target_schema_name |       upload_table_name       |       data_table_name       |               source_column               | source_value | source_expression |          target_column           | target_type | uniquely_identifying | source_column_priority 
------------------------+------------------------+----------------------------+---------------------------------------------+--------------------+-------------------------------+-----------------------------+-------------------------------------------+--------------+-------------------+----------------------------------+-------------+----------------------+------------------------
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | organisasjonsnummer                       |              |                   | tax_ident                        | text        | t                    |                      3
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | navn                                      |              |                   | name                             | text        | f                    |                      4
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | organisasjonsform.kode                    |              |                   | legal_form_code                  | text        | f                    |                      5
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | organisasjonsform.beskrivelse             |              |                   |                                  |             |                      |                      6
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | naeringskode1.kode                        |              |                   | primary_activity_category_code   | text        | f                    |                      7
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | naeringskode1.beskrivelse                 |              |                   |                                  |             |                      |                      8
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | naeringskode2.kode                        |              |                   | secondary_activity_category_code | text        | f                    |                      9
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | naeringskode2.beskrivelse                 |              |                   |                                  |             |                      |                     10
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | naeringskode3.kode                        |              |                   |                                  |             |                      |                     11
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | naeringskode3.beskrivelse                 |              |                   |                                  |             |                      |                     12
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | hjelpeenhetskode.kode                     |              |                   |                                  |             |                      |                     13
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | hjelpeenhetskode.beskrivelse              |              |                   |                                  |             |                      |                     14
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | harRegistrertAntallAnsatte                |              |                   |                                  |             |                      |                     15
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | antallAnsatte                             |              |                   |                                  |             |                      |                     16
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | hjemmeside                                |              |                   |                                  |             |                      |                     17
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | postadresse.adresse                       |              |                   | postal_address_part1             | text        | f                    |                     18
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | postadresse.poststed                      |              |                   | postal_postplace                 | text        | f                    |                     19
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | postadresse.postnummer                    |              |                   | postal_postcode                  | text        | f                    |                     20
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | postadresse.kommune                       |              |                   |                                  |             |                      |                     21
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | postadresse.kommunenummer                 |              |                   | postal_region_code               | text        | f                    |                     22
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | postadresse.land                          |              |                   |                                  |             |                      |                     23
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | postadresse.landkode                      |              |                   | postal_country_iso_2             | text        | f                    |                     24
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | forretningsadresse.adresse                |              |                   | physical_address_part1           | text        | f                    |                     25
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | forretningsadresse.poststed               |              |                   | physical_postplace               | text        | f                    |                     26
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | forretningsadresse.postnummer             |              |                   | physical_postcode                | text        | f                    |                     27
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | forretningsadresse.kommune                |              |                   |                                  |             |                      |                     28
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | forretningsadresse.kommunenummer          |              |                   | physical_region_code             | text        | f                    |                     29
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | forretningsadresse.land                   |              |                   |                                  |             |                      |                     30
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | forretningsadresse.landkode               |              |                   | physical_country_iso_2           | text        | f                    |                     31
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | institusjonellSektorkode.kode             |              |                   | sector_code                      | text        | f                    |                     32
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | institusjonellSektorkode.beskrivelse      |              |                   |                                  |             |                      |                     33
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | sisteInnsendteAarsregnskap                |              |                   |                                  |             |                      |                     34
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | registreringsdatoenhetsregisteret         |              |                   |                                  |             |                      |                     35
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | stiftelsesdato                            |              |                   | birth_date                       | text        | f                    |                     36
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | registrertIMvaRegisteret                  |              |                   |                                  |             |                      |                     37
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | frivilligMvaRegistrertBeskrivelser        |              |                   |                                  |             |                      |                     38
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | registrertIFrivillighetsregisteret        |              |                   |                                  |             |                      |                     39
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | registrertIForetaksregisteret             |              |                   |                                  |             |                      |                     40
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | registrertIStiftelsesregisteret           |              |                   |                                  |             |                      |                     41
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | konkurs                                   |              |                   |                                  |             |                      |                     42
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | konkursdato                               |              |                   |                                  |             |                      |                     43
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | underAvvikling                            |              |                   |                                  |             |                      |                     44
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | underAvviklingDato                        |              |                   |                                  |             |                      |                     45
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | underTvangsavviklingEllerTvangsopplosning |              |                   |                                  |             |                      |                     46
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | tvangsopplostPgaManglendeDagligLederDato  |              |                   |                                  |             |                      |                     47
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | tvangsopplostPgaManglendeRevisorDato      |              |                   |                                  |             |                      |                     48
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | tvangsopplostPgaManglendeRegnskapDato     |              |                   |                                  |             |                      |                     49
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | tvangsopplostPgaMangelfulltStyreDato      |              |                   |                                  |             |                      |                     50
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | tvangsavvikletPgaManglendeSlettingDato    |              |                   |                                  |             |                      |                     51
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | overordnetEnhet                           |              |                   |                                  |             |                      |                     52
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | maalform                                  |              |                   |                                  |             |                      |                     53
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | vedtektsdato                              |              |                   |                                  |             |                      |                     54
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | vedtektsfestetFormaal                     |              |                   |                                  |             |                      |                     55
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data | aktivitet                                 |              |                   |                                  |             |                      |                     56
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data |                                           |              | default           | valid_from                       | text        | f                    |                       
 import_hovedenhet_2015 | brreg_hovedenhet       | Import of BRREG Hovedenhet | Easy upload of the CSV file found at brreg. | public             | import_hovedenhet_2015_upload | import_hovedenhet_2015_data |                                           |              | default           | valid_to                         | text        | f                    |                       
(56 rows)

-- Disable RLS on import tables to support \copy
CALL public.disable_rls_on_table('public','import_hovedenhet_2015_upload');
CALL public.disable_rls_on_table('public','import_hovedenhet_2016_upload');
CALL public.disable_rls_on_table('public','import_hovedenhet_2017_upload');
CALL public.disable_rls_on_table('public','import_hovedenhet_2018_upload');
--
CALL public.disable_rls_on_table('public','import_underenhet_2015_upload');
CALL public.disable_rls_on_table('public','import_underenhet_2016_upload');
CALL public.disable_rls_on_table('public','import_underenhet_2017_upload');
CALL public.disable_rls_on_table('public','import_underenhet_2018_upload');
\echo "Setting up Statbus for Norway"
"Setting up Statbus for Norway"
\i samples/norway/getting-started.sql
\i samples/norway/activity_category/activity_category_norway.sql
INSERT INTO settings(activity_category_standard_id,only_one_setting)
SELECT id, true FROM activity_category_standard WHERE code = 'nace_v2.1'
ON CONFLICT (only_one_setting)
DO UPDATE SET
   activity_category_standard_id =(SELECT id FROM activity_category_standard WHERE code = 'nace_v2.1')
   WHERE settings.id = EXCLUDED.id;
;
\copy public.activity_category_available_custom FROM 'samples/norway/activity_category/activity_category_norway.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
\i samples/norway/regions/norway-regions-2024.sql
\copy public.region_upload(path, name) FROM 'samples/norway/regions/norway-regions-2024.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
\i samples/norway/sector/sector_norway.sql
\copy public.sector_custom_only FROM 'samples/norway/sector/sector_norway.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
\i samples/norway/legal_form/legal_form_norway.sql
\copy public.legal_form_custom_only FROM 'samples/norway/legal_form/legal_form_norway.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
-- Verify user context is set correctly for import jobs
\echo "Verifying user context for import jobs"
"Verifying user context for import jobs"
SELECT slug,
       (SELECT email FROM public.statbus_user_with_email_and_role WHERE id = user_id) AS user_email
FROM public.import_job
WHERE slug = 'import_hovedenhet_2015';
          slug          |       user_email       
------------------------+------------------------
 import_hovedenhet_2015 | test.super@statbus.org
(1 row)

\echo "Loading historical units"
"Loading historical units"
\copy public.import_hovedenhet_2015_upload FROM 'samples/norway/history/2015-enheter.csv' WITH CSV HEADER;
UPDATE import_job SET state = 'upload_completed' WHERE slug = 'import_hovedenhet_2015';
\copy public.import_hovedenhet_2016_upload FROM 'samples/norway/history/2016-enheter.csv' WITH CSV HEADER;
UPDATE import_job SET state = 'upload_completed' WHERE slug = 'import_hovedenhet_2016';
\copy public.import_hovedenhet_2017_upload FROM 'samples/norway/history/2017-enheter.csv' WITH CSV HEADER;
UPDATE import_job SET state = 'upload_completed' WHERE slug = 'import_hovedenhet_2017';
\copy public.import_hovedenhet_2018_upload FROM 'samples/norway/history/2018-enheter.csv' WITH CSV HEADER;
UPDATE import_job SET state = 'upload_completed' WHERE slug = 'import_hovedenhet_2018';
\copy public.import_underenhet_2015_upload FROM 'samples/norway/history/2015-underenheter.csv' WITH CSV HEADER;
UPDATE import_job SET state = 'upload_completed' WHERE slug = 'import_underenhet_2015';
\copy public.import_underenhet_2016_upload FROM 'samples/norway/history/2016-underenheter.csv' WITH CSV HEADER;
UPDATE import_job SET state = 'upload_completed' WHERE slug = 'import_underenhet_2016';
\copy public.import_underenhet_2017_upload FROM 'samples/norway/history/2017-underenheter.csv' WITH CSV HEADER;
UPDATE import_job SET state = 'upload_completed' WHERE slug = 'import_underenhet_2017';
\copy public.import_underenhet_2018_upload FROM 'samples/norway/history/2018-underenheter.csv' WITH CSV HEADER;
UPDATE import_job SET state = 'upload_completed' WHERE slug = 'import_underenhet_2018';
\echo Check import job state before import
Check import job state before import
SELECT state, count(*) FROM import_job GROUP BY state;
      state       | count 
------------------+-------
 upload_completed |     8
(1 row)

\echo Check data row state before import
Check data row state before import
SELECT state, count(*) FROM public.import_hovedenhet_2015_data GROUP BY state;
 state | count 
-------+-------
(0 rows)

\echo Check data row state before import
Check data row state before import
SELECT state, count(*) FROM public.import_underenhet_2015_data GROUP BY state;
 state | count 
-------+-------
(0 rows)

\echo Run worker processing to run import jobs and generate computed data
Run worker processing to run import jobs and generate computed data
SET client_min_messages TO DEBUG;
CALL worker.process_tasks();
DEBUG:  Running worker.process_tasks inside transaction: t
DEBUG:  rehashing catalog cache id 24 for pg_enum; 17 tups, 8 buckets
LINE 3:     WHERE t.state = 'pending'::worker.task_state
                            ^
QUERY:  SELECT t.*, cr.handler_procedure, cr.queue                      FROM worker.tasks t
    JOIN worker.command_registry cr ON t.command = cr.command
    WHERE t.state = 'pending'::worker.task_state
      AND (t.scheduled_at IS NULL OR t.scheduled_at <= clock_timestamp())
      AND (p_queue IS NULL OR cr.queue = p_queue)
    ORDER BY
      CASE WHEN t.scheduled_at IS NULL THEN 0 ELSE 1 END, -- Non-scheduled tasks next
      t.scheduled_at, -- Then by scheduled time (earliest first)
      t.priority ASC NULLS LAST, -- Then by priority (smaller numbers first so primary key id or epoch time can be used naturally)
      t.id            -- Then by creation sequence
    LIMIT 1
    FOR UPDATE OF t SKIP LOCKED
DEBUG:  rehashing catalog cache id 53 for pg_range; 9 tups, 4 buckets
DEBUG:  rehashing catalog cache id 63 for pg_statistic; 1025 tups, 512 buckets
DEBUG:  Set user context to 5625d86b-1e1d-43fc-bfa1-eb3911635881 for import job 17
DEBUG:  Preparing import job 17 by moving data from import_hovedenhet_2015_upload to import_hovedenhet_2015_data
DEBUG:  Executing upsert: INSERT INTO public.import_hovedenhet_2015_data (tax_ident, name, legal_form_code, primary_activity_category_code, secondary_activity_category_code, postal_address_part1, postal_postplace, postal_postcode, postal_region_code, postal_country_iso_2, physical_address_part1, physical_postplace, physical_postcode, physical_region_code, physical_country_iso_2, sector_code, birth_date, valid_from, valid_to) SELECT NULLIF(organisasjonsnummer,''), NULLIF(navn,''), NULLIF("organisasjonsform.kode",''), NULLIF("naeringskode1.kode",''), NULLIF("naeringskode2.kode",''), NULLIF("postadresse.adresse",''), NULLIF("postadresse.poststed",''), NULLIF("postadresse.postnummer",''), NULLIF("postadresse.kommunenummer",''), NULLIF("postadresse.landkode",''), NULLIF("forretningsadresse.adresse",''), NULLIF("forretningsadresse.poststed",''), NULLIF("forretningsadresse.postnummer",''), NULLIF("forretningsadresse.kommunenummer",''), NULLIF("forretningsadresse.landkode",''), NULLIF("institusjonellSektorkode.kode",''), NULLIF(stiftelsesdato,''), '01-01-2015', 'infinity' FROM public.import_hovedenhet_2015_upload  ON CONFLICT (tax_ident) DO UPDATE SET name = EXCLUDED.name, legal_form_code = EXCLUDED.legal_form_code, primary_activity_category_code = EXCLUDED.primary_activity_category_code, secondary_activity_category_code = EXCLUDED.secondary_activity_category_code, postal_address_part1 = EXCLUDED.postal_address_part1, postal_postplace = EXCLUDED.postal_postplace, postal_postcode = EXCLUDED.postal_postcode, postal_region_code = EXCLUDED.postal_region_code, postal_country_iso_2 = EXCLUDED.postal_country_iso_2, physical_address_part1 = EXCLUDED.physical_address_part1, physical_postplace = EXCLUDED.physical_postplace, physical_postcode = EXCLUDED.physical_postcode, physical_region_code = EXCLUDED.physical_region_code, physical_country_iso_2 = EXCLUDED.physical_country_iso_2, sector_code = EXCLUDED.sector_code, birth_date = EXCLUDED.birth_date
DEBUG:  There are 1000 rows in import_hovedenhet_2015_data
DEBUG:  Reset user context to original user 5625d86b-1e1d-43fc-bfa1-eb3911635881
DEBUG:  Rescheduled import job 17 for further processing
DEBUG:  Task 544 (import_job_process) completed in 16.792000 ms
DEBUG:  Set user context to 5625d86b-1e1d-43fc-bfa1-eb3911635881 for import job 18
DEBUG:  Preparing import job 18 by moving data from import_hovedenhet_2016_upload to import_hovedenhet_2016_data
DEBUG:  Executing upsert: INSERT INTO public.import_hovedenhet_2016_data (tax_ident, name, legal_form_code, primary_activity_category_code, secondary_activity_category_code, postal_address_part1, postal_postplace, postal_postcode, postal_region_code, postal_country_iso_2, physical_address_part1, physical_postplace, physical_postcode, physical_region_code, physical_country_iso_2, sector_code, birth_date, valid_from, valid_to) SELECT NULLIF(organisasjonsnummer,''), NULLIF(navn,''), NULLIF("organisasjonsform.kode",''), NULLIF("naeringskode1.kode",''), NULLIF("naeringskode2.kode",''), NULLIF("postadresse.adresse",''), NULLIF("postadresse.poststed",''), NULLIF("postadresse.postnummer",''), NULLIF("postadresse.kommunenummer",''), NULLIF("postadresse.landkode",''), NULLIF("forretningsadresse.adresse",''), NULLIF("forretningsadresse.poststed",''), NULLIF("forretningsadresse.postnummer",''), NULLIF("forretningsadresse.kommunenummer",''), NULLIF("forretningsadresse.landkode",''), NULLIF("institusjonellSektorkode.kode",''), NULLIF(stiftelsesdato,''), '01-01-2016', 'infinity' FROM public.import_hovedenhet_2016_upload  ON CONFLICT (tax_ident) DO UPDATE SET name = EXCLUDED.name, legal_form_code = EXCLUDED.legal_form_code, primary_activity_category_code = EXCLUDED.primary_activity_category_code, secondary_activity_category_code = EXCLUDED.secondary_activity_category_code, postal_address_part1 = EXCLUDED.postal_address_part1, postal_postplace = EXCLUDED.postal_postplace, postal_postcode = EXCLUDED.postal_postcode, postal_region_code = EXCLUDED.postal_region_code, postal_country_iso_2 = EXCLUDED.postal_country_iso_2, physical_address_part1 = EXCLUDED.physical_address_part1, physical_postplace = EXCLUDED.physical_postplace, physical_postcode = EXCLUDED.physical_postcode, physical_region_code = EXCLUDED.physical_region_code, physical_country_iso_2 = EXCLUDED.physical_country_iso_2, sector_code = EXCLUDED.sector_code, birth_date = EXCLUDED.birth_date
DEBUG:  There are 1148 rows in import_hovedenhet_2016_data
DEBUG:  Reset user context to original user 5625d86b-1e1d-43fc-bfa1-eb3911635881
DEBUG:  Rescheduled import job 18 for further processing
DEBUG:  Task 545 (import_job_process) completed in 16.972000 ms
DEBUG:  Set user context to 5625d86b-1e1d-43fc-bfa1-eb3911635881 for import job 19
DEBUG:  Preparing import job 19 by moving data from import_hovedenhet_2017_upload to import_hovedenhet_2017_data
DEBUG:  Executing upsert: INSERT INTO public.import_hovedenhet_2017_data (tax_ident, name, legal_form_code, primary_activity_category_code, secondary_activity_category_code, postal_address_part1, postal_postplace, postal_postcode, postal_region_code, postal_country_iso_2, physical_address_part1, physical_postplace, physical_postcode, physical_region_code, physical_country_iso_2, sector_code, birth_date, valid_from, valid_to) SELECT NULLIF(organisasjonsnummer,''), NULLIF(navn,''), NULLIF("organisasjonsform.kode",''), NULLIF("naeringskode1.kode",''), NULLIF("naeringskode2.kode",''), NULLIF("postadresse.adresse",''), NULLIF("postadresse.poststed",''), NULLIF("postadresse.postnummer",''), NULLIF("postadresse.kommunenummer",''), NULLIF("postadresse.landkode",''), NULLIF("forretningsadresse.adresse",''), NULLIF("forretningsadresse.poststed",''), NULLIF("forretningsadresse.postnummer",''), NULLIF("forretningsadresse.kommunenummer",''), NULLIF("forretningsadresse.landkode",''), NULLIF("institusjonellSektorkode.kode",''), NULLIF(stiftelsesdato,''), '01-01-2017', 'infinity' FROM public.import_hovedenhet_2017_upload  ON CONFLICT (tax_ident) DO UPDATE SET name = EXCLUDED.name, legal_form_code = EXCLUDED.legal_form_code, primary_activity_category_code = EXCLUDED.primary_activity_category_code, secondary_activity_category_code = EXCLUDED.secondary_activity_category_code, postal_address_part1 = EXCLUDED.postal_address_part1, postal_postplace = EXCLUDED.postal_postplace, postal_postcode = EXCLUDED.postal_postcode, postal_region_code = EXCLUDED.postal_region_code, postal_country_iso_2 = EXCLUDED.postal_country_iso_2, physical_address_part1 = EXCLUDED.physical_address_part1, physical_postplace = EXCLUDED.physical_postplace, physical_postcode = EXCLUDED.physical_postcode, physical_region_code = EXCLUDED.physical_region_code, physical_country_iso_2 = EXCLUDED.physical_country_iso_2, sector_code = EXCLUDED.sector_code, birth_date = EXCLUDED.birth_date
DEBUG:  There are 1362 rows in import_hovedenhet_2017_data
DEBUG:  Reset user context to original user 5625d86b-1e1d-43fc-bfa1-eb3911635881
DEBUG:  Rescheduled import job 19 for further processing
DEBUG:  Task 546 (import_job_process) completed in 20.803000 ms
DEBUG:  Set user context to 5625d86b-1e1d-43fc-bfa1-eb3911635881 for import job 20
DEBUG:  Preparing import job 20 by moving data from import_hovedenhet_2018_upload to import_hovedenhet_2018_data
DEBUG:  Executing upsert: INSERT INTO public.import_hovedenhet_2018_data (tax_ident, name, legal_form_code, primary_activity_category_code, secondary_activity_category_code, postal_address_part1, postal_postplace, postal_postcode, postal_region_code, postal_country_iso_2, physical_address_part1, physical_postplace, physical_postcode, physical_region_code, physical_country_iso_2, sector_code, birth_date, valid_from, valid_to) SELECT NULLIF(organisasjonsnummer,''), NULLIF(navn,''), NULLIF("organisasjonsform.kode",''), NULLIF("naeringskode1.kode",''), NULLIF("naeringskode2.kode",''), NULLIF("postadresse.adresse",''), NULLIF("postadresse.poststed",''), NULLIF("postadresse.postnummer",''), NULLIF("postadresse.kommunenummer",''), NULLIF("postadresse.landkode",''), NULLIF("forretningsadresse.adresse",''), NULLIF("forretningsadresse.poststed",''), NULLIF("forretningsadresse.postnummer",''), NULLIF("forretningsadresse.kommunenummer",''), NULLIF("forretningsadresse.landkode",''), NULLIF("institusjonellSektorkode.kode",''), NULLIF(stiftelsesdato,''), '01-01-2018', 'infinity' FROM public.import_hovedenhet_2018_upload  ON CONFLICT (tax_ident) DO UPDATE SET name = EXCLUDED.name, legal_form_code = EXCLUDED.legal_form_code, primary_activity_category_code = EXCLUDED.primary_activity_category_code, secondary_activity_category_code = EXCLUDED.secondary_activity_category_code, postal_address_part1 = EXCLUDED.postal_address_part1, postal_postplace = EXCLUDED.postal_postplace, postal_postcode = EXCLUDED.postal_postcode, postal_region_code = EXCLUDED.postal_region_code, postal_country_iso_2 = EXCLUDED.postal_country_iso_2, physical_address_part1 = EXCLUDED.physical_address_part1, physical_postplace = EXCLUDED.physical_postplace, physical_postcode = EXCLUDED.physical_postcode, physical_region_code = EXCLUDED.physical_region_code, physical_country_iso_2 = EXCLUDED.physical_country_iso_2, sector_code = EXCLUDED.sector_code, birth_date = EXCLUDED.birth_date
DEBUG:  There are 1501 rows in import_hovedenhet_2018_data
DEBUG:  Reset user context to original user 5625d86b-1e1d-43fc-bfa1-eb3911635881
DEBUG:  Rescheduled import job 20 for further processing
DEBUG:  Task 547 (import_job_process) completed in 22.208000 ms
DEBUG:  Set user context to 5625d86b-1e1d-43fc-bfa1-eb3911635881 for import job 21
DEBUG:  Preparing import job 21 by moving data from import_underenhet_2015_upload to import_underenhet_2015_data
DEBUG:  Executing upsert: INSERT INTO public.import_underenhet_2015_data (tax_ident, name, primary_activity_category_code, secondary_activity_category_code, postal_address_part1, postal_postplace, postal_postcode, postal_region_code, postal_country_iso_2, physical_address_part1, physical_postplace, physical_postcode, physical_region_code, physical_country_iso_2, birth_date, legal_unit_tax_ident, death_date, valid_from, valid_to) SELECT NULLIF(organisasjonsnummer,''), NULLIF(navn,''), NULLIF("naeringskode1.kode",''), NULLIF("naeringskode2.kode",''), NULLIF("postadresse.adresse",''), NULLIF("postadresse.poststed",''), NULLIF("postadresse.postnummer",''), NULLIF("postadresse.kommunenummer",''), NULLIF("postadresse.landkode",''), NULLIF("beliggenhetsadresse.adresse",''), NULLIF("beliggenhetsadresse.poststed",''), NULLIF("beliggenhetsadresse.postnummer",''), NULLIF("beliggenhetsadresse.kommunenummer",''), NULLIF("beliggenhetsadresse.landkode",''), NULLIF(oppstartsdato,''), NULLIF("overordnetEnhet",''), NULLIF(nedleggelsesdato,''), '01-01-2015', 'infinity' FROM public.import_underenhet_2015_upload  ON CONFLICT (tax_ident) DO UPDATE SET name = EXCLUDED.name, primary_activity_category_code = EXCLUDED.primary_activity_category_code, secondary_activity_category_code = EXCLUDED.secondary_activity_category_code, postal_address_part1 = EXCLUDED.postal_address_part1, postal_postplace = EXCLUDED.postal_postplace, postal_postcode = EXCLUDED.postal_postcode, postal_region_code = EXCLUDED.postal_region_code, postal_country_iso_2 = EXCLUDED.postal_country_iso_2, physical_address_part1 = EXCLUDED.physical_address_part1, physical_postplace = EXCLUDED.physical_postplace, physical_postcode = EXCLUDED.physical_postcode, physical_region_code = EXCLUDED.physical_region_code, physical_country_iso_2 = EXCLUDED.physical_country_iso_2, birth_date = EXCLUDED.birth_date, legal_unit_tax_ident = EXCLUDED.legal_unit_tax_ident, death_date = EXCLUDED.death_date
DEBUG:  There are 1030 rows in import_underenhet_2015_data
DEBUG:  Reset user context to original user 5625d86b-1e1d-43fc-bfa1-eb3911635881
DEBUG:  Rescheduled import job 21 for further processing
DEBUG:  Task 548 (import_job_process) completed in 15.112000 ms
DEBUG:  Set user context to 5625d86b-1e1d-43fc-bfa1-eb3911635881 for import job 22
DEBUG:  Preparing import job 22 by moving data from import_underenhet_2016_upload to import_underenhet_2016_data
DEBUG:  Executing upsert: INSERT INTO public.import_underenhet_2016_data (tax_ident, name, primary_activity_category_code, secondary_activity_category_code, postal_address_part1, postal_postplace, postal_postcode, postal_region_code, postal_country_iso_2, physical_address_part1, physical_postplace, physical_postcode, physical_region_code, physical_country_iso_2, birth_date, legal_unit_tax_ident, death_date, valid_from, valid_to) SELECT NULLIF(organisasjonsnummer,''), NULLIF(navn,''), NULLIF("naeringskode1.kode",''), NULLIF("naeringskode2.kode",''), NULLIF("postadresse.adresse",''), NULLIF("postadresse.poststed",''), NULLIF("postadresse.postnummer",''), NULLIF("postadresse.kommunenummer",''), NULLIF("postadresse.landkode",''), NULLIF("beliggenhetsadresse.adresse",''), NULLIF("beliggenhetsadresse.poststed",''), NULLIF("beliggenhetsadresse.postnummer",''), NULLIF("beliggenhetsadresse.kommunenummer",''), NULLIF("beliggenhetsadresse.landkode",''), NULLIF(oppstartsdato,''), NULLIF("overordnetEnhet",''), NULLIF(nedleggelsesdato,''), '01-01-2016', 'infinity' FROM public.import_underenhet_2016_upload  ON CONFLICT (tax_ident) DO UPDATE SET name = EXCLUDED.name, primary_activity_category_code = EXCLUDED.primary_activity_category_code, secondary_activity_category_code = EXCLUDED.secondary_activity_category_code, postal_address_part1 = EXCLUDED.postal_address_part1, postal_postplace = EXCLUDED.postal_postplace, postal_postcode = EXCLUDED.postal_postcode, postal_region_code = EXCLUDED.postal_region_code, postal_country_iso_2 = EXCLUDED.postal_country_iso_2, physical_address_part1 = EXCLUDED.physical_address_part1, physical_postplace = EXCLUDED.physical_postplace, physical_postcode = EXCLUDED.physical_postcode, physical_region_code = EXCLUDED.physical_region_code, physical_country_iso_2 = EXCLUDED.physical_country_iso_2, birth_date = EXCLUDED.birth_date, legal_unit_tax_ident = EXCLUDED.legal_unit_tax_ident, death_date = EXCLUDED.death_date
DEBUG:  There are 1031 rows in import_underenhet_2016_data
DEBUG:  Reset user context to original user 5625d86b-1e1d-43fc-bfa1-eb3911635881
DEBUG:  Rescheduled import job 22 for further processing
DEBUG:  Task 549 (import_job_process) completed in 16.718000 ms
DEBUG:  Set user context to 5625d86b-1e1d-43fc-bfa1-eb3911635881 for import job 23
DEBUG:  Preparing import job 23 by moving data from import_underenhet_2017_upload to import_underenhet_2017_data
DEBUG:  Executing upsert: INSERT INTO public.import_underenhet_2017_data (tax_ident, name, primary_activity_category_code, secondary_activity_category_code, postal_address_part1, postal_postplace, postal_postcode, postal_region_code, postal_country_iso_2, physical_address_part1, physical_postplace, physical_postcode, physical_region_code, physical_country_iso_2, birth_date, legal_unit_tax_ident, death_date, valid_from, valid_to) SELECT NULLIF(organisasjonsnummer,''), NULLIF(navn,''), NULLIF("naeringskode1.kode",''), NULLIF("naeringskode2.kode",''), NULLIF("postadresse.adresse",''), NULLIF("postadresse.poststed",''), NULLIF("postadresse.postnummer",''), NULLIF("postadresse.kommunenummer",''), NULLIF("postadresse.landkode",''), NULLIF("beliggenhetsadresse.adresse",''), NULLIF("beliggenhetsadresse.poststed",''), NULLIF("beliggenhetsadresse.postnummer",''), NULLIF("beliggenhetsadresse.kommunenummer",''), NULLIF("beliggenhetsadresse.landkode",''), NULLIF(oppstartsdato,''), NULLIF("overordnetEnhet",''), NULLIF(nedleggelsesdato,''), '01-01-2017', 'infinity' FROM public.import_underenhet_2017_upload  ON CONFLICT (tax_ident) DO UPDATE SET name = EXCLUDED.name, primary_activity_category_code = EXCLUDED.primary_activity_category_code, secondary_activity_category_code = EXCLUDED.secondary_activity_category_code, postal_address_part1 = EXCLUDED.postal_address_part1, postal_postplace = EXCLUDED.postal_postplace, postal_postcode = EXCLUDED.postal_postcode, postal_region_code = EXCLUDED.postal_region_code, postal_country_iso_2 = EXCLUDED.postal_country_iso_2, physical_address_part1 = EXCLUDED.physical_address_part1, physical_postplace = EXCLUDED.physical_postplace, physical_postcode = EXCLUDED.physical_postcode, physical_region_code = EXCLUDED.physical_region_code, physical_country_iso_2 = EXCLUDED.physical_country_iso_2, birth_date = EXCLUDED.birth_date, legal_unit_tax_ident = EXCLUDED.legal_unit_tax_ident, death_date = EXCLUDED.death_date
DEBUG:  There are 1218 rows in import_underenhet_2017_data
DEBUG:  Reset user context to original user 5625d86b-1e1d-43fc-bfa1-eb3911635881
DEBUG:  Rescheduled import job 23 for further processing
DEBUG:  Task 550 (import_job_process) completed in 16.315000 ms
DEBUG:  Set user context to 5625d86b-1e1d-43fc-bfa1-eb3911635881 for import job 24
DEBUG:  Preparing import job 24 by moving data from import_underenhet_2018_upload to import_underenhet_2018_data
DEBUG:  Executing upsert: INSERT INTO public.import_underenhet_2018_data (tax_ident, name, primary_activity_category_code, secondary_activity_category_code, postal_address_part1, postal_postplace, postal_postcode, postal_region_code, postal_country_iso_2, physical_address_part1, physical_postplace, physical_postcode, physical_region_code, physical_country_iso_2, birth_date, legal_unit_tax_ident, death_date, valid_from, valid_to) SELECT NULLIF(organisasjonsnummer,''), NULLIF(navn,''), NULLIF("naeringskode1.kode",''), NULLIF("naeringskode2.kode",''), NULLIF("postadresse.adresse",''), NULLIF("postadresse.poststed",''), NULLIF("postadresse.postnummer",''), NULLIF("postadresse.kommunenummer",''), NULLIF("postadresse.landkode",''), NULLIF("beliggenhetsadresse.adresse",''), NULLIF("beliggenhetsadresse.poststed",''), NULLIF("beliggenhetsadresse.postnummer",''), NULLIF("beliggenhetsadresse.kommunenummer",''), NULLIF("beliggenhetsadresse.landkode",''), NULLIF(oppstartsdato,''), NULLIF("overordnetEnhet",''), NULLIF(nedleggelsesdato,''), '01-01-2018', 'infinity' FROM public.import_underenhet_2018_upload  ON CONFLICT (tax_ident) DO UPDATE SET name = EXCLUDED.name, primary_activity_category_code = EXCLUDED.primary_activity_category_code, secondary_activity_category_code = EXCLUDED.secondary_activity_category_code, postal_address_part1 = EXCLUDED.postal_address_part1, postal_postplace = EXCLUDED.postal_postplace, postal_postcode = EXCLUDED.postal_postcode, postal_region_code = EXCLUDED.postal_region_code, postal_country_iso_2 = EXCLUDED.postal_country_iso_2, physical_address_part1 = EXCLUDED.physical_address_part1, physical_postplace = EXCLUDED.physical_postplace, physical_postcode = EXCLUDED.physical_postcode, physical_region_code = EXCLUDED.physical_region_code, physical_country_iso_2 = EXCLUDED.physical_country_iso_2, birth_date = EXCLUDED.birth_date, legal_unit_tax_ident = EXCLUDED.legal_unit_tax_ident, death_date = EXCLUDED.death_date
DEBUG:  There are 1324 rows in import_underenhet_2018_data
DEBUG:  Reset user context to original user 5625d86b-1e1d-43fc-bfa1-eb3911635881
DEBUG:  Rescheduled import job 24 for further processing
DEBUG:  Task 551 (import_job_process) completed in 17.300000 ms
DEBUG:  Set user context to 5625d86b-1e1d-43fc-bfa1-eb3911635881 for import job 17
DEBUG:  Analyzing data for import job 17
DEBUG:  Reset user context to original user 5625d86b-1e1d-43fc-bfa1-eb3911635881
DEBUG:  Rescheduled import job 17 for further processing
DEBUG:  Task 552 (import_job_process) completed in 0.848000 ms
DEBUG:  Set user context to 5625d86b-1e1d-43fc-bfa1-eb3911635881 for import job 18
DEBUG:  Analyzing data for import job 18
DEBUG:  Reset user context to original user 5625d86b-1e1d-43fc-bfa1-eb3911635881
DEBUG:  Rescheduled import job 18 for further processing
DEBUG:  Task 553 (import_job_process) completed in 0.479000 ms
DEBUG:  Set user context to 5625d86b-1e1d-43fc-bfa1-eb3911635881 for import job 19
DEBUG:  Analyzing data for import job 19
DEBUG:  Reset user context to original user 5625d86b-1e1d-43fc-bfa1-eb3911635881
DEBUG:  Rescheduled import job 19 for further processing
DEBUG:  Task 554 (import_job_process) completed in 0.400000 ms
DEBUG:  Set user context to 5625d86b-1e1d-43fc-bfa1-eb3911635881 for import job 20
DEBUG:  Analyzing data for import job 20
DEBUG:  Reset user context to original user 5625d86b-1e1d-43fc-bfa1-eb3911635881
DEBUG:  Rescheduled import job 20 for further processing
DEBUG:  Task 555 (import_job_process) completed in 0.309000 ms
DEBUG:  Set user context to 5625d86b-1e1d-43fc-bfa1-eb3911635881 for import job 21
DEBUG:  Analyzing data for import job 21
DEBUG:  Reset user context to original user 5625d86b-1e1d-43fc-bfa1-eb3911635881
DEBUG:  Rescheduled import job 21 for further processing
DEBUG:  Task 556 (import_job_process) completed in 0.304000 ms
DEBUG:  Set user context to 5625d86b-1e1d-43fc-bfa1-eb3911635881 for import job 22
DEBUG:  Analyzing data for import job 22
DEBUG:  Reset user context to original user 5625d86b-1e1d-43fc-bfa1-eb3911635881
DEBUG:  Rescheduled import job 22 for further processing
DEBUG:  Task 557 (import_job_process) completed in 0.285000 ms
DEBUG:  Set user context to 5625d86b-1e1d-43fc-bfa1-eb3911635881 for import job 23
DEBUG:  Analyzing data for import job 23
DEBUG:  Reset user context to original user 5625d86b-1e1d-43fc-bfa1-eb3911635881
DEBUG:  Rescheduled import job 23 for further processing
DEBUG:  Task 558 (import_job_process) completed in 0.309000 ms
DEBUG:  Set user context to 5625d86b-1e1d-43fc-bfa1-eb3911635881 for import job 24
DEBUG:  Analyzing data for import job 24
DEBUG:  Reset user context to original user 5625d86b-1e1d-43fc-bfa1-eb3911635881
DEBUG:  Rescheduled import job 24 for further processing
DEBUG:  Task 559 (import_job_process) completed in 0.285000 ms
DEBUG:  Set user context to 5625d86b-1e1d-43fc-bfa1-eb3911635881 for import job 17
DEBUG:  IMPORT_JOB_INSERT: Starting import from import_hovedenhet_2015_data to public.import_legal_unit_era
DEBUG:  IMPORT_JOB_INSERT: Target columns: tax_ident,name,legal_form_code,primary_activity_category_code,secondary_activity_category_code,postal_address_part1,postal_postplace,postal_postcode,postal_region_code,postal_country_iso_2,physical_address_part1,physical_postplace,physical_postcode,physical_region_code,physical_country_iso_2,sector_code,birth_date,valid_from,valid_to
DEBUG:  IMPORT_JOB_INSERT: Uniquely identifying columns: tax_ident
DEBUG:  IMPORT_JOB_INSERT: Initial state - Pending: 1000, Processing: 0, Imported: 0, Error: 0
DEBUG:  IMPORT_JOB_INSERT: Starting batch processing with 1000 pending rows
DEBUG:  IMPORT_JOB_INSERT: Starting new batch, remaining rows: 1000
DEBUG:  IMPORT_JOB_INSERT: Marking batch SQL: 
                    UPDATE public.import_hovedenhet_2015_data
                    SET state = 'importing'
                    WHERE state = 'pending'
                    AND ctid IN (
                        SELECT ctid
                        FROM public.import_hovedenhet_2015_data
                        WHERE state = 'pending'
                        ORDER BY tax_ident
                        LIMIT 1000
                    );
                
DEBUG:  IMPORT_JOB_INSERT: Marked 1000 rows as processing
DEBUG:  IMPORT_JOB_INSERT: Batch insert SQL: 
                WITH batch AS (
                    SELECT tax_ident,name,legal_form_code,primary_activity_category_code,secondary_activity_category_code,postal_address_part1,postal_postplace,postal_postcode,postal_region_code,postal_country_iso_2,physical_address_part1,physical_postplace,physical_postcode,physical_region_code,physical_country_iso_2,sector_code,birth_date,valid_from,valid_to, ctid AS source_ctid
                    FROM public.import_hovedenhet_2015_data
                    WHERE state = 'importing'
                    ORDER BY tax_ident
                    FOR UPDATE
                ),
                inserted AS (
                    INSERT INTO public.import_legal_unit_era (tax_ident,name,legal_form_code,primary_activity_category_code,secondary_activity_category_code,postal_address_part1,postal_postplace,postal_postcode,postal_region_code,postal_country_iso_2,physical_address_part1,physical_postplace,physical_postcode,physical_region_code,physical_country_iso_2,sector_code,birth_date,valid_from,valid_to)
                    SELECT tax_ident,name,legal_form_code,primary_activity_category_code,secondary_activity_category_code,postal_address_part1,postal_postplace,postal_postcode,postal_region_code,postal_country_iso_2,physical_address_part1,physical_postplace,physical_postcode,physical_region_code,physical_country_iso_2,sector_code,birth_date,valid_from,valid_to FROM batch
                    RETURNING 1 AS inserted_row
                )
                SELECT COUNT(*) FROM inserted;
            
DEBUG:  rehashing catalog cache id 32 for pg_index; 257 tups, 128 buckets
DEBUG:  UPSERT row {"id": null, "name": "LAFTERÅSEN UTBYGGING AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2013-04-22", "death_date": null, "short_name": null, "valid_from": "2015-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3168, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "LAFTERÅSEN UTBYGGING AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2013-04-22", "death_date": null, "short_name": null, "valid_from": "2015-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3168, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3168,"valid_after":null,"valid_from":"2015-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"LAFTERÅSEN UTBYGGING AS","birth_date":"2013-04-22","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3168,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  rehashing catalog cache id 45 for pg_proc; 257 tups, 128 buckets
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3168
DEBUG:  legal_unit row: {"id":3168,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"LAFTERÅSEN UTBYGGING AS","birth_date":"2013-04-22","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3168,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3611", "valid_to": "infinity", "longitude": null, "postplace": "KONGSBERG", "region_id": 6827, "country_id": 167, "valid_from": "2015-01-01", "valid_after": null, "edit_comment": null, "address_part1": "c/o Block Watne AS/nHerman Foss gate 6C", "address_part2": null, "address_part3": null, "legal_unit_id": 3168, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  rehashing catalog cache id 6 for pg_attribute; 65 tups, 32 buckets
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3611", "valid_to": "infinity", "longitude": null, "postplace": "KONGSBERG", "region_id": 6827, "country_id": 167, "valid_from": "2015-01-01", "edit_comment": null, "address_part1": "c/o Block Watne AS/nHerman Foss gate 6C", "address_part2": null, "address_part3": null, "legal_unit_id": 3168, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7495
DEBUG:  location row: {"id":7495,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"physical","address_part1":"c/o Block Watne AS/nHerman Foss gate 6C","address_part2":null,"address_part3":null,"postcode":"3611","postplace":"KONGSBERG","region_id":6827,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3168,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "0129", "valid_to": "infinity", "longitude": null, "postplace": "OSLO", "region_id": 6701, "country_id": 167, "valid_from": "2015-01-01", "valid_after": null, "edit_comment": null, "address_part1": "C/O Block Watne AS/nPB 6666 St. Olavs Plass", "address_part2": null, "address_part3": null, "legal_unit_id": 3168, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "0129", "valid_to": "infinity", "longitude": null, "postplace": "OSLO", "region_id": 6701, "country_id": 167, "valid_from": "2015-01-01", "edit_comment": null, "address_part1": "C/O Block Watne AS/nPB 6666 St. Olavs Plass", "address_part2": null, "address_part3": null, "legal_unit_id": 3168, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7496
DEBUG:  location row: {"id":7496,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"postal","address_part1":"C/O Block Watne AS/nPB 6666 St. Olavs Plass","address_part2":null,"address_part3":null,"postcode":"0129","postplace":"OSLO","region_id":6701,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3168,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2015-01-01", "category_id": 31599, "valid_after": null, "edit_comment": null, "legal_unit_id": 3168, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  rehashing catalog cache id 12 for pg_cast; 1025 tups, 512 buckets
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2015-01-01", "category_id": 31599, "edit_comment": null, "legal_unit_id": 3168, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5951
DEBUG:  activity row: {"id":5951,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"primary","category_id":31599,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3168}
DEBUG:  DEBUG: Selecting from public.activity where id = 5951
DEBUG:  activity row: {"id":5951,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"primary","category_id":31599,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3168}
DEBUG:  UPSERT row {"id": null, "name": "KJÆREVIK HOLDING AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2013-05-28", "death_date": null, "short_name": null, "valid_from": "2015-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3169, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "KJÆREVIK HOLDING AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2013-05-28", "death_date": null, "short_name": null, "valid_from": "2015-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3169, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3169,"valid_after":null,"valid_from":"2015-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"KJÆREVIK HOLDING AS","birth_date":"2013-05-28","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3169,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3169
DEBUG:  legal_unit row: {"id":3169,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"KJÆREVIK HOLDING AS","birth_date":"2013-05-28","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3169,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "5636", "valid_to": "infinity", "longitude": null, "postplace": "VARALDSØY", "region_id": 6946, "country_id": 167, "valid_from": "2015-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Kjæraviksvegen 200", "address_part2": null, "address_part3": null, "legal_unit_id": 3169, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "5636", "valid_to": "infinity", "longitude": null, "postplace": "VARALDSØY", "region_id": 6946, "country_id": 167, "valid_from": "2015-01-01", "edit_comment": null, "address_part1": "Kjæraviksvegen 200", "address_part2": null, "address_part3": null, "legal_unit_id": 3169, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7497
DEBUG:  location row: {"id":7497,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"physical","address_part1":"Kjæraviksvegen 200","address_part2":null,"address_part3":null,"postcode":"5636","postplace":"VARALDSØY","region_id":6946,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3169,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7497
DEBUG:  location row: {"id":7497,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"physical","address_part1":"Kjæraviksvegen 200","address_part2":null,"address_part3":null,"postcode":"5636","postplace":"VARALDSØY","region_id":6946,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3169,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2015-01-01", "category_id": 32171, "valid_after": null, "edit_comment": null, "legal_unit_id": 3169, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2015-01-01", "category_id": 32171, "edit_comment": null, "legal_unit_id": 3169, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5952
DEBUG:  activity row: {"id":5952,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"primary","category_id":32171,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3169}
DEBUG:  DEBUG: Selecting from public.activity where id = 5952
DEBUG:  activity row: {"id":5952,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"primary","category_id":32171,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3169}
DEBUG:  UPSERT row {"id": null, "name": "CANASTA AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 583, "status_id": 1, "birth_date": "2014-01-22", "death_date": null, "short_name": null, "valid_from": "2015-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3170, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "CANASTA AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 583, "status_id": 1, "birth_date": "2014-01-22", "death_date": null, "short_name": null, "valid_from": "2015-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3170, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3170,"valid_after":null,"valid_from":"2015-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"CANASTA AS","birth_date":"2014-01-22","death_date":null,"free_econ_zone":null,"sector_id":583,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3170,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3170
DEBUG:  legal_unit row: {"id":3170,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"CANASTA AS","birth_date":"2014-01-22","death_date":null,"free_econ_zone":null,"sector_id":583,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3170,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "6421", "valid_to": "infinity", "longitude": null, "postplace": "MOLDE", "region_id": 6726, "country_id": 167, "valid_from": "2015-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Krohnhøgda 8", "address_part2": null, "address_part3": null, "legal_unit_id": 3170, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "6421", "valid_to": "infinity", "longitude": null, "postplace": "MOLDE", "region_id": 6726, "country_id": 167, "valid_from": "2015-01-01", "edit_comment": null, "address_part1": "Krohnhøgda 8", "address_part2": null, "address_part3": null, "legal_unit_id": 3170, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7498
DEBUG:  location row: {"id":7498,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"physical","address_part1":"Krohnhøgda 8","address_part2":null,"address_part3":null,"postcode":"6421","postplace":"MOLDE","region_id":6726,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3170,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7498
DEBUG:  location row: {"id":7498,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"physical","address_part1":"Krohnhøgda 8","address_part2":null,"address_part3":null,"postcode":"6421","postplace":"MOLDE","region_id":6726,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3170,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2015-01-01", "category_id": 32125, "valid_after": null, "edit_comment": null, "legal_unit_id": 3170, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2015-01-01", "category_id": 32125, "edit_comment": null, "legal_unit_id": 3170, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5953
DEBUG:  activity row: {"id":5953,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"primary","category_id":32125,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3170}
DEBUG:  DEBUG: Selecting from public.activity where id = 5953
DEBUG:  activity row: {"id":5953,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"primary","category_id":32125,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3170}
DEBUG:  UPSERT row {"id": null, "name": "REED PROJECTS AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2014-06-13", "death_date": null, "short_name": null, "valid_from": "2015-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3171, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "REED PROJECTS AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2014-06-13", "death_date": null, "short_name": null, "valid_from": "2015-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3171, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3171,"valid_after":null,"valid_from":"2015-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"REED PROJECTS AS","birth_date":"2014-06-13","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3171,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3171
DEBUG:  legal_unit row: {"id":3171,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"REED PROJECTS AS","birth_date":"2014-06-13","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3171,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "4014", "valid_to": "infinity", "longitude": null, "postplace": "STAVANGER", "region_id": 6703, "country_id": 167, "valid_from": "2015-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Kvitsøygata 25", "address_part2": null, "address_part3": null, "legal_unit_id": 3171, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "4014", "valid_to": "infinity", "longitude": null, "postplace": "STAVANGER", "region_id": 6703, "country_id": 167, "valid_from": "2015-01-01", "edit_comment": null, "address_part1": "Kvitsøygata 25", "address_part2": null, "address_part3": null, "legal_unit_id": 3171, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7499
DEBUG:  location row: {"id":7499,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"physical","address_part1":"Kvitsøygata 25","address_part2":null,"address_part3":null,"postcode":"4014","postplace":"STAVANGER","region_id":6703,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3171,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "4014", "valid_to": "infinity", "longitude": null, "postplace": "STAVANGER", "region_id": 6703, "country_id": 167, "valid_from": "2015-01-01", "valid_after": null, "edit_comment": null, "address_part1": "TOU/nPostboks 1590 Kjelvene", "address_part2": null, "address_part3": null, "legal_unit_id": 3171, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "4014", "valid_to": "infinity", "longitude": null, "postplace": "STAVANGER", "region_id": 6703, "country_id": 167, "valid_from": "2015-01-01", "edit_comment": null, "address_part1": "TOU/nPostboks 1590 Kjelvene", "address_part2": null, "address_part3": null, "legal_unit_id": 3171, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7500
DEBUG:  location row: {"id":7500,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"postal","address_part1":"TOU/nPostboks 1590 Kjelvene","address_part2":null,"address_part3":null,"postcode":"4014","postplace":"STAVANGER","region_id":6703,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3171,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2015-01-01", "category_id": 31896, "valid_after": null, "edit_comment": null, "legal_unit_id": 3171, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2015-01-01", "category_id": 31896, "edit_comment": null, "legal_unit_id": 3171, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5954
DEBUG:  activity row: {"id":5954,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"primary","category_id":31896,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3171}
DEBUG:  DEBUG: Selecting from public.activity where id = 5954
DEBUG:  activity row: {"id":5954,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"primary","category_id":31896,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3171}
DEBUG:  UPSERT row {"id": null, "name": "THRINO SA", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2014-08-26", "death_date": null, "short_name": null, "valid_from": "2015-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3172, "invalid_codes": null, "legal_form_id": 837, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "THRINO SA", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2014-08-26", "death_date": null, "short_name": null, "valid_from": "2015-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3172, "invalid_codes": null, "legal_form_id": 837, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3172,"valid_after":null,"valid_from":"2015-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"THRINO SA","birth_date":"2014-08-26","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":837,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3172,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3172
DEBUG:  legal_unit row: {"id":3172,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"THRINO SA","birth_date":"2014-08-26","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":837,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3172,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3132", "valid_to": "infinity", "longitude": null, "postplace": "HUSØYSUND", "region_id": 6895, "country_id": 167, "valid_from": "2015-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Bjørnebuveien 21A", "address_part2": null, "address_part3": null, "legal_unit_id": 3172, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3132", "valid_to": "infinity", "longitude": null, "postplace": "HUSØYSUND", "region_id": 6895, "country_id": 167, "valid_from": "2015-01-01", "edit_comment": null, "address_part1": "Bjørnebuveien 21A", "address_part2": null, "address_part3": null, "legal_unit_id": 3172, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7501
DEBUG:  location row: {"id":7501,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"physical","address_part1":"Bjørnebuveien 21A","address_part2":null,"address_part3":null,"postcode":"3132","postplace":"HUSØYSUND","region_id":6895,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3172,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7501
DEBUG:  location row: {"id":7501,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"physical","address_part1":"Bjørnebuveien 21A","address_part2":null,"address_part3":null,"postcode":"3132","postplace":"HUSØYSUND","region_id":6895,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3172,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2015-01-01", "category_id": 32090, "valid_after": null, "edit_comment": null, "legal_unit_id": 3172, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2015-01-01", "category_id": 32090, "edit_comment": null, "legal_unit_id": 3172, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5955
DEBUG:  activity row: {"id":5955,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"primary","category_id":32090,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3172}
DEBUG:  DEBUG: Selecting from public.activity where id = 5955
DEBUG:  activity row: {"id":5955,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"primary","category_id":32090,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3172}
DEBUG:  UPSERT row {"id": null, "name": "VEGANMISJONEN JANE HELEN JOHANSEN", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2015-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3173, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "VEGANMISJONEN JANE HELEN JOHANSEN", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2015-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3173, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3173,"valid_after":null,"valid_from":"2015-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"VEGANMISJONEN JANE HELEN JOHANSEN","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3173,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3173
DEBUG:  legal_unit row: {"id":3173,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"VEGANMISJONEN JANE HELEN JOHANSEN","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3173,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3924", "valid_to": "infinity", "longitude": null, "postplace": "PORSGRUNN", "region_id": 6896, "country_id": 167, "valid_from": "2015-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Grønlihamna 12", "address_part2": null, "address_part3": null, "legal_unit_id": 3173, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3924", "valid_to": "infinity", "longitude": null, "postplace": "PORSGRUNN", "region_id": 6896, "country_id": 167, "valid_from": "2015-01-01", "edit_comment": null, "address_part1": "Grønlihamna 12", "address_part2": null, "address_part3": null, "legal_unit_id": 3173, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7502
DEBUG:  location row: {"id":7502,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"physical","address_part1":"Grønlihamna 12","address_part2":null,"address_part3":null,"postcode":"3924","postplace":"PORSGRUNN","region_id":6896,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3173,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7502
DEBUG:  location row: {"id":7502,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"physical","address_part1":"Grønlihamna 12","address_part2":null,"address_part3":null,"postcode":"3924","postplace":"PORSGRUNN","region_id":6896,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3173,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2015-01-01", "category_id": 32505, "valid_after": null, "edit_comment": null, "legal_unit_id": 3173, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2015-01-01", "category_id": 32505, "edit_comment": null, "legal_unit_id": 3173, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5956
DEBUG:  activity row: {"id":5956,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"primary","category_id":32505,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3173}
DEBUG:  DEBUG: Selecting from public.activity where id = 5956
DEBUG:  activity row: {"id":5956,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"primary","category_id":32505,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3173}
DEBUG:  UPSERT row {"id": null, "name": "ALMÅS BYGG OG SNEKKERSERVICE", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2015-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3174, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "ALMÅS BYGG OG SNEKKERSERVICE", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2015-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3174, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3174,"valid_after":null,"valid_from":"2015-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"ALMÅS BYGG OG SNEKKERSERVICE","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3174,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3174
DEBUG:  legal_unit row: {"id":3174,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"ALMÅS BYGG OG SNEKKERSERVICE","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3174,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3160", "valid_to": "infinity", "longitude": null, "postplace": "STOKKE", "region_id": 6893, "country_id": 167, "valid_from": "2015-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Elgveien 13", "address_part2": null, "address_part3": null, "legal_unit_id": 3174, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3160", "valid_to": "infinity", "longitude": null, "postplace": "STOKKE", "region_id": 6893, "country_id": 167, "valid_from": "2015-01-01", "edit_comment": null, "address_part1": "Elgveien 13", "address_part2": null, "address_part3": null, "legal_unit_id": 3174, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7503
DEBUG:  location row: {"id":7503,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"physical","address_part1":"Elgveien 13","address_part2":null,"address_part3":null,"postcode":"3160","postplace":"STOKKE","region_id":6893,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3174,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7503
DEBUG:  location row: {"id":7503,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"physical","address_part1":"Elgveien 13","address_part2":null,"address_part3":null,"postcode":"3160","postplace":"STOKKE","region_id":6893,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3174,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2015-01-01", "category_id": 31602, "valid_after": null, "edit_comment": null, "legal_unit_id": 3174, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2015-01-01", "category_id": 31602, "edit_comment": null, "legal_unit_id": 3174, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5957
DEBUG:  activity row: {"id":5957,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"primary","category_id":31602,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3174}
DEBUG:  DEBUG: Selecting from public.activity where id = 5957
DEBUG:  activity row: {"id":5957,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"primary","category_id":31602,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3174}
DEBUG:  UPSERT row {"id": null, "name": "MICROLOG AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2015-05-26", "death_date": null, "short_name": null, "valid_from": "2015-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3175, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "MICROLOG AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2015-05-26", "death_date": null, "short_name": null, "valid_from": "2015-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3175, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3175,"valid_after":null,"valid_from":"2015-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"MICROLOG AS","birth_date":"2015-05-26","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3175,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3175
DEBUG:  legal_unit row: {"id":3175,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"MICROLOG AS","birth_date":"2015-05-26","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3175,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "1405", "valid_to": "infinity", "longitude": null, "postplace": "LANGHUS", "region_id": 6808, "country_id": 167, "valid_from": "2015-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Parkveien 23", "address_part2": null, "address_part3": null, "legal_unit_id": 3175, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "1405", "valid_to": "infinity", "longitude": null, "postplace": "LANGHUS", "region_id": 6808, "country_id": 167, "valid_from": "2015-01-01", "edit_comment": null, "address_part1": "Parkveien 23", "address_part2": null, "address_part3": null, "legal_unit_id": 3175, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7504
DEBUG:  location row: {"id":7504,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"physical","address_part1":"Parkveien 23","address_part2":null,"address_part3":null,"postcode":"1405","postplace":"LANGHUS","region_id":6808,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3175,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7504
DEBUG:  location row: {"id":7504,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"physical","address_part1":"Parkveien 23","address_part2":null,"address_part3":null,"postcode":"1405","postplace":"LANGHUS","region_id":6808,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3175,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2015-01-01", "category_id": 31778, "valid_after": null, "edit_comment": null, "legal_unit_id": 3175, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2015-01-01", "category_id": 31778, "edit_comment": null, "legal_unit_id": 3175, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5958
DEBUG:  activity row: {"id":5958,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"primary","category_id":31778,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3175}
DEBUG:  DEBUG: Selecting from public.activity where id = 5958
DEBUG:  activity row: {"id":5958,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"primary","category_id":31778,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3175}
DEBUG:  UPSERT row {"id": null, "name": "HELLERUDLIA AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2015-05-20", "death_date": null, "short_name": null, "valid_from": "2015-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3176, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "HELLERUDLIA AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2015-05-20", "death_date": null, "short_name": null, "valid_from": "2015-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3176, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3176,"valid_after":null,"valid_from":"2015-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"HELLERUDLIA AS","birth_date":"2015-05-20","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3176,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3176
DEBUG:  legal_unit row: {"id":3176,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"HELLERUDLIA AS","birth_date":"2015-05-20","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3176,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3045", "valid_to": "infinity", "longitude": null, "postplace": "DRAMMEN", "region_id": 6826, "country_id": 167, "valid_from": "2015-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Grønland 67", "address_part2": null, "address_part3": null, "legal_unit_id": 3176, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3045", "valid_to": "infinity", "longitude": null, "postplace": "DRAMMEN", "region_id": 6826, "country_id": 167, "valid_from": "2015-01-01", "edit_comment": null, "address_part1": "Grønland 67", "address_part2": null, "address_part3": null, "legal_unit_id": 3176, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7505
DEBUG:  location row: {"id":7505,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"physical","address_part1":"Grønland 67","address_part2":null,"address_part3":null,"postcode":"3045","postplace":"DRAMMEN","region_id":6826,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3176,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3001", "valid_to": "infinity", "longitude": null, "postplace": "DRAMMEN", "region_id": 6826, "country_id": 167, "valid_from": "2015-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Postboks 323 Bragernes", "address_part2": null, "address_part3": null, "legal_unit_id": 3176, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3001", "valid_to": "infinity", "longitude": null, "postplace": "DRAMMEN", "region_id": 6826, "country_id": 167, "valid_from": "2015-01-01", "edit_comment": null, "address_part1": "Postboks 323 Bragernes", "address_part2": null, "address_part3": null, "legal_unit_id": 3176, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7506
DEBUG:  location row: {"id":7506,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"postal","address_part1":"Postboks 323 Bragernes","address_part2":null,"address_part3":null,"postcode":"3001","postplace":"DRAMMEN","region_id":6826,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3176,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2015-01-01", "category_id": 31599, "valid_after": null, "edit_comment": null, "legal_unit_id": 3176, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2015-01-01", "category_id": 31599, "edit_comment": null, "legal_unit_id": 3176, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5959
DEBUG:  activity row: {"id":5959,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"primary","category_id":31599,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3176}
DEBUG:  DEBUG: Selecting from public.activity where id = 5959
DEBUG:  activity row: {"id":5959,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"primary","category_id":31599,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3176}
DEBUG:  UPSERT row {"id": null, "name": "LEGE ASLAK JOHANSEN", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2015-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3177, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "LEGE ASLAK JOHANSEN", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2015-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3177, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3177,"valid_after":null,"valid_from":"2015-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"LEGE ASLAK JOHANSEN","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3177,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3177
DEBUG:  legal_unit row: {"id":3177,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"LEGE ASLAK JOHANSEN","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3177,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "7654", "valid_to": "infinity", "longitude": null, "postplace": "VERDAL", "region_id": 7000, "country_id": 167, "valid_from": "2015-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Grustaket 4B", "address_part2": null, "address_part3": null, "legal_unit_id": 3177, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "7654", "valid_to": "infinity", "longitude": null, "postplace": "VERDAL", "region_id": 7000, "country_id": 167, "valid_from": "2015-01-01", "edit_comment": null, "address_part1": "Grustaket 4B", "address_part2": null, "address_part3": null, "legal_unit_id": 3177, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7507
DEBUG:  location row: {"id":7507,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"physical","address_part1":"Grustaket 4B","address_part2":null,"address_part3":null,"postcode":"7654","postplace":"VERDAL","region_id":7000,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3177,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7507
DEBUG:  location row: {"id":7507,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"physical","address_part1":"Grustaket 4B","address_part2":null,"address_part3":null,"postcode":"7654","postplace":"VERDAL","region_id":7000,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3177,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2015-01-01", "category_id": 32429, "valid_after": null, "edit_comment": null, "legal_unit_id": 3177, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2015-01-01", "category_id": 32429, "edit_comment": null, "legal_unit_id": 3177, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5960
DEBUG:  activity row: {"id":5960,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"primary","category_id":32429,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3177}
DEBUG:  DEBUG: Selecting from public.activity where id = 5960
DEBUG:  activity row: {"id":5960,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"primary","category_id":32429,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3177}
DEBUG:  UPSERT row {"id": null, "name": "HYLKJE NÆRINGSBYGG 14 AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2016-10-12", "death_date": null, "short_name": null, "valid_from": "2015-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3178, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "HYLKJE NÆRINGSBYGG 14 AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2016-10-12", "death_date": null, "short_name": null, "valid_from": "2015-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3178, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3178,"valid_after":null,"valid_from":"2015-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"HYLKJE NÆRINGSBYGG 14 AS","birth_date":"2016-10-12","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3178,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3178
DEBUG:  legal_unit row: {"id":3178,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"HYLKJE NÆRINGSBYGG 14 AS","birth_date":"2016-10-12","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3178,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "5109", "valid_to": "infinity", "longitude": null, "postplace": "HYLKJE", "region_id": 6938, "country_id": 167, "valid_from": "2015-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Hylkjeflaten 32A", "address_part2": null, "address_part3": null, "legal_unit_id": 3178, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "5109", "valid_to": "infinity", "longitude": null, "postplace": "HYLKJE", "region_id": 6938, "country_id": 167, "valid_from": "2015-01-01", "edit_comment": null, "address_part1": "Hylkjeflaten 32A", "address_part2": null, "address_part3": null, "legal_unit_id": 3178, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7508
DEBUG:  location row: {"id":7508,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"physical","address_part1":"Hylkjeflaten 32A","address_part2":null,"address_part3":null,"postcode":"5109","postplace":"HYLKJE","region_id":6938,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3178,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7508
DEBUG:  location row: {"id":7508,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"physical","address_part1":"Hylkjeflaten 32A","address_part2":null,"address_part3":null,"postcode":"5109","postplace":"HYLKJE","region_id":6938,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3178,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2015-01-01", "category_id": 32171, "valid_after": null, "edit_comment": null, "legal_unit_id": 3178, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2015-01-01", "category_id": 32171, "edit_comment": null, "legal_unit_id": 3178, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5961
DEBUG:  activity row: {"id":5961,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"primary","category_id":32171,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3178}
DEBUG:  DEBUG: Selecting from public.activity where id = 5961
DEBUG:  activity row: {"id":5961,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"primary","category_id":32171,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3178}
DEBUG:  UPSERT row {"id": null, "name": "BRASØY BÅTFORENING", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 590, "status_id": 1, "birth_date": "1993-06-01", "death_date": null, "short_name": null, "valid_from": "2015-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3179, "invalid_codes": null, "legal_form_id": 819, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "BRASØY BÅTFORENING", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 590, "status_id": 1, "birth_date": "1993-06-01", "death_date": null, "short_name": null, "valid_from": "2015-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3179, "invalid_codes": null, "legal_form_id": 819, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3179,"valid_after":null,"valid_from":"2015-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"BRASØY BÅTFORENING","birth_date":"1993-06-01","death_date":null,"free_econ_zone":null,"sector_id":590,"status_id":1,"legal_form_id":819,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3179,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3179
DEBUG:  legal_unit row: {"id":3179,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"BRASØY BÅTFORENING","birth_date":"1993-06-01","death_date":null,"free_econ_zone":null,"sector_id":590,"status_id":1,"legal_form_id":819,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3179,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "8842", "valid_to": "infinity", "longitude": null, "postplace": "BRASØY", "region_id": 6759, "country_id": 167, "valid_from": "2015-01-01", "valid_after": null, "edit_comment": null, "address_part1": "c/o Svein G. Storholm/nVågveien 2", "address_part2": null, "address_part3": null, "legal_unit_id": 3179, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "8842", "valid_to": "infinity", "longitude": null, "postplace": "BRASØY", "region_id": 6759, "country_id": 167, "valid_from": "2015-01-01", "edit_comment": null, "address_part1": "c/o Svein G. Storholm/nVågveien 2", "address_part2": null, "address_part3": null, "legal_unit_id": 3179, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7509
DEBUG:  location row: {"id":7509,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"physical","address_part1":"c/o Svein G. Storholm/nVågveien 2","address_part2":null,"address_part3":null,"postcode":"8842","postplace":"BRASØY","region_id":6759,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3179,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7509
DEBUG:  location row: {"id":7509,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"physical","address_part1":"c/o Svein G. Storholm/nVågveien 2","address_part2":null,"address_part3":null,"postcode":"8842","postplace":"BRASØY","region_id":6759,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3179,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2015-01-01", "category_id": 32562, "valid_after": null, "edit_comment": null, "legal_unit_id": 3179, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2015-01-01", "category_id": 32562, "edit_comment": null, "legal_unit_id": 3179, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5962
DEBUG:  activity row: {"id":5962,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"primary","category_id":32562,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3179}
DEBUG:  DEBUG: Selecting from public.activity where id = 5962
DEBUG:  activity row: {"id":5962,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"primary","category_id":32562,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3179}
DEBUG:  UPSERT row {"id": null, "name": "SPORT OUTLET LILLEHAMMER 45 AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2017-08-10", "death_date": null, "short_name": null, "valid_from": "2015-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3180, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "SPORT OUTLET LILLEHAMMER 45 AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2017-08-10", "death_date": null, "short_name": null, "valid_from": "2015-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3180, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3180,"valid_after":null,"valid_from":"2015-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"SPORT OUTLET LILLEHAMMER 45 AS","birth_date":"2017-08-10","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3180,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3180
DEBUG:  legal_unit row: {"id":3180,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"SPORT OUTLET LILLEHAMMER 45 AS","birth_date":"2017-08-10","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3180,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "2619", "valid_to": "infinity", "longitude": null, "postplace": "LILLEHAMMER", "region_id": 6846, "country_id": 167, "valid_from": "2015-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Gudbrandsdalsvegen 188", "address_part2": null, "address_part3": null, "legal_unit_id": 3180, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "2619", "valid_to": "infinity", "longitude": null, "postplace": "LILLEHAMMER", "region_id": 6846, "country_id": 167, "valid_from": "2015-01-01", "edit_comment": null, "address_part1": "Gudbrandsdalsvegen 188", "address_part2": null, "address_part3": null, "legal_unit_id": 3180, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7510
DEBUG:  location row: {"id":7510,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"physical","address_part1":"Gudbrandsdalsvegen 188","address_part2":null,"address_part3":null,"postcode":"2619","postplace":"LILLEHAMMER","region_id":6846,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3180,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "5217", "valid_to": "infinity", "longitude": null, "postplace": "HAGAVIK", "region_id": 6953, "country_id": 167, "valid_from": "2015-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Ulvenvegen 344", "address_part2": null, "address_part3": null, "legal_unit_id": 3180, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "5217", "valid_to": "infinity", "longitude": null, "postplace": "HAGAVIK", "region_id": 6953, "country_id": 167, "valid_from": "2015-01-01", "edit_comment": null, "address_part1": "Ulvenvegen 344", "address_part2": null, "address_part3": null, "legal_unit_id": 3180, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7511
DEBUG:  location row: {"id":7511,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"postal","address_part1":"Ulvenvegen 344","address_part2":null,"address_part3":null,"postcode":"5217","postplace":"HAGAVIK","region_id":6953,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3180,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2015-01-01", "category_id": 31871, "valid_after": null, "edit_comment": null, "legal_unit_id": 3180, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2015-01-01", "category_id": 31871, "edit_comment": null, "legal_unit_id": 3180, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5963
DEBUG:  activity row: {"id":5963,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"primary","category_id":31871,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3180}
DEBUG:  DEBUG: Selecting from public.activity where id = 5963
DEBUG:  activity row: {"id":5963,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"primary","category_id":31871,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3180}
DEBUG:  UPSERT row {"id": null, "name": "ASBJØRN RØRVIK", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2015-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3181, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "ASBJØRN RØRVIK", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2015-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3181, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3181,"valid_after":null,"valid_from":"2015-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"ASBJØRN RØRVIK","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3181,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3181
DEBUG:  legal_unit row: {"id":3181,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"ASBJØRN RØRVIK","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3181,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "4006", "valid_to": "infinity", "longitude": null, "postplace": "STAVANGER", "region_id": 6703, "country_id": 167, "valid_from": "2015-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Leilighet 303/nKirkegata 37", "address_part2": null, "address_part3": null, "legal_unit_id": 3181, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "4006", "valid_to": "infinity", "longitude": null, "postplace": "STAVANGER", "region_id": 6703, "country_id": 167, "valid_from": "2015-01-01", "edit_comment": null, "address_part1": "Leilighet 303/nKirkegata 37", "address_part2": null, "address_part3": null, "legal_unit_id": 3181, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7512
DEBUG:  location row: {"id":7512,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"physical","address_part1":"Leilighet 303/nKirkegata 37","address_part2":null,"address_part3":null,"postcode":"4006","postplace":"STAVANGER","region_id":6703,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3181,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7512
DEBUG:  location row: {"id":7512,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"physical","address_part1":"Leilighet 303/nKirkegata 37","address_part2":null,"address_part3":null,"postcode":"4006","postplace":"STAVANGER","region_id":6703,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3181,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2015-01-01", "category_id": 32090, "valid_after": null, "edit_comment": null, "legal_unit_id": 3181, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2015-01-01", "category_id": 32090, "edit_comment": null, "legal_unit_id": 3181, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5964
DEBUG:  activity row: {"id":5964,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"primary","category_id":32090,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3181}
DEBUG:  DEBUG: Selecting from public.activity where id = 5964
DEBUG:  activity row: {"id":5964,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"primary","category_id":32090,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3181}
DEBUG:  UPSERT row {"id": null, "name": "BYGGMESTERFORBUNDET SALTEN", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 590, "status_id": 1, "birth_date": "2016-04-18", "death_date": null, "short_name": null, "valid_from": "2015-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3182, "invalid_codes": null, "legal_form_id": 819, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "BYGGMESTERFORBUNDET SALTEN", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 590, "status_id": 1, "birth_date": "2016-04-18", "death_date": null, "short_name": null, "valid_from": "2015-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3182, "invalid_codes": null, "legal_form_id": 819, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3182,"valid_after":null,"valid_from":"2015-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"BYGGMESTERFORBUNDET SALTEN","birth_date":"2016-04-18","death_date":null,"free_econ_zone":null,"sector_id":590,"status_id":1,"legal_form_id":819,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3182,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3182
DEBUG:  legal_unit row: {"id":3182,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"BYGGMESTERFORBUNDET SALTEN","birth_date":"2016-04-18","death_date":null,"free_econ_zone":null,"sector_id":590,"status_id":1,"legal_form_id":819,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3182,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "9042", "valid_to": "infinity", "longitude": null, "postplace": "LAKSVATN", "region_id": 7032, "country_id": 167, "valid_from": "2015-01-01", "valid_after": null, "edit_comment": null, "address_part1": "c/o Bård Vegard Skogli/nSelnesveien 1221", "address_part2": null, "address_part3": null, "legal_unit_id": 3182, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "9042", "valid_to": "infinity", "longitude": null, "postplace": "LAKSVATN", "region_id": 7032, "country_id": 167, "valid_from": "2015-01-01", "edit_comment": null, "address_part1": "c/o Bård Vegard Skogli/nSelnesveien 1221", "address_part2": null, "address_part3": null, "legal_unit_id": 3182, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7513
DEBUG:  location row: {"id":7513,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"physical","address_part1":"c/o Bård Vegard Skogli/nSelnesveien 1221","address_part2":null,"address_part3":null,"postcode":"9042","postplace":"LAKSVATN","region_id":7032,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3182,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7513
DEBUG:  location row: {"id":7513,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"physical","address_part1":"c/o Bård Vegard Skogli/nSelnesveien 1221","address_part2":null,"address_part3":null,"postcode":"9042","postplace":"LAKSVATN","region_id":7032,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3182,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2015-01-01", "category_id": 32552, "valid_after": null, "edit_comment": null, "legal_unit_id": 3182, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2015-01-01", "category_id": 32552, "edit_comment": null, "legal_unit_id": 3182, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5965
DEBUG:  activity row: {"id":5965,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"primary","category_id":32552,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3182}
DEBUG:  DEBUG: Selecting from public.activity where id = 5965
DEBUG:  activity row: {"id":5965,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","type":"primary","category_id":32552,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3182}
DEBUG:  UPSERT row {"id": null, "name": "HELSEHUSETS VENNER", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 590, "status_id": 1, "birth_date": "2018-02-07", "death_date": null, "short_name": null, "valid_from": "2015-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3183, "invalid_codes": null, "legal_form_id": 819, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "HELSEHUSETS VENNER", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 590, "status_id": 1, "birth_date": "2018-02-07", "death_date": null, "short_name": null, "valid_from": "2015-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3183, "invalid_codes": null, "legal_form_id": 819, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3183,"valid_after":null,"valid_from":"2015-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"HELSEHUSETS VENNER","birth_date":"2018-02-07","death_date":null,"free_econ_zone":null,"sector_id":590,"status_id":1,"legal_form_id":819,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3183,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3183
DEBUG:  legal_unit row: {"id":3183,"valid_after":"2014-12-31","valid_from":"2015-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"HELSEHUSETS VENNER","birth_date":"2018-02-07","death_date":null,"free_econ_zone":null,"sector_id":590,"status_id":1,"legal_form_id":819,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3183,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  IMPORT_JOB_INSERT: Error executing batch insert: record "inserted_location" is not assigned yet
WARNING:  Error importing batch: record "inserted_location" is not assigned yet. 1000 rows marked as error.
DEBUG:  IMPORT_JOB_INSERT: Continuing with next batch, 0 rows remaining
DEBUG:  IMPORT_JOB_INSERT: Batches processed. Counts - Pending: 0, Imported: 0, Errors: 1000
DEBUG:  IMPORT_JOB_INSERT: Final update of imported_rows to 0
DEBUG:  IMPORT_JOB_INSERT: Set state to finished and ensured final imported_rows count is accurate
DEBUG:  IMPORT_JOB_INSERT: Updated job note with error count: 1000
DEBUG:  IMPORT_JOB_INSERT: Import completed successfully
DEBUG:  Reset user context to original user 5625d86b-1e1d-43fc-bfa1-eb3911635881
DEBUG:  Task 560 (import_job_process) completed in 153.940000 ms
DEBUG:  Set user context to 5625d86b-1e1d-43fc-bfa1-eb3911635881 for import job 18
DEBUG:  IMPORT_JOB_INSERT: Starting import from import_hovedenhet_2016_data to public.import_legal_unit_era
DEBUG:  IMPORT_JOB_INSERT: Target columns: tax_ident,name,legal_form_code,primary_activity_category_code,secondary_activity_category_code,postal_address_part1,postal_postplace,postal_postcode,postal_region_code,postal_country_iso_2,physical_address_part1,physical_postplace,physical_postcode,physical_region_code,physical_country_iso_2,sector_code,birth_date,valid_from,valid_to
DEBUG:  IMPORT_JOB_INSERT: Uniquely identifying columns: tax_ident
DEBUG:  IMPORT_JOB_INSERT: Initial state - Pending: 1148, Processing: 0, Imported: 0, Error: 0
DEBUG:  IMPORT_JOB_INSERT: Starting batch processing with 1148 pending rows
DEBUG:  IMPORT_JOB_INSERT: Starting new batch, remaining rows: 1148
DEBUG:  IMPORT_JOB_INSERT: Marking batch SQL: 
                    UPDATE public.import_hovedenhet_2016_data
                    SET state = 'importing'
                    WHERE state = 'pending'
                    AND ctid IN (
                        SELECT ctid
                        FROM public.import_hovedenhet_2016_data
                        WHERE state = 'pending'
                        ORDER BY tax_ident
                        LIMIT 1000
                    );
                
DEBUG:  IMPORT_JOB_INSERT: Marked 1000 rows as processing
DEBUG:  IMPORT_JOB_INSERT: Batch insert SQL: 
                WITH batch AS (
                    SELECT tax_ident,name,legal_form_code,primary_activity_category_code,secondary_activity_category_code,postal_address_part1,postal_postplace,postal_postcode,postal_region_code,postal_country_iso_2,physical_address_part1,physical_postplace,physical_postcode,physical_region_code,physical_country_iso_2,sector_code,birth_date,valid_from,valid_to, ctid AS source_ctid
                    FROM public.import_hovedenhet_2016_data
                    WHERE state = 'importing'
                    ORDER BY tax_ident
                    FOR UPDATE
                ),
                inserted AS (
                    INSERT INTO public.import_legal_unit_era (tax_ident,name,legal_form_code,primary_activity_category_code,secondary_activity_category_code,postal_address_part1,postal_postplace,postal_postcode,postal_region_code,postal_country_iso_2,physical_address_part1,physical_postplace,physical_postcode,physical_region_code,physical_country_iso_2,sector_code,birth_date,valid_from,valid_to)
                    SELECT tax_ident,name,legal_form_code,primary_activity_category_code,secondary_activity_category_code,postal_address_part1,postal_postplace,postal_postcode,postal_region_code,postal_country_iso_2,physical_address_part1,physical_postplace,physical_postcode,physical_region_code,physical_country_iso_2,sector_code,birth_date,valid_from,valid_to FROM batch
                    RETURNING 1 AS inserted_row
                )
                SELECT COUNT(*) FROM inserted;
            
DEBUG:  UPSERT row {"id": null, "name": "LAFTERÅSEN UTBYGGING AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2013-04-22", "death_date": null, "short_name": null, "valid_from": "2016-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3184, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "LAFTERÅSEN UTBYGGING AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2013-04-22", "death_date": null, "short_name": null, "valid_from": "2016-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3184, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3184,"valid_after":null,"valid_from":"2016-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"LAFTERÅSEN UTBYGGING AS","birth_date":"2013-04-22","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3184,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3184
DEBUG:  legal_unit row: {"id":3184,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"LAFTERÅSEN UTBYGGING AS","birth_date":"2013-04-22","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3184,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3611", "valid_to": "infinity", "longitude": null, "postplace": "KONGSBERG", "region_id": 6827, "country_id": 167, "valid_from": "2016-01-01", "valid_after": null, "edit_comment": null, "address_part1": "c/o Block Watne AS/nHerman Foss gate 6C", "address_part2": null, "address_part3": null, "legal_unit_id": 3184, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3611", "valid_to": "infinity", "longitude": null, "postplace": "KONGSBERG", "region_id": 6827, "country_id": 167, "valid_from": "2016-01-01", "edit_comment": null, "address_part1": "c/o Block Watne AS/nHerman Foss gate 6C", "address_part2": null, "address_part3": null, "legal_unit_id": 3184, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7514
DEBUG:  location row: {"id":7514,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"physical","address_part1":"c/o Block Watne AS/nHerman Foss gate 6C","address_part2":null,"address_part3":null,"postcode":"3611","postplace":"KONGSBERG","region_id":6827,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3184,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "0129", "valid_to": "infinity", "longitude": null, "postplace": "OSLO", "region_id": 6701, "country_id": 167, "valid_from": "2016-01-01", "valid_after": null, "edit_comment": null, "address_part1": "C/O Block Watne AS/nPB 6666 St. Olavs Plass", "address_part2": null, "address_part3": null, "legal_unit_id": 3184, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "0129", "valid_to": "infinity", "longitude": null, "postplace": "OSLO", "region_id": 6701, "country_id": 167, "valid_from": "2016-01-01", "edit_comment": null, "address_part1": "C/O Block Watne AS/nPB 6666 St. Olavs Plass", "address_part2": null, "address_part3": null, "legal_unit_id": 3184, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7515
DEBUG:  location row: {"id":7515,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"postal","address_part1":"C/O Block Watne AS/nPB 6666 St. Olavs Plass","address_part2":null,"address_part3":null,"postcode":"0129","postplace":"OSLO","region_id":6701,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3184,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2016-01-01", "category_id": 31599, "valid_after": null, "edit_comment": null, "legal_unit_id": 3184, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2016-01-01", "category_id": 31599, "edit_comment": null, "legal_unit_id": 3184, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5966
DEBUG:  activity row: {"id":5966,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"primary","category_id":31599,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3184}
DEBUG:  DEBUG: Selecting from public.activity where id = 5966
DEBUG:  activity row: {"id":5966,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"primary","category_id":31599,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3184}
DEBUG:  UPSERT row {"id": null, "name": "KJÆREVIK HOLDING AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2013-05-28", "death_date": null, "short_name": null, "valid_from": "2016-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3185, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "KJÆREVIK HOLDING AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2013-05-28", "death_date": null, "short_name": null, "valid_from": "2016-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3185, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3185,"valid_after":null,"valid_from":"2016-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"KJÆREVIK HOLDING AS","birth_date":"2013-05-28","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3185,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3185
DEBUG:  legal_unit row: {"id":3185,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"KJÆREVIK HOLDING AS","birth_date":"2013-05-28","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3185,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "5636", "valid_to": "infinity", "longitude": null, "postplace": "VARALDSØY", "region_id": 6946, "country_id": 167, "valid_from": "2016-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Kjæraviksvegen 200", "address_part2": null, "address_part3": null, "legal_unit_id": 3185, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "5636", "valid_to": "infinity", "longitude": null, "postplace": "VARALDSØY", "region_id": 6946, "country_id": 167, "valid_from": "2016-01-01", "edit_comment": null, "address_part1": "Kjæraviksvegen 200", "address_part2": null, "address_part3": null, "legal_unit_id": 3185, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7516
DEBUG:  location row: {"id":7516,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"physical","address_part1":"Kjæraviksvegen 200","address_part2":null,"address_part3":null,"postcode":"5636","postplace":"VARALDSØY","region_id":6946,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3185,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7516
DEBUG:  location row: {"id":7516,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"physical","address_part1":"Kjæraviksvegen 200","address_part2":null,"address_part3":null,"postcode":"5636","postplace":"VARALDSØY","region_id":6946,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3185,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2016-01-01", "category_id": 32171, "valid_after": null, "edit_comment": null, "legal_unit_id": 3185, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2016-01-01", "category_id": 32171, "edit_comment": null, "legal_unit_id": 3185, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5967
DEBUG:  activity row: {"id":5967,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"primary","category_id":32171,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3185}
DEBUG:  DEBUG: Selecting from public.activity where id = 5967
DEBUG:  activity row: {"id":5967,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"primary","category_id":32171,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3185}
DEBUG:  UPSERT row {"id": null, "name": "NTL, AVDELING 14067 DIGITALISERINGSDIREKTORATET", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 590, "status_id": 1, "birth_date": "2008-12-31", "death_date": null, "short_name": null, "valid_from": "2016-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3186, "invalid_codes": null, "legal_form_id": 819, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "NTL, AVDELING 14067 DIGITALISERINGSDIREKTORATET", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 590, "status_id": 1, "birth_date": "2008-12-31", "death_date": null, "short_name": null, "valid_from": "2016-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3186, "invalid_codes": null, "legal_form_id": 819, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3186,"valid_after":null,"valid_from":"2016-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"NTL, AVDELING 14067 DIGITALISERINGSDIREKTORATET","birth_date":"2008-12-31","death_date":null,"free_econ_zone":null,"sector_id":590,"status_id":1,"legal_form_id":819,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3186,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3186
DEBUG:  legal_unit row: {"id":3186,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"NTL, AVDELING 14067 DIGITALISERINGSDIREKTORATET","birth_date":"2008-12-31","death_date":null,"free_econ_zone":null,"sector_id":590,"status_id":1,"legal_form_id":819,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3186,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "6863", "valid_to": "infinity", "longitude": null, "postplace": "LEIKANGER", "region_id": 6969, "country_id": 167, "valid_from": "2016-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Skrivarvegen 2", "address_part2": null, "address_part3": null, "legal_unit_id": 3186, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "6863", "valid_to": "infinity", "longitude": null, "postplace": "LEIKANGER", "region_id": 6969, "country_id": 167, "valid_from": "2016-01-01", "edit_comment": null, "address_part1": "Skrivarvegen 2", "address_part2": null, "address_part3": null, "legal_unit_id": 3186, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7517
DEBUG:  location row: {"id":7517,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"physical","address_part1":"Skrivarvegen 2","address_part2":null,"address_part3":null,"postcode":"6863","postplace":"LEIKANGER","region_id":6969,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3186,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "0032", "valid_to": "infinity", "longitude": null, "postplace": "OSLO", "region_id": 6701, "country_id": 167, "valid_from": "2016-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Postboks 8115 Dep.", "address_part2": null, "address_part3": null, "legal_unit_id": 3186, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "0032", "valid_to": "infinity", "longitude": null, "postplace": "OSLO", "region_id": 6701, "country_id": 167, "valid_from": "2016-01-01", "edit_comment": null, "address_part1": "Postboks 8115 Dep.", "address_part2": null, "address_part3": null, "legal_unit_id": 3186, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7518
DEBUG:  location row: {"id":7518,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"postal","address_part1":"Postboks 8115 Dep.","address_part2":null,"address_part3":null,"postcode":"0032","postplace":"OSLO","region_id":6701,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3186,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2016-01-01", "category_id": 32555, "valid_after": null, "edit_comment": null, "legal_unit_id": 3186, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2016-01-01", "category_id": 32555, "edit_comment": null, "legal_unit_id": 3186, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5968
DEBUG:  activity row: {"id":5968,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"primary","category_id":32555,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3186}
DEBUG:  DEBUG: Selecting from public.activity where id = 5968
DEBUG:  activity row: {"id":5968,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"primary","category_id":32555,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3186}
DEBUG:  UPSERT row {"id": null, "name": "FROMHOLTTUNET AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2014-05-13", "death_date": null, "short_name": null, "valid_from": "2016-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3187, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "FROMHOLTTUNET AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2014-05-13", "death_date": null, "short_name": null, "valid_from": "2016-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3187, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3187,"valid_after":null,"valid_from":"2016-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"FROMHOLTTUNET AS","birth_date":"2014-05-13","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3187,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3187
DEBUG:  legal_unit row: {"id":3187,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"FROMHOLTTUNET AS","birth_date":"2014-05-13","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3187,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "1743", "valid_to": "infinity", "longitude": null, "postplace": "KLAVESTADHAUGEN", "region_id": 6795, "country_id": 167, "valid_from": "2016-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Skjebergveien 136", "address_part2": null, "address_part3": null, "legal_unit_id": 3187, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "1743", "valid_to": "infinity", "longitude": null, "postplace": "KLAVESTADHAUGEN", "region_id": 6795, "country_id": 167, "valid_from": "2016-01-01", "edit_comment": null, "address_part1": "Skjebergveien 136", "address_part2": null, "address_part3": null, "legal_unit_id": 3187, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7519
DEBUG:  location row: {"id":7519,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"physical","address_part1":"Skjebergveien 136","address_part2":null,"address_part3":null,"postcode":"1743","postplace":"KLAVESTADHAUGEN","region_id":6795,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3187,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "1742", "valid_to": "infinity", "longitude": null, "postplace": "KLAVESTADHAUGEN", "region_id": 6795, "country_id": 167, "valid_from": "2016-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Postboks 19", "address_part2": null, "address_part3": null, "legal_unit_id": 3187, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "1742", "valid_to": "infinity", "longitude": null, "postplace": "KLAVESTADHAUGEN", "region_id": 6795, "country_id": 167, "valid_from": "2016-01-01", "edit_comment": null, "address_part1": "Postboks 19", "address_part2": null, "address_part3": null, "legal_unit_id": 3187, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7520
DEBUG:  location row: {"id":7520,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"postal","address_part1":"Postboks 19","address_part2":null,"address_part3":null,"postcode":"1742","postplace":"KLAVESTADHAUGEN","region_id":6795,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3187,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2016-01-01", "category_id": 31602, "valid_after": null, "edit_comment": null, "legal_unit_id": 3187, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2016-01-01", "category_id": 31602, "edit_comment": null, "legal_unit_id": 3187, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5969
DEBUG:  activity row: {"id":5969,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"primary","category_id":31602,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3187}
DEBUG:  DEBUG: Selecting from public.activity where id = 5969
DEBUG:  activity row: {"id":5969,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"primary","category_id":31602,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3187}
DEBUG:  UPSERT row {"id": null, "name": "REED PROJECTS AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2014-06-13", "death_date": null, "short_name": null, "valid_from": "2016-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3188, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "REED PROJECTS AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2014-06-13", "death_date": null, "short_name": null, "valid_from": "2016-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3188, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3188,"valid_after":null,"valid_from":"2016-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"REED PROJECTS AS","birth_date":"2014-06-13","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3188,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3188
DEBUG:  legal_unit row: {"id":3188,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"REED PROJECTS AS","birth_date":"2014-06-13","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3188,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "4014", "valid_to": "infinity", "longitude": null, "postplace": "STAVANGER", "region_id": 6703, "country_id": 167, "valid_from": "2016-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Kvitsøygata 25", "address_part2": null, "address_part3": null, "legal_unit_id": 3188, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "4014", "valid_to": "infinity", "longitude": null, "postplace": "STAVANGER", "region_id": 6703, "country_id": 167, "valid_from": "2016-01-01", "edit_comment": null, "address_part1": "Kvitsøygata 25", "address_part2": null, "address_part3": null, "legal_unit_id": 3188, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7521
DEBUG:  location row: {"id":7521,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"physical","address_part1":"Kvitsøygata 25","address_part2":null,"address_part3":null,"postcode":"4014","postplace":"STAVANGER","region_id":6703,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3188,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "4014", "valid_to": "infinity", "longitude": null, "postplace": "STAVANGER", "region_id": 6703, "country_id": 167, "valid_from": "2016-01-01", "valid_after": null, "edit_comment": null, "address_part1": "TOU/nPostboks 1590 Kjelvene", "address_part2": null, "address_part3": null, "legal_unit_id": 3188, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "4014", "valid_to": "infinity", "longitude": null, "postplace": "STAVANGER", "region_id": 6703, "country_id": 167, "valid_from": "2016-01-01", "edit_comment": null, "address_part1": "TOU/nPostboks 1590 Kjelvene", "address_part2": null, "address_part3": null, "legal_unit_id": 3188, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7522
DEBUG:  location row: {"id":7522,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"postal","address_part1":"TOU/nPostboks 1590 Kjelvene","address_part2":null,"address_part3":null,"postcode":"4014","postplace":"STAVANGER","region_id":6703,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3188,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2016-01-01", "category_id": 31896, "valid_after": null, "edit_comment": null, "legal_unit_id": 3188, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2016-01-01", "category_id": 31896, "edit_comment": null, "legal_unit_id": 3188, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5970
DEBUG:  activity row: {"id":5970,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"primary","category_id":31896,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3188}
DEBUG:  DEBUG: Selecting from public.activity where id = 5970
DEBUG:  activity row: {"id":5970,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"primary","category_id":31896,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3188}
DEBUG:  UPSERT row {"id": null, "name": "THRINO SA", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2014-08-26", "death_date": null, "short_name": null, "valid_from": "2016-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3189, "invalid_codes": null, "legal_form_id": 837, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "THRINO SA", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2014-08-26", "death_date": null, "short_name": null, "valid_from": "2016-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3189, "invalid_codes": null, "legal_form_id": 837, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3189,"valid_after":null,"valid_from":"2016-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"THRINO SA","birth_date":"2014-08-26","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":837,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3189,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3189
DEBUG:  legal_unit row: {"id":3189,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"THRINO SA","birth_date":"2014-08-26","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":837,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3189,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3132", "valid_to": "infinity", "longitude": null, "postplace": "HUSØYSUND", "region_id": 6895, "country_id": 167, "valid_from": "2016-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Bjørnebuveien 21A", "address_part2": null, "address_part3": null, "legal_unit_id": 3189, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3132", "valid_to": "infinity", "longitude": null, "postplace": "HUSØYSUND", "region_id": 6895, "country_id": 167, "valid_from": "2016-01-01", "edit_comment": null, "address_part1": "Bjørnebuveien 21A", "address_part2": null, "address_part3": null, "legal_unit_id": 3189, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7523
DEBUG:  location row: {"id":7523,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"physical","address_part1":"Bjørnebuveien 21A","address_part2":null,"address_part3":null,"postcode":"3132","postplace":"HUSØYSUND","region_id":6895,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3189,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7523
DEBUG:  location row: {"id":7523,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"physical","address_part1":"Bjørnebuveien 21A","address_part2":null,"address_part3":null,"postcode":"3132","postplace":"HUSØYSUND","region_id":6895,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3189,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2016-01-01", "category_id": 32090, "valid_after": null, "edit_comment": null, "legal_unit_id": 3189, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2016-01-01", "category_id": 32090, "edit_comment": null, "legal_unit_id": 3189, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5971
DEBUG:  activity row: {"id":5971,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"primary","category_id":32090,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3189}
DEBUG:  DEBUG: Selecting from public.activity where id = 5971
DEBUG:  activity row: {"id":5971,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"primary","category_id":32090,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3189}
DEBUG:  UPSERT row {"id": null, "name": "VEGANMISJONEN JANE HELEN JOHANSEN", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2016-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3190, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "VEGANMISJONEN JANE HELEN JOHANSEN", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2016-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3190, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3190,"valid_after":null,"valid_from":"2016-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"VEGANMISJONEN JANE HELEN JOHANSEN","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3190,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3190
DEBUG:  legal_unit row: {"id":3190,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"VEGANMISJONEN JANE HELEN JOHANSEN","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3190,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3924", "valid_to": "infinity", "longitude": null, "postplace": "PORSGRUNN", "region_id": 6896, "country_id": 167, "valid_from": "2016-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Grønlihamna 12", "address_part2": null, "address_part3": null, "legal_unit_id": 3190, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3924", "valid_to": "infinity", "longitude": null, "postplace": "PORSGRUNN", "region_id": 6896, "country_id": 167, "valid_from": "2016-01-01", "edit_comment": null, "address_part1": "Grønlihamna 12", "address_part2": null, "address_part3": null, "legal_unit_id": 3190, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7524
DEBUG:  location row: {"id":7524,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"physical","address_part1":"Grønlihamna 12","address_part2":null,"address_part3":null,"postcode":"3924","postplace":"PORSGRUNN","region_id":6896,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3190,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7524
DEBUG:  location row: {"id":7524,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"physical","address_part1":"Grønlihamna 12","address_part2":null,"address_part3":null,"postcode":"3924","postplace":"PORSGRUNN","region_id":6896,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3190,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2016-01-01", "category_id": 32505, "valid_after": null, "edit_comment": null, "legal_unit_id": 3190, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2016-01-01", "category_id": 32505, "edit_comment": null, "legal_unit_id": 3190, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5972
DEBUG:  activity row: {"id":5972,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"primary","category_id":32505,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3190}
DEBUG:  DEBUG: Selecting from public.activity where id = 5972
DEBUG:  activity row: {"id":5972,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"primary","category_id":32505,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3190}
DEBUG:  UPSERT row {"id": null, "name": "ALMÅS BYGG OG SNEKKERSERVICE", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2016-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3191, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "ALMÅS BYGG OG SNEKKERSERVICE", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2016-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3191, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3191,"valid_after":null,"valid_from":"2016-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"ALMÅS BYGG OG SNEKKERSERVICE","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3191,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3191
DEBUG:  legal_unit row: {"id":3191,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"ALMÅS BYGG OG SNEKKERSERVICE","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3191,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3160", "valid_to": "infinity", "longitude": null, "postplace": "STOKKE", "region_id": 6893, "country_id": 167, "valid_from": "2016-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Elgveien 13", "address_part2": null, "address_part3": null, "legal_unit_id": 3191, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3160", "valid_to": "infinity", "longitude": null, "postplace": "STOKKE", "region_id": 6893, "country_id": 167, "valid_from": "2016-01-01", "edit_comment": null, "address_part1": "Elgveien 13", "address_part2": null, "address_part3": null, "legal_unit_id": 3191, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7525
DEBUG:  location row: {"id":7525,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"physical","address_part1":"Elgveien 13","address_part2":null,"address_part3":null,"postcode":"3160","postplace":"STOKKE","region_id":6893,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3191,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7525
DEBUG:  location row: {"id":7525,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"physical","address_part1":"Elgveien 13","address_part2":null,"address_part3":null,"postcode":"3160","postplace":"STOKKE","region_id":6893,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3191,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2016-01-01", "category_id": 31602, "valid_after": null, "edit_comment": null, "legal_unit_id": 3191, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2016-01-01", "category_id": 31602, "edit_comment": null, "legal_unit_id": 3191, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5973
DEBUG:  activity row: {"id":5973,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"primary","category_id":31602,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3191}
DEBUG:  DEBUG: Selecting from public.activity where id = 5973
DEBUG:  activity row: {"id":5973,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"primary","category_id":31602,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3191}
DEBUG:  UPSERT row {"id": null, "name": "SCHECK - KUNST OG DESIGN", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2016-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3192, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "SCHECK - KUNST OG DESIGN", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2016-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3192, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3192,"valid_after":null,"valid_from":"2016-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"SCHECK - KUNST OG DESIGN","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3192,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3192
DEBUG:  legal_unit row: {"id":3192,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"SCHECK - KUNST OG DESIGN","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3192,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "4844", "valid_to": "infinity", "longitude": null, "postplace": "ARENDAL", "region_id": 6915, "country_id": 167, "valid_from": "2016-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Nygårdsveien 4", "address_part2": null, "address_part3": null, "legal_unit_id": 3192, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "4844", "valid_to": "infinity", "longitude": null, "postplace": "ARENDAL", "region_id": 6915, "country_id": 167, "valid_from": "2016-01-01", "edit_comment": null, "address_part1": "Nygårdsveien 4", "address_part2": null, "address_part3": null, "legal_unit_id": 3192, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7526
DEBUG:  location row: {"id":7526,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"physical","address_part1":"Nygårdsveien 4","address_part2":null,"address_part3":null,"postcode":"4844","postplace":"ARENDAL","region_id":6915,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3192,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7526
DEBUG:  location row: {"id":7526,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"physical","address_part1":"Nygårdsveien 4","address_part2":null,"address_part3":null,"postcode":"4844","postplace":"ARENDAL","region_id":6915,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3192,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2016-01-01", "category_id": 32502, "valid_after": null, "edit_comment": null, "legal_unit_id": 3192, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2016-01-01", "category_id": 32502, "edit_comment": null, "legal_unit_id": 3192, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5974
DEBUG:  activity row: {"id":5974,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"primary","category_id":32502,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3192}
DEBUG:  DEBUG: Selecting from public.activity where id = 5974
DEBUG:  activity row: {"id":5974,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"primary","category_id":32502,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3192}
DEBUG:  UPSERT row {"id": null, "name": "MICROLOG AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2015-05-26", "death_date": null, "short_name": null, "valid_from": "2016-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3193, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "MICROLOG AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2015-05-26", "death_date": null, "short_name": null, "valid_from": "2016-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3193, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3193,"valid_after":null,"valid_from":"2016-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"MICROLOG AS","birth_date":"2015-05-26","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3193,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3193
DEBUG:  legal_unit row: {"id":3193,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"MICROLOG AS","birth_date":"2015-05-26","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3193,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "1405", "valid_to": "infinity", "longitude": null, "postplace": "LANGHUS", "region_id": 6808, "country_id": 167, "valid_from": "2016-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Parkveien 23", "address_part2": null, "address_part3": null, "legal_unit_id": 3193, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "1405", "valid_to": "infinity", "longitude": null, "postplace": "LANGHUS", "region_id": 6808, "country_id": 167, "valid_from": "2016-01-01", "edit_comment": null, "address_part1": "Parkveien 23", "address_part2": null, "address_part3": null, "legal_unit_id": 3193, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7527
DEBUG:  location row: {"id":7527,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"physical","address_part1":"Parkveien 23","address_part2":null,"address_part3":null,"postcode":"1405","postplace":"LANGHUS","region_id":6808,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3193,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7527
DEBUG:  location row: {"id":7527,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"physical","address_part1":"Parkveien 23","address_part2":null,"address_part3":null,"postcode":"1405","postplace":"LANGHUS","region_id":6808,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3193,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2016-01-01", "category_id": 31778, "valid_after": null, "edit_comment": null, "legal_unit_id": 3193, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2016-01-01", "category_id": 31778, "edit_comment": null, "legal_unit_id": 3193, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5975
DEBUG:  activity row: {"id":5975,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"primary","category_id":31778,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3193}
DEBUG:  DEBUG: Selecting from public.activity where id = 5975
DEBUG:  activity row: {"id":5975,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"primary","category_id":31778,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3193}
DEBUG:  UPSERT row {"id": null, "name": "HELLERUDLIA AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2015-05-20", "death_date": null, "short_name": null, "valid_from": "2016-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3194, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "HELLERUDLIA AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2015-05-20", "death_date": null, "short_name": null, "valid_from": "2016-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3194, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3194,"valid_after":null,"valid_from":"2016-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"HELLERUDLIA AS","birth_date":"2015-05-20","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3194,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3194
DEBUG:  legal_unit row: {"id":3194,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"HELLERUDLIA AS","birth_date":"2015-05-20","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3194,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3045", "valid_to": "infinity", "longitude": null, "postplace": "DRAMMEN", "region_id": 6826, "country_id": 167, "valid_from": "2016-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Grønland 67", "address_part2": null, "address_part3": null, "legal_unit_id": 3194, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3045", "valid_to": "infinity", "longitude": null, "postplace": "DRAMMEN", "region_id": 6826, "country_id": 167, "valid_from": "2016-01-01", "edit_comment": null, "address_part1": "Grønland 67", "address_part2": null, "address_part3": null, "legal_unit_id": 3194, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7528
DEBUG:  location row: {"id":7528,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"physical","address_part1":"Grønland 67","address_part2":null,"address_part3":null,"postcode":"3045","postplace":"DRAMMEN","region_id":6826,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3194,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3001", "valid_to": "infinity", "longitude": null, "postplace": "DRAMMEN", "region_id": 6826, "country_id": 167, "valid_from": "2016-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Postboks 323 Bragernes", "address_part2": null, "address_part3": null, "legal_unit_id": 3194, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3001", "valid_to": "infinity", "longitude": null, "postplace": "DRAMMEN", "region_id": 6826, "country_id": 167, "valid_from": "2016-01-01", "edit_comment": null, "address_part1": "Postboks 323 Bragernes", "address_part2": null, "address_part3": null, "legal_unit_id": 3194, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7529
DEBUG:  location row: {"id":7529,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"postal","address_part1":"Postboks 323 Bragernes","address_part2":null,"address_part3":null,"postcode":"3001","postplace":"DRAMMEN","region_id":6826,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3194,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2016-01-01", "category_id": 31599, "valid_after": null, "edit_comment": null, "legal_unit_id": 3194, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2016-01-01", "category_id": 31599, "edit_comment": null, "legal_unit_id": 3194, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5976
DEBUG:  activity row: {"id":5976,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"primary","category_id":31599,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3194}
DEBUG:  DEBUG: Selecting from public.activity where id = 5976
DEBUG:  activity row: {"id":5976,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","type":"primary","category_id":31599,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3194}
DEBUG:  UPSERT row {"id": null, "name": "VESTFOLD BLUES & ROCK KLUBB", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 590, "status_id": 1, "birth_date": "2015-09-11", "death_date": null, "short_name": null, "valid_from": "2016-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3195, "invalid_codes": null, "legal_form_id": 819, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "VESTFOLD BLUES & ROCK KLUBB", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 590, "status_id": 1, "birth_date": "2015-09-11", "death_date": null, "short_name": null, "valid_from": "2016-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3195, "invalid_codes": null, "legal_form_id": 819, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3195,"valid_after":null,"valid_from":"2016-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"VESTFOLD BLUES & ROCK KLUBB","birth_date":"2015-09-11","death_date":null,"free_econ_zone":null,"sector_id":590,"status_id":1,"legal_form_id":819,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3195,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3195
DEBUG:  legal_unit row: {"id":3195,"valid_after":"2015-12-31","valid_from":"2016-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"VESTFOLD BLUES & ROCK KLUBB","birth_date":"2015-09-11","death_date":null,"free_econ_zone":null,"sector_id":590,"status_id":1,"legal_form_id":819,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3195,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  IMPORT_JOB_INSERT: Error executing batch insert: record "inserted_location" is not assigned yet
WARNING:  Error importing batch: record "inserted_location" is not assigned yet. 1000 rows marked as error.
DEBUG:  IMPORT_JOB_INSERT: Continuing with next batch, 148 rows remaining
DEBUG:  IMPORT_JOB_INSERT: Batches processed. Counts - Pending: 148, Imported: 0, Errors: 1000
DEBUG:  IMPORT_JOB_INSERT: Final update of imported_rows to 0
DEBUG:  IMPORT_JOB_INSERT: Still have 148 rows to import, will continue in next transaction
DEBUG:  Reset user context to original user 5625d86b-1e1d-43fc-bfa1-eb3911635881
DEBUG:  Rescheduled import job 18 for further processing
DEBUG:  Task 561 (import_job_process) completed in 100.923000 ms
DEBUG:  Set user context to 5625d86b-1e1d-43fc-bfa1-eb3911635881 for import job 19
DEBUG:  IMPORT_JOB_INSERT: Starting import from import_hovedenhet_2017_data to public.import_legal_unit_era
DEBUG:  IMPORT_JOB_INSERT: Target columns: tax_ident,name,legal_form_code,primary_activity_category_code,secondary_activity_category_code,postal_address_part1,postal_postplace,postal_postcode,postal_region_code,postal_country_iso_2,physical_address_part1,physical_postplace,physical_postcode,physical_region_code,physical_country_iso_2,sector_code,birth_date,valid_from,valid_to
DEBUG:  IMPORT_JOB_INSERT: Uniquely identifying columns: tax_ident
DEBUG:  IMPORT_JOB_INSERT: Initial state - Pending: 1362, Processing: 0, Imported: 0, Error: 0
DEBUG:  IMPORT_JOB_INSERT: Starting batch processing with 1362 pending rows
DEBUG:  IMPORT_JOB_INSERT: Starting new batch, remaining rows: 1362
DEBUG:  IMPORT_JOB_INSERT: Marking batch SQL: 
                    UPDATE public.import_hovedenhet_2017_data
                    SET state = 'importing'
                    WHERE state = 'pending'
                    AND ctid IN (
                        SELECT ctid
                        FROM public.import_hovedenhet_2017_data
                        WHERE state = 'pending'
                        ORDER BY tax_ident
                        LIMIT 1000
                    );
                
DEBUG:  IMPORT_JOB_INSERT: Marked 1000 rows as processing
DEBUG:  IMPORT_JOB_INSERT: Batch insert SQL: 
                WITH batch AS (
                    SELECT tax_ident,name,legal_form_code,primary_activity_category_code,secondary_activity_category_code,postal_address_part1,postal_postplace,postal_postcode,postal_region_code,postal_country_iso_2,physical_address_part1,physical_postplace,physical_postcode,physical_region_code,physical_country_iso_2,sector_code,birth_date,valid_from,valid_to, ctid AS source_ctid
                    FROM public.import_hovedenhet_2017_data
                    WHERE state = 'importing'
                    ORDER BY tax_ident
                    FOR UPDATE
                ),
                inserted AS (
                    INSERT INTO public.import_legal_unit_era (tax_ident,name,legal_form_code,primary_activity_category_code,secondary_activity_category_code,postal_address_part1,postal_postplace,postal_postcode,postal_region_code,postal_country_iso_2,physical_address_part1,physical_postplace,physical_postcode,physical_region_code,physical_country_iso_2,sector_code,birth_date,valid_from,valid_to)
                    SELECT tax_ident,name,legal_form_code,primary_activity_category_code,secondary_activity_category_code,postal_address_part1,postal_postplace,postal_postcode,postal_region_code,postal_country_iso_2,physical_address_part1,physical_postplace,physical_postcode,physical_region_code,physical_country_iso_2,sector_code,birth_date,valid_from,valid_to FROM batch
                    RETURNING 1 AS inserted_row
                )
                SELECT COUNT(*) FROM inserted;
            
DEBUG:  UPSERT row {"id": null, "name": "KJÆREVIK HOLDING AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2013-05-28", "death_date": null, "short_name": null, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3196, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "KJÆREVIK HOLDING AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2013-05-28", "death_date": null, "short_name": null, "valid_from": "2017-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3196, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3196,"valid_after":null,"valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"KJÆREVIK HOLDING AS","birth_date":"2013-05-28","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3196,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3196
DEBUG:  legal_unit row: {"id":3196,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"KJÆREVIK HOLDING AS","birth_date":"2013-05-28","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3196,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "5636", "valid_to": "infinity", "longitude": null, "postplace": "VARALDSØY", "region_id": 6946, "country_id": 167, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Kjæraviksvegen 200", "address_part2": null, "address_part3": null, "legal_unit_id": 3196, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "5636", "valid_to": "infinity", "longitude": null, "postplace": "VARALDSØY", "region_id": 6946, "country_id": 167, "valid_from": "2017-01-01", "edit_comment": null, "address_part1": "Kjæraviksvegen 200", "address_part2": null, "address_part3": null, "legal_unit_id": 3196, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7530
DEBUG:  location row: {"id":7530,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":"Kjæraviksvegen 200","address_part2":null,"address_part3":null,"postcode":"5636","postplace":"VARALDSØY","region_id":6946,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3196,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7530
DEBUG:  location row: {"id":7530,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":"Kjæraviksvegen 200","address_part2":null,"address_part3":null,"postcode":"5636","postplace":"VARALDSØY","region_id":6946,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3196,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 32171, "valid_after": null, "edit_comment": null, "legal_unit_id": 3196, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 32171, "edit_comment": null, "legal_unit_id": 3196, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5977
DEBUG:  activity row: {"id":5977,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":32171,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3196}
DEBUG:  DEBUG: Selecting from public.activity where id = 5977
DEBUG:  activity row: {"id":5977,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":32171,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3196}
DEBUG:  UPSERT row {"id": null, "name": "NTL, AVDELING 14067 DIGITALISERINGSDIREKTORATET", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 590, "status_id": 1, "birth_date": "2008-12-31", "death_date": null, "short_name": null, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3197, "invalid_codes": null, "legal_form_id": 819, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "NTL, AVDELING 14067 DIGITALISERINGSDIREKTORATET", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 590, "status_id": 1, "birth_date": "2008-12-31", "death_date": null, "short_name": null, "valid_from": "2017-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3197, "invalid_codes": null, "legal_form_id": 819, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3197,"valid_after":null,"valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"NTL, AVDELING 14067 DIGITALISERINGSDIREKTORATET","birth_date":"2008-12-31","death_date":null,"free_econ_zone":null,"sector_id":590,"status_id":1,"legal_form_id":819,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3197,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3197
DEBUG:  legal_unit row: {"id":3197,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"NTL, AVDELING 14067 DIGITALISERINGSDIREKTORATET","birth_date":"2008-12-31","death_date":null,"free_econ_zone":null,"sector_id":590,"status_id":1,"legal_form_id":819,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3197,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "6863", "valid_to": "infinity", "longitude": null, "postplace": "LEIKANGER", "region_id": 6969, "country_id": 167, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Skrivarvegen 2", "address_part2": null, "address_part3": null, "legal_unit_id": 3197, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "6863", "valid_to": "infinity", "longitude": null, "postplace": "LEIKANGER", "region_id": 6969, "country_id": 167, "valid_from": "2017-01-01", "edit_comment": null, "address_part1": "Skrivarvegen 2", "address_part2": null, "address_part3": null, "legal_unit_id": 3197, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7531
DEBUG:  location row: {"id":7531,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":"Skrivarvegen 2","address_part2":null,"address_part3":null,"postcode":"6863","postplace":"LEIKANGER","region_id":6969,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3197,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "0032", "valid_to": "infinity", "longitude": null, "postplace": "OSLO", "region_id": 6701, "country_id": 167, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Postboks 8115 Dep.", "address_part2": null, "address_part3": null, "legal_unit_id": 3197, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "0032", "valid_to": "infinity", "longitude": null, "postplace": "OSLO", "region_id": 6701, "country_id": 167, "valid_from": "2017-01-01", "edit_comment": null, "address_part1": "Postboks 8115 Dep.", "address_part2": null, "address_part3": null, "legal_unit_id": 3197, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7532
DEBUG:  location row: {"id":7532,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"postal","address_part1":"Postboks 8115 Dep.","address_part2":null,"address_part3":null,"postcode":"0032","postplace":"OSLO","region_id":6701,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3197,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 32555, "valid_after": null, "edit_comment": null, "legal_unit_id": 3197, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 32555, "edit_comment": null, "legal_unit_id": 3197, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5978
DEBUG:  activity row: {"id":5978,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":32555,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3197}
DEBUG:  DEBUG: Selecting from public.activity where id = 5978
DEBUG:  activity row: {"id":5978,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":32555,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3197}
DEBUG:  UPSERT row {"id": null, "name": "FROMHOLTTUNET AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2014-05-13", "death_date": null, "short_name": null, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3198, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "FROMHOLTTUNET AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2014-05-13", "death_date": null, "short_name": null, "valid_from": "2017-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3198, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3198,"valid_after":null,"valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"FROMHOLTTUNET AS","birth_date":"2014-05-13","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3198,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3198
DEBUG:  legal_unit row: {"id":3198,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"FROMHOLTTUNET AS","birth_date":"2014-05-13","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3198,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "1743", "valid_to": "infinity", "longitude": null, "postplace": "KLAVESTADHAUGEN", "region_id": 6795, "country_id": 167, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Skjebergveien 136", "address_part2": null, "address_part3": null, "legal_unit_id": 3198, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "1743", "valid_to": "infinity", "longitude": null, "postplace": "KLAVESTADHAUGEN", "region_id": 6795, "country_id": 167, "valid_from": "2017-01-01", "edit_comment": null, "address_part1": "Skjebergveien 136", "address_part2": null, "address_part3": null, "legal_unit_id": 3198, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7533
DEBUG:  location row: {"id":7533,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":"Skjebergveien 136","address_part2":null,"address_part3":null,"postcode":"1743","postplace":"KLAVESTADHAUGEN","region_id":6795,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3198,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "1742", "valid_to": "infinity", "longitude": null, "postplace": "KLAVESTADHAUGEN", "region_id": 6795, "country_id": 167, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Postboks 19", "address_part2": null, "address_part3": null, "legal_unit_id": 3198, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "1742", "valid_to": "infinity", "longitude": null, "postplace": "KLAVESTADHAUGEN", "region_id": 6795, "country_id": 167, "valid_from": "2017-01-01", "edit_comment": null, "address_part1": "Postboks 19", "address_part2": null, "address_part3": null, "legal_unit_id": 3198, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7534
DEBUG:  location row: {"id":7534,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"postal","address_part1":"Postboks 19","address_part2":null,"address_part3":null,"postcode":"1742","postplace":"KLAVESTADHAUGEN","region_id":6795,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3198,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 31602, "valid_after": null, "edit_comment": null, "legal_unit_id": 3198, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 31602, "edit_comment": null, "legal_unit_id": 3198, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5979
DEBUG:  activity row: {"id":5979,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":31602,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3198}
DEBUG:  DEBUG: Selecting from public.activity where id = 5979
DEBUG:  activity row: {"id":5979,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":31602,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3198}
DEBUG:  UPSERT row {"id": null, "name": "REED PROJECTS AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2014-06-13", "death_date": null, "short_name": null, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3199, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "REED PROJECTS AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2014-06-13", "death_date": null, "short_name": null, "valid_from": "2017-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3199, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3199,"valid_after":null,"valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"REED PROJECTS AS","birth_date":"2014-06-13","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3199,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3199
DEBUG:  legal_unit row: {"id":3199,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"REED PROJECTS AS","birth_date":"2014-06-13","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3199,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "4014", "valid_to": "infinity", "longitude": null, "postplace": "STAVANGER", "region_id": 6703, "country_id": 167, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Kvitsøygata 25", "address_part2": null, "address_part3": null, "legal_unit_id": 3199, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "4014", "valid_to": "infinity", "longitude": null, "postplace": "STAVANGER", "region_id": 6703, "country_id": 167, "valid_from": "2017-01-01", "edit_comment": null, "address_part1": "Kvitsøygata 25", "address_part2": null, "address_part3": null, "legal_unit_id": 3199, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7535
DEBUG:  location row: {"id":7535,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":"Kvitsøygata 25","address_part2":null,"address_part3":null,"postcode":"4014","postplace":"STAVANGER","region_id":6703,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3199,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "4014", "valid_to": "infinity", "longitude": null, "postplace": "STAVANGER", "region_id": 6703, "country_id": 167, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": null, "address_part1": "TOU/nPostboks 1590 Kjelvene", "address_part2": null, "address_part3": null, "legal_unit_id": 3199, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "4014", "valid_to": "infinity", "longitude": null, "postplace": "STAVANGER", "region_id": 6703, "country_id": 167, "valid_from": "2017-01-01", "edit_comment": null, "address_part1": "TOU/nPostboks 1590 Kjelvene", "address_part2": null, "address_part3": null, "legal_unit_id": 3199, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7536
DEBUG:  location row: {"id":7536,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"postal","address_part1":"TOU/nPostboks 1590 Kjelvene","address_part2":null,"address_part3":null,"postcode":"4014","postplace":"STAVANGER","region_id":6703,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3199,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 31896, "valid_after": null, "edit_comment": null, "legal_unit_id": 3199, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 31896, "edit_comment": null, "legal_unit_id": 3199, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5980
DEBUG:  activity row: {"id":5980,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":31896,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3199}
DEBUG:  DEBUG: Selecting from public.activity where id = 5980
DEBUG:  activity row: {"id":5980,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":31896,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3199}
DEBUG:  UPSERT row {"id": null, "name": "THRINO SA", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2014-08-26", "death_date": null, "short_name": null, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3200, "invalid_codes": null, "legal_form_id": 837, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "THRINO SA", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2014-08-26", "death_date": null, "short_name": null, "valid_from": "2017-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3200, "invalid_codes": null, "legal_form_id": 837, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3200,"valid_after":null,"valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"THRINO SA","birth_date":"2014-08-26","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":837,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3200,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3200
DEBUG:  legal_unit row: {"id":3200,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"THRINO SA","birth_date":"2014-08-26","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":837,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3200,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3132", "valid_to": "infinity", "longitude": null, "postplace": "HUSØYSUND", "region_id": 6895, "country_id": 167, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Bjørnebuveien 21A", "address_part2": null, "address_part3": null, "legal_unit_id": 3200, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3132", "valid_to": "infinity", "longitude": null, "postplace": "HUSØYSUND", "region_id": 6895, "country_id": 167, "valid_from": "2017-01-01", "edit_comment": null, "address_part1": "Bjørnebuveien 21A", "address_part2": null, "address_part3": null, "legal_unit_id": 3200, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7537
DEBUG:  location row: {"id":7537,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":"Bjørnebuveien 21A","address_part2":null,"address_part3":null,"postcode":"3132","postplace":"HUSØYSUND","region_id":6895,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3200,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7537
DEBUG:  location row: {"id":7537,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":"Bjørnebuveien 21A","address_part2":null,"address_part3":null,"postcode":"3132","postplace":"HUSØYSUND","region_id":6895,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3200,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 32090, "valid_after": null, "edit_comment": null, "legal_unit_id": 3200, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 32090, "edit_comment": null, "legal_unit_id": 3200, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5981
DEBUG:  activity row: {"id":5981,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":32090,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3200}
DEBUG:  DEBUG: Selecting from public.activity where id = 5981
DEBUG:  activity row: {"id":5981,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":32090,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3200}
DEBUG:  UPSERT row {"id": null, "name": "VEGANMISJONEN JANE HELEN JOHANSEN", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3201, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "VEGANMISJONEN JANE HELEN JOHANSEN", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2017-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3201, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3201,"valid_after":null,"valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"VEGANMISJONEN JANE HELEN JOHANSEN","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3201,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3201
DEBUG:  legal_unit row: {"id":3201,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"VEGANMISJONEN JANE HELEN JOHANSEN","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3201,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3924", "valid_to": "infinity", "longitude": null, "postplace": "PORSGRUNN", "region_id": 6896, "country_id": 167, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Grønlihamna 12", "address_part2": null, "address_part3": null, "legal_unit_id": 3201, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3924", "valid_to": "infinity", "longitude": null, "postplace": "PORSGRUNN", "region_id": 6896, "country_id": 167, "valid_from": "2017-01-01", "edit_comment": null, "address_part1": "Grønlihamna 12", "address_part2": null, "address_part3": null, "legal_unit_id": 3201, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7538
DEBUG:  location row: {"id":7538,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":"Grønlihamna 12","address_part2":null,"address_part3":null,"postcode":"3924","postplace":"PORSGRUNN","region_id":6896,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3201,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7538
DEBUG:  location row: {"id":7538,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":"Grønlihamna 12","address_part2":null,"address_part3":null,"postcode":"3924","postplace":"PORSGRUNN","region_id":6896,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3201,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 32505, "valid_after": null, "edit_comment": null, "legal_unit_id": 3201, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 32505, "edit_comment": null, "legal_unit_id": 3201, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5982
DEBUG:  activity row: {"id":5982,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":32505,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3201}
DEBUG:  DEBUG: Selecting from public.activity where id = 5982
DEBUG:  activity row: {"id":5982,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":32505,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3201}
DEBUG:  UPSERT row {"id": null, "name": "ROPPEN STVE", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3202, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "ROPPEN STVE", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2017-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3202, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3202,"valid_after":null,"valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"ROPPEN STVE","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3202,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3202
DEBUG:  legal_unit row: {"id":3202,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"ROPPEN STVE","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3202,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "5006", "valid_to": "infinity", "longitude": null, "postplace": "BERGEN", "region_id": 6938, "country_id": 167, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Storms gate 14", "address_part2": null, "address_part3": null, "legal_unit_id": 3202, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "5006", "valid_to": "infinity", "longitude": null, "postplace": "BERGEN", "region_id": 6938, "country_id": 167, "valid_from": "2017-01-01", "edit_comment": null, "address_part1": "Storms gate 14", "address_part2": null, "address_part3": null, "legal_unit_id": 3202, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7539
DEBUG:  location row: {"id":7539,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":"Storms gate 14","address_part2":null,"address_part3":null,"postcode":"5006","postplace":"BERGEN","region_id":6938,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3202,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7539
DEBUG:  location row: {"id":7539,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":"Storms gate 14","address_part2":null,"address_part3":null,"postcode":"5006","postplace":"BERGEN","region_id":6938,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3202,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 32193, "valid_after": null, "edit_comment": null, "legal_unit_id": 3202, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 32193, "edit_comment": null, "legal_unit_id": 3202, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5983
DEBUG:  activity row: {"id":5983,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":32193,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3202}
DEBUG:  DEBUG: Selecting from public.activity where id = 5983
DEBUG:  activity row: {"id":5983,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":32193,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3202}
DEBUG:  UPSERT row {"id": null, "name": "SCHECK - KUNST OG DESIGN", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3203, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "SCHECK - KUNST OG DESIGN", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2017-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3203, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3203,"valid_after":null,"valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"SCHECK - KUNST OG DESIGN","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3203,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3203
DEBUG:  legal_unit row: {"id":3203,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"SCHECK - KUNST OG DESIGN","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3203,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "4844", "valid_to": "infinity", "longitude": null, "postplace": "ARENDAL", "region_id": 6915, "country_id": 167, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Nygårdsveien 4", "address_part2": null, "address_part3": null, "legal_unit_id": 3203, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "4844", "valid_to": "infinity", "longitude": null, "postplace": "ARENDAL", "region_id": 6915, "country_id": 167, "valid_from": "2017-01-01", "edit_comment": null, "address_part1": "Nygårdsveien 4", "address_part2": null, "address_part3": null, "legal_unit_id": 3203, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7540
DEBUG:  location row: {"id":7540,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":"Nygårdsveien 4","address_part2":null,"address_part3":null,"postcode":"4844","postplace":"ARENDAL","region_id":6915,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3203,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7540
DEBUG:  location row: {"id":7540,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":"Nygårdsveien 4","address_part2":null,"address_part3":null,"postcode":"4844","postplace":"ARENDAL","region_id":6915,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3203,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 32502, "valid_after": null, "edit_comment": null, "legal_unit_id": 3203, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 32502, "edit_comment": null, "legal_unit_id": 3203, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5984
DEBUG:  activity row: {"id":5984,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":32502,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3203}
DEBUG:  DEBUG: Selecting from public.activity where id = 5984
DEBUG:  activity row: {"id":5984,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":32502,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3203}
DEBUG:  UPSERT row {"id": null, "name": "HANNA SANNES AANONSEN", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3204, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "HANNA SANNES AANONSEN", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2017-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3204, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3204,"valid_after":null,"valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"HANNA SANNES AANONSEN","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3204,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3204
DEBUG:  legal_unit row: {"id":3204,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"HANNA SANNES AANONSEN","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3204,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "0684", "valid_to": "infinity", "longitude": null, "postplace": "OSLO", "region_id": 6701, "country_id": 167, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Vetlandsfaret 12B", "address_part2": null, "address_part3": null, "legal_unit_id": 3204, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "0684", "valid_to": "infinity", "longitude": null, "postplace": "OSLO", "region_id": 6701, "country_id": 167, "valid_from": "2017-01-01", "edit_comment": null, "address_part1": "Vetlandsfaret 12B", "address_part2": null, "address_part3": null, "legal_unit_id": 3204, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7541
DEBUG:  location row: {"id":7541,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":"Vetlandsfaret 12B","address_part2":null,"address_part3":null,"postcode":"0684","postplace":"OSLO","region_id":6701,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3204,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7541
DEBUG:  location row: {"id":7541,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":"Vetlandsfaret 12B","address_part2":null,"address_part3":null,"postcode":"0684","postplace":"OSLO","region_id":6701,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3204,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 32496, "valid_after": null, "edit_comment": null, "legal_unit_id": 3204, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 32496, "edit_comment": null, "legal_unit_id": 3204, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5985
DEBUG:  activity row: {"id":5985,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":32496,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3204}
DEBUG:  DEBUG: Selecting from public.activity where id = 5985
DEBUG:  activity row: {"id":5985,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":32496,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3204}
DEBUG:  UPSERT row {"id": null, "name": "BRAGE PELLE STIG BRAGE-ANDERSEN", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3205, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "BRAGE PELLE STIG BRAGE-ANDERSEN", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2017-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3205, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3205,"valid_after":null,"valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"BRAGE PELLE STIG BRAGE-ANDERSEN","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3205,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3205
DEBUG:  legal_unit row: {"id":3205,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"BRAGE PELLE STIG BRAGE-ANDERSEN","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3205,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "4610", "valid_to": "infinity", "longitude": null, "postplace": "KRISTIANSAND S", "region_id": 6916, "country_id": 167, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Odderøyveien 32", "address_part2": null, "address_part3": null, "legal_unit_id": 3205, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "4610", "valid_to": "infinity", "longitude": null, "postplace": "KRISTIANSAND S", "region_id": 6916, "country_id": 167, "valid_from": "2017-01-01", "edit_comment": null, "address_part1": "Odderøyveien 32", "address_part2": null, "address_part3": null, "legal_unit_id": 3205, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7542
DEBUG:  location row: {"id":7542,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":"Odderøyveien 32","address_part2":null,"address_part3":null,"postcode":"4610","postplace":"KRISTIANSAND S","region_id":6916,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3205,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "4770", "valid_to": "infinity", "longitude": null, "postplace": "HØVÅG", "region_id": 6924, "country_id": 167, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Humlejordet 67", "address_part2": null, "address_part3": null, "legal_unit_id": 3205, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "4770", "valid_to": "infinity", "longitude": null, "postplace": "HØVÅG", "region_id": 6924, "country_id": 167, "valid_from": "2017-01-01", "edit_comment": null, "address_part1": "Humlejordet 67", "address_part2": null, "address_part3": null, "legal_unit_id": 3205, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7543
DEBUG:  location row: {"id":7543,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"postal","address_part1":"Humlejordet 67","address_part2":null,"address_part3":null,"postcode":"4770","postplace":"HØVÅG","region_id":6924,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3205,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 32502, "valid_after": null, "edit_comment": null, "legal_unit_id": 3205, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 32502, "edit_comment": null, "legal_unit_id": 3205, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5986
DEBUG:  activity row: {"id":5986,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":32502,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3205}
DEBUG:  DEBUG: Selecting from public.activity where id = 5986
DEBUG:  activity row: {"id":5986,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":32502,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3205}
DEBUG:  UPSERT row {"id": null, "name": "MICROLOG AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2015-05-26", "death_date": null, "short_name": null, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3206, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "MICROLOG AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2015-05-26", "death_date": null, "short_name": null, "valid_from": "2017-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3206, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3206,"valid_after":null,"valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"MICROLOG AS","birth_date":"2015-05-26","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3206,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3206
DEBUG:  legal_unit row: {"id":3206,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"MICROLOG AS","birth_date":"2015-05-26","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3206,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "1405", "valid_to": "infinity", "longitude": null, "postplace": "LANGHUS", "region_id": 6808, "country_id": 167, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Parkveien 23", "address_part2": null, "address_part3": null, "legal_unit_id": 3206, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "1405", "valid_to": "infinity", "longitude": null, "postplace": "LANGHUS", "region_id": 6808, "country_id": 167, "valid_from": "2017-01-01", "edit_comment": null, "address_part1": "Parkveien 23", "address_part2": null, "address_part3": null, "legal_unit_id": 3206, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7544
DEBUG:  location row: {"id":7544,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":"Parkveien 23","address_part2":null,"address_part3":null,"postcode":"1405","postplace":"LANGHUS","region_id":6808,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3206,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7544
DEBUG:  location row: {"id":7544,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":"Parkveien 23","address_part2":null,"address_part3":null,"postcode":"1405","postplace":"LANGHUS","region_id":6808,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3206,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 31778, "valid_after": null, "edit_comment": null, "legal_unit_id": 3206, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 31778, "edit_comment": null, "legal_unit_id": 3206, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5987
DEBUG:  activity row: {"id":5987,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":31778,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3206}
DEBUG:  DEBUG: Selecting from public.activity where id = 5987
DEBUG:  activity row: {"id":5987,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":31778,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3206}
DEBUG:  UPSERT row {"id": null, "name": "HELLERUDLIA AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2015-05-20", "death_date": null, "short_name": null, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3207, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "HELLERUDLIA AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2015-05-20", "death_date": null, "short_name": null, "valid_from": "2017-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3207, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3207,"valid_after":null,"valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"HELLERUDLIA AS","birth_date":"2015-05-20","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3207,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3207
DEBUG:  legal_unit row: {"id":3207,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"HELLERUDLIA AS","birth_date":"2015-05-20","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3207,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3045", "valid_to": "infinity", "longitude": null, "postplace": "DRAMMEN", "region_id": 6826, "country_id": 167, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Grønland 67", "address_part2": null, "address_part3": null, "legal_unit_id": 3207, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3045", "valid_to": "infinity", "longitude": null, "postplace": "DRAMMEN", "region_id": 6826, "country_id": 167, "valid_from": "2017-01-01", "edit_comment": null, "address_part1": "Grønland 67", "address_part2": null, "address_part3": null, "legal_unit_id": 3207, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7545
DEBUG:  location row: {"id":7545,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":"Grønland 67","address_part2":null,"address_part3":null,"postcode":"3045","postplace":"DRAMMEN","region_id":6826,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3207,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3001", "valid_to": "infinity", "longitude": null, "postplace": "DRAMMEN", "region_id": 6826, "country_id": 167, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Postboks 323 Bragernes", "address_part2": null, "address_part3": null, "legal_unit_id": 3207, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3001", "valid_to": "infinity", "longitude": null, "postplace": "DRAMMEN", "region_id": 6826, "country_id": 167, "valid_from": "2017-01-01", "edit_comment": null, "address_part1": "Postboks 323 Bragernes", "address_part2": null, "address_part3": null, "legal_unit_id": 3207, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7546
DEBUG:  location row: {"id":7546,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"postal","address_part1":"Postboks 323 Bragernes","address_part2":null,"address_part3":null,"postcode":"3001","postplace":"DRAMMEN","region_id":6826,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3207,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 31599, "valid_after": null, "edit_comment": null, "legal_unit_id": 3207, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 31599, "edit_comment": null, "legal_unit_id": 3207, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5988
DEBUG:  activity row: {"id":5988,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":31599,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3207}
DEBUG:  DEBUG: Selecting from public.activity where id = 5988
DEBUG:  activity row: {"id":5988,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":31599,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3207}
DEBUG:  UPSERT row {"id": null, "name": "R.A.JORE AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2015-07-01", "death_date": null, "short_name": null, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3208, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "R.A.JORE AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2015-07-01", "death_date": null, "short_name": null, "valid_from": "2017-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3208, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3208,"valid_after":null,"valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"R.A.JORE AS","birth_date":"2015-07-01","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3208,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3208
DEBUG:  legal_unit row: {"id":3208,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"R.A.JORE AS","birth_date":"2015-07-01","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3208,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "4821", "valid_to": "infinity", "longitude": null, "postplace": "RYKENE", "region_id": 6915, "country_id": 167, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Gamle Risevei 52", "address_part2": null, "address_part3": null, "legal_unit_id": 3208, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "4821", "valid_to": "infinity", "longitude": null, "postplace": "RYKENE", "region_id": 6915, "country_id": 167, "valid_from": "2017-01-01", "edit_comment": null, "address_part1": "Gamle Risevei 52", "address_part2": null, "address_part3": null, "legal_unit_id": 3208, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7547
DEBUG:  location row: {"id":7547,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":"Gamle Risevei 52","address_part2":null,"address_part3":null,"postcode":"4821","postplace":"RYKENE","region_id":6915,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3208,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7547
DEBUG:  location row: {"id":7547,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":"Gamle Risevei 52","address_part2":null,"address_part3":null,"postcode":"4821","postplace":"RYKENE","region_id":6915,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3208,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 31626, "valid_after": null, "edit_comment": null, "legal_unit_id": 3208, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 31626, "edit_comment": null, "legal_unit_id": 3208, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5989
DEBUG:  activity row: {"id":5989,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":31626,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3208}
DEBUG:  DEBUG: Selecting from public.activity where id = 5989
DEBUG:  activity row: {"id":5989,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":31626,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3208}
DEBUG:  UPSERT row {"id": null, "name": "LEGE ASLAK JOHANSEN", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3209, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "LEGE ASLAK JOHANSEN", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2017-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3209, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3209,"valid_after":null,"valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"LEGE ASLAK JOHANSEN","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3209,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3209
DEBUG:  legal_unit row: {"id":3209,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"LEGE ASLAK JOHANSEN","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3209,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "7654", "valid_to": "infinity", "longitude": null, "postplace": "VERDAL", "region_id": 7000, "country_id": 167, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Grustaket 4B", "address_part2": null, "address_part3": null, "legal_unit_id": 3209, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "7654", "valid_to": "infinity", "longitude": null, "postplace": "VERDAL", "region_id": 7000, "country_id": 167, "valid_from": "2017-01-01", "edit_comment": null, "address_part1": "Grustaket 4B", "address_part2": null, "address_part3": null, "legal_unit_id": 3209, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7548
DEBUG:  location row: {"id":7548,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":"Grustaket 4B","address_part2":null,"address_part3":null,"postcode":"7654","postplace":"VERDAL","region_id":7000,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3209,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7548
DEBUG:  location row: {"id":7548,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":"Grustaket 4B","address_part2":null,"address_part3":null,"postcode":"7654","postplace":"VERDAL","region_id":7000,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3209,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 32429, "valid_after": null, "edit_comment": null, "legal_unit_id": 3209, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 32429, "edit_comment": null, "legal_unit_id": 3209, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5990
DEBUG:  activity row: {"id":5990,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":32429,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3209}
DEBUG:  DEBUG: Selecting from public.activity where id = 5990
DEBUG:  activity row: {"id":5990,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":32429,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3209}
DEBUG:  UPSERT row {"id": null, "name": "AM OLAFSDOTTIR", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3210, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "AM OLAFSDOTTIR", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2017-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3210, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3210,"valid_after":null,"valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"AM OLAFSDOTTIR","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3210,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3210
DEBUG:  legal_unit row: {"id":3210,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"AM OLAFSDOTTIR","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3210,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "5518", "valid_to": "infinity", "longitude": null, "postplace": "HAUGESUND", "region_id": 6704, "country_id": 167, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Sørhallet 68", "address_part2": null, "address_part3": null, "legal_unit_id": 3210, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "5518", "valid_to": "infinity", "longitude": null, "postplace": "HAUGESUND", "region_id": 6704, "country_id": 167, "valid_from": "2017-01-01", "edit_comment": null, "address_part1": "Sørhallet 68", "address_part2": null, "address_part3": null, "legal_unit_id": 3210, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7549
DEBUG:  location row: {"id":7549,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":"Sørhallet 68","address_part2":null,"address_part3":null,"postcode":"5518","postplace":"HAUGESUND","region_id":6704,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3210,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7549
DEBUG:  location row: {"id":7549,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":"Sørhallet 68","address_part2":null,"address_part3":null,"postcode":"5518","postplace":"HAUGESUND","region_id":6704,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3210,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 32232, "valid_after": null, "edit_comment": null, "legal_unit_id": 3210, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 32232, "edit_comment": null, "legal_unit_id": 3210, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5991
DEBUG:  activity row: {"id":5991,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":32232,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3210}
DEBUG:  DEBUG: Selecting from public.activity where id = 5991
DEBUG:  activity row: {"id":5991,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":32232,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3210}
DEBUG:  UPSERT row {"id": null, "name": "CEBO HOLLAND B.V.", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": null, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3211, "invalid_codes": null, "legal_form_id": 830, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "CEBO HOLLAND B.V.", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": null, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2017-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3211, "invalid_codes": null, "legal_form_id": 830, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3211,"valid_after":null,"valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"CEBO HOLLAND B.V.","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":null,"status_id":1,"legal_form_id":830,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3211,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3211
DEBUG:  legal_unit row: {"id":3211,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"CEBO HOLLAND B.V.","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":null,"status_id":1,"legal_form_id":830,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3211,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": null, "valid_to": "infinity", "longitude": null, "postplace": "1976 BV IJMUIDEN", "region_id": null, "country_id": 158, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Westerduinweg 1", "address_part2": null, "address_part3": null, "legal_unit_id": 3211, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": null, "valid_to": "infinity", "longitude": null, "postplace": "1976 BV IJMUIDEN", "region_id": null, "country_id": 158, "valid_from": "2017-01-01", "edit_comment": null, "address_part1": "Westerduinweg 1", "address_part2": null, "address_part3": null, "legal_unit_id": 3211, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7550
DEBUG:  location row: {"id":7550,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":"Westerduinweg 1","address_part2":null,"address_part3":null,"postcode":null,"postplace":"1976 BV IJMUIDEN","region_id":null,"country_id":158,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3211,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7550
DEBUG:  location row: {"id":7550,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":"Westerduinweg 1","address_part2":null,"address_part3":null,"postcode":null,"postplace":"1976 BV IJMUIDEN","region_id":null,"country_id":158,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3211,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 31780, "valid_after": null, "edit_comment": null, "legal_unit_id": 3211, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 31780, "edit_comment": null, "legal_unit_id": 3211, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5992
DEBUG:  activity row: {"id":5992,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":31780,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3211}
DEBUG:  DEBUG: Selecting from public.activity where id = 5992
DEBUG:  activity row: {"id":5992,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":31780,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3211}
DEBUG:  UPSERT row {"id": null, "name": "HYLKJE NÆRINGSBYGG 14 AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2016-10-12", "death_date": null, "short_name": null, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3212, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "HYLKJE NÆRINGSBYGG 14 AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2016-10-12", "death_date": null, "short_name": null, "valid_from": "2017-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3212, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3212,"valid_after":null,"valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"HYLKJE NÆRINGSBYGG 14 AS","birth_date":"2016-10-12","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3212,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3212
DEBUG:  legal_unit row: {"id":3212,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"HYLKJE NÆRINGSBYGG 14 AS","birth_date":"2016-10-12","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3212,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "5109", "valid_to": "infinity", "longitude": null, "postplace": "HYLKJE", "region_id": 6938, "country_id": 167, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Hylkjeflaten 32A", "address_part2": null, "address_part3": null, "legal_unit_id": 3212, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "5109", "valid_to": "infinity", "longitude": null, "postplace": "HYLKJE", "region_id": 6938, "country_id": 167, "valid_from": "2017-01-01", "edit_comment": null, "address_part1": "Hylkjeflaten 32A", "address_part2": null, "address_part3": null, "legal_unit_id": 3212, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7551
DEBUG:  location row: {"id":7551,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":"Hylkjeflaten 32A","address_part2":null,"address_part3":null,"postcode":"5109","postplace":"HYLKJE","region_id":6938,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3212,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7551
DEBUG:  location row: {"id":7551,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":"Hylkjeflaten 32A","address_part2":null,"address_part3":null,"postcode":"5109","postplace":"HYLKJE","region_id":6938,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3212,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 32171, "valid_after": null, "edit_comment": null, "legal_unit_id": 3212, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 32171, "edit_comment": null, "legal_unit_id": 3212, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5993
DEBUG:  activity row: {"id":5993,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":32171,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3212}
DEBUG:  DEBUG: Selecting from public.activity where id = 5993
DEBUG:  activity row: {"id":5993,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":32171,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3212}
DEBUG:  UPSERT row {"id": null, "name": "BRASØY BÅTFORENING", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 590, "status_id": 1, "birth_date": "1993-06-01", "death_date": null, "short_name": null, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3213, "invalid_codes": null, "legal_form_id": 819, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "BRASØY BÅTFORENING", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 590, "status_id": 1, "birth_date": "1993-06-01", "death_date": null, "short_name": null, "valid_from": "2017-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3213, "invalid_codes": null, "legal_form_id": 819, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3213,"valid_after":null,"valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"BRASØY BÅTFORENING","birth_date":"1993-06-01","death_date":null,"free_econ_zone":null,"sector_id":590,"status_id":1,"legal_form_id":819,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3213,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3213
DEBUG:  legal_unit row: {"id":3213,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"BRASØY BÅTFORENING","birth_date":"1993-06-01","death_date":null,"free_econ_zone":null,"sector_id":590,"status_id":1,"legal_form_id":819,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3213,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "8842", "valid_to": "infinity", "longitude": null, "postplace": "BRASØY", "region_id": 6759, "country_id": 167, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": null, "address_part1": "c/o Svein G. Storholm/nVågveien 2", "address_part2": null, "address_part3": null, "legal_unit_id": 3213, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "8842", "valid_to": "infinity", "longitude": null, "postplace": "BRASØY", "region_id": 6759, "country_id": 167, "valid_from": "2017-01-01", "edit_comment": null, "address_part1": "c/o Svein G. Storholm/nVågveien 2", "address_part2": null, "address_part3": null, "legal_unit_id": 3213, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7552
DEBUG:  location row: {"id":7552,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":"c/o Svein G. Storholm/nVågveien 2","address_part2":null,"address_part3":null,"postcode":"8842","postplace":"BRASØY","region_id":6759,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3213,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7552
DEBUG:  location row: {"id":7552,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":"c/o Svein G. Storholm/nVågveien 2","address_part2":null,"address_part3":null,"postcode":"8842","postplace":"BRASØY","region_id":6759,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3213,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 32562, "valid_after": null, "edit_comment": null, "legal_unit_id": 3213, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 32562, "edit_comment": null, "legal_unit_id": 3213, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5994
DEBUG:  activity row: {"id":5994,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":32562,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3213}
DEBUG:  DEBUG: Selecting from public.activity where id = 5994
DEBUG:  activity row: {"id":5994,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":32562,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3213}
DEBUG:  UPSERT row {"id": null, "name": "NORDIC ARENA NETTVERK BERGEN AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2011-08-11", "death_date": null, "short_name": null, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3214, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "NORDIC ARENA NETTVERK BERGEN AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2011-08-11", "death_date": null, "short_name": null, "valid_from": "2017-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3214, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3214,"valid_after":null,"valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"NORDIC ARENA NETTVERK BERGEN AS","birth_date":"2011-08-11","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3214,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3214
DEBUG:  legal_unit row: {"id":3214,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"NORDIC ARENA NETTVERK BERGEN AS","birth_date":"2011-08-11","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3214,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "5068", "valid_to": "infinity", "longitude": null, "postplace": "BERGEN", "region_id": 6938, "country_id": 167, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Fjøsangerveien 70A", "address_part2": null, "address_part3": null, "legal_unit_id": 3214, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "5068", "valid_to": "infinity", "longitude": null, "postplace": "BERGEN", "region_id": 6938, "country_id": 167, "valid_from": "2017-01-01", "edit_comment": null, "address_part1": "Fjøsangerveien 70A", "address_part2": null, "address_part3": null, "legal_unit_id": 3214, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7553
DEBUG:  location row: {"id":7553,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":"Fjøsangerveien 70A","address_part2":null,"address_part3":null,"postcode":"5068","postplace":"BERGEN","region_id":6938,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3214,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "5068", "valid_to": "infinity", "longitude": null, "postplace": "BERGEN", "region_id": 6938, "country_id": 167, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": null, "address_part1": null, "address_part2": null, "address_part3": null, "legal_unit_id": 3214, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "5068", "valid_to": "infinity", "longitude": null, "postplace": "BERGEN", "region_id": 6938, "country_id": 167, "valid_from": "2017-01-01", "edit_comment": null, "address_part1": null, "address_part2": null, "address_part3": null, "legal_unit_id": 3214, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7554
DEBUG:  location row: {"id":7554,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"postal","address_part1":null,"address_part2":null,"address_part3":null,"postcode":"5068","postplace":"BERGEN","region_id":6938,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3214,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 32195, "valid_after": null, "edit_comment": null, "legal_unit_id": 3214, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 32195, "edit_comment": null, "legal_unit_id": 3214, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5995
DEBUG:  activity row: {"id":5995,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":32195,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3214}
DEBUG:  DEBUG: Selecting from public.activity where id = 5995
DEBUG:  activity row: {"id":5995,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":32195,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3214}
DEBUG:  UPSERT row {"id": null, "name": "SPORT OUTLET LILLEHAMMER 45 AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2017-08-10", "death_date": null, "short_name": null, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3215, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "SPORT OUTLET LILLEHAMMER 45 AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2017-08-10", "death_date": null, "short_name": null, "valid_from": "2017-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3215, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3215,"valid_after":null,"valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"SPORT OUTLET LILLEHAMMER 45 AS","birth_date":"2017-08-10","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3215,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3215
DEBUG:  legal_unit row: {"id":3215,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"SPORT OUTLET LILLEHAMMER 45 AS","birth_date":"2017-08-10","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3215,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "2619", "valid_to": "infinity", "longitude": null, "postplace": "LILLEHAMMER", "region_id": 6846, "country_id": 167, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Gudbrandsdalsvegen 188", "address_part2": null, "address_part3": null, "legal_unit_id": 3215, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "2619", "valid_to": "infinity", "longitude": null, "postplace": "LILLEHAMMER", "region_id": 6846, "country_id": 167, "valid_from": "2017-01-01", "edit_comment": null, "address_part1": "Gudbrandsdalsvegen 188", "address_part2": null, "address_part3": null, "legal_unit_id": 3215, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7555
DEBUG:  location row: {"id":7555,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":"Gudbrandsdalsvegen 188","address_part2":null,"address_part3":null,"postcode":"2619","postplace":"LILLEHAMMER","region_id":6846,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3215,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "5217", "valid_to": "infinity", "longitude": null, "postplace": "HAGAVIK", "region_id": 6953, "country_id": 167, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Ulvenvegen 344", "address_part2": null, "address_part3": null, "legal_unit_id": 3215, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "5217", "valid_to": "infinity", "longitude": null, "postplace": "HAGAVIK", "region_id": 6953, "country_id": 167, "valid_from": "2017-01-01", "edit_comment": null, "address_part1": "Ulvenvegen 344", "address_part2": null, "address_part3": null, "legal_unit_id": 3215, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7556
DEBUG:  location row: {"id":7556,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"postal","address_part1":"Ulvenvegen 344","address_part2":null,"address_part3":null,"postcode":"5217","postplace":"HAGAVIK","region_id":6953,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3215,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 31871, "valid_after": null, "edit_comment": null, "legal_unit_id": 3215, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 31871, "edit_comment": null, "legal_unit_id": 3215, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5996
DEBUG:  activity row: {"id":5996,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":31871,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3215}
DEBUG:  DEBUG: Selecting from public.activity where id = 5996
DEBUG:  activity row: {"id":5996,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":31871,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3215}
DEBUG:  UPSERT row {"id": null, "name": "AUREOSEN VELFORENING", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 590, "status_id": 1, "birth_date": "1976-01-01", "death_date": null, "short_name": null, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3216, "invalid_codes": null, "legal_form_id": 819, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "AUREOSEN VELFORENING", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 590, "status_id": 1, "birth_date": "1976-01-01", "death_date": null, "short_name": null, "valid_from": "2017-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3216, "invalid_codes": null, "legal_form_id": 819, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3216,"valid_after":null,"valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"AUREOSEN VELFORENING","birth_date":"1976-01-01","death_date":null,"free_econ_zone":null,"sector_id":590,"status_id":1,"legal_form_id":819,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3216,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3216
DEBUG:  legal_unit row: {"id":3216,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"AUREOSEN VELFORENING","birth_date":"1976-01-01","death_date":null,"free_econ_zone":null,"sector_id":590,"status_id":1,"legal_form_id":819,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3216,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "6408", "valid_to": "infinity", "longitude": null, "postplace": "AUREOSEN", "region_id": 6750, "country_id": 167, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": null, "address_part1": null, "address_part2": null, "address_part3": null, "legal_unit_id": 3216, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "6408", "valid_to": "infinity", "longitude": null, "postplace": "AUREOSEN", "region_id": 6750, "country_id": 167, "valid_from": "2017-01-01", "edit_comment": null, "address_part1": null, "address_part2": null, "address_part3": null, "legal_unit_id": 3216, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7557
DEBUG:  location row: {"id":7557,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":null,"address_part2":null,"address_part3":null,"postcode":"6408","postplace":"AUREOSEN","region_id":6750,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3216,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "6429", "valid_to": "infinity", "longitude": null, "postplace": "MOLDE", "region_id": 6726, "country_id": 167, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": null, "address_part1": "c/o Gry Sølvik/nHjellmyra 12D", "address_part2": null, "address_part3": null, "legal_unit_id": 3216, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "6429", "valid_to": "infinity", "longitude": null, "postplace": "MOLDE", "region_id": 6726, "country_id": 167, "valid_from": "2017-01-01", "edit_comment": null, "address_part1": "c/o Gry Sølvik/nHjellmyra 12D", "address_part2": null, "address_part3": null, "legal_unit_id": 3216, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7558
DEBUG:  location row: {"id":7558,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"postal","address_part1":"c/o Gry Sølvik/nHjellmyra 12D","address_part2":null,"address_part3":null,"postcode":"6429","postplace":"MOLDE","region_id":6726,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3216,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 32562, "valid_after": null, "edit_comment": null, "legal_unit_id": 3216, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 32562, "edit_comment": null, "legal_unit_id": 3216, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5997
DEBUG:  activity row: {"id":5997,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":32562,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3216}
DEBUG:  DEBUG: Selecting from public.activity where id = 5997
DEBUG:  activity row: {"id":5997,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":32562,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3216}
DEBUG:  UPSERT row {"id": null, "name": "BYGGMESTERFORBUNDET SALTEN", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 590, "status_id": 1, "birth_date": "2016-04-18", "death_date": null, "short_name": null, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3217, "invalid_codes": null, "legal_form_id": 819, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "BYGGMESTERFORBUNDET SALTEN", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 590, "status_id": 1, "birth_date": "2016-04-18", "death_date": null, "short_name": null, "valid_from": "2017-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3217, "invalid_codes": null, "legal_form_id": 819, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3217,"valid_after":null,"valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"BYGGMESTERFORBUNDET SALTEN","birth_date":"2016-04-18","death_date":null,"free_econ_zone":null,"sector_id":590,"status_id":1,"legal_form_id":819,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3217,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3217
DEBUG:  legal_unit row: {"id":3217,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"BYGGMESTERFORBUNDET SALTEN","birth_date":"2016-04-18","death_date":null,"free_econ_zone":null,"sector_id":590,"status_id":1,"legal_form_id":819,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3217,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "9042", "valid_to": "infinity", "longitude": null, "postplace": "LAKSVATN", "region_id": 7032, "country_id": 167, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": null, "address_part1": "c/o Bård Vegard Skogli/nSelnesveien 1221", "address_part2": null, "address_part3": null, "legal_unit_id": 3217, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "9042", "valid_to": "infinity", "longitude": null, "postplace": "LAKSVATN", "region_id": 7032, "country_id": 167, "valid_from": "2017-01-01", "edit_comment": null, "address_part1": "c/o Bård Vegard Skogli/nSelnesveien 1221", "address_part2": null, "address_part3": null, "legal_unit_id": 3217, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7559
DEBUG:  location row: {"id":7559,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":"c/o Bård Vegard Skogli/nSelnesveien 1221","address_part2":null,"address_part3":null,"postcode":"9042","postplace":"LAKSVATN","region_id":7032,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3217,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7559
DEBUG:  location row: {"id":7559,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":"c/o Bård Vegard Skogli/nSelnesveien 1221","address_part2":null,"address_part3":null,"postcode":"9042","postplace":"LAKSVATN","region_id":7032,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3217,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 32552, "valid_after": null, "edit_comment": null, "legal_unit_id": 3217, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 32552, "edit_comment": null, "legal_unit_id": 3217, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5998
DEBUG:  activity row: {"id":5998,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":32552,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3217}
DEBUG:  DEBUG: Selecting from public.activity where id = 5998
DEBUG:  activity row: {"id":5998,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":32552,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3217}
DEBUG:  UPSERT row {"id": null, "name": "PRIMA FERDIG HEKK", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": null, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3218, "invalid_codes": null, "legal_form_id": 830, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "PRIMA FERDIG HEKK", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": null, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2017-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3218, "invalid_codes": null, "legal_form_id": 830, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3218,"valid_after":null,"valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"PRIMA FERDIG HEKK","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":null,"status_id":1,"legal_form_id":830,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3218,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3218
DEBUG:  legal_unit row: {"id":3218,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"PRIMA FERDIG HEKK","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":null,"status_id":1,"legal_form_id":830,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3218,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": null, "valid_to": "infinity", "longitude": null, "postplace": "DK-5750 RINGE", "region_id": null, "country_id": 61, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Ravnshøjgyden 6/nSdr Højrup", "address_part2": null, "address_part3": null, "legal_unit_id": 3218, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": null, "valid_to": "infinity", "longitude": null, "postplace": "DK-5750 RINGE", "region_id": null, "country_id": 61, "valid_from": "2017-01-01", "edit_comment": null, "address_part1": "Ravnshøjgyden 6/nSdr Højrup", "address_part2": null, "address_part3": null, "legal_unit_id": 3218, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7560
DEBUG:  location row: {"id":7560,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"physical","address_part1":"Ravnshøjgyden 6/nSdr Højrup","address_part2":null,"address_part3":null,"postcode":null,"postplace":"DK-5750 RINGE","region_id":null,"country_id":61,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3218,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "1914", "valid_to": "infinity", "longitude": null, "postplace": "YTRE ENEBAKK", "region_id": 6814, "country_id": 167, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": null, "address_part1": "c/o Scanvisio AS/nAndersrudveien 1", "address_part2": null, "address_part3": null, "legal_unit_id": 3218, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "1914", "valid_to": "infinity", "longitude": null, "postplace": "YTRE ENEBAKK", "region_id": 6814, "country_id": 167, "valid_from": "2017-01-01", "edit_comment": null, "address_part1": "c/o Scanvisio AS/nAndersrudveien 1", "address_part2": null, "address_part3": null, "legal_unit_id": 3218, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7561
DEBUG:  location row: {"id":7561,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"postal","address_part1":"c/o Scanvisio AS/nAndersrudveien 1","address_part2":null,"address_part3":null,"postcode":"1914","postplace":"YTRE ENEBAKK","region_id":6814,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3218,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 31917, "valid_after": null, "edit_comment": null, "legal_unit_id": 3218, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2017-01-01", "category_id": 31917, "edit_comment": null, "legal_unit_id": 3218, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 5999
DEBUG:  activity row: {"id":5999,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":31917,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3218}
DEBUG:  DEBUG: Selecting from public.activity where id = 5999
DEBUG:  activity row: {"id":5999,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","type":"primary","category_id":31917,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3218}
DEBUG:  UPSERT row {"id": null, "name": "HELSEHUSETS VENNER", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 590, "status_id": 1, "birth_date": "2018-02-07", "death_date": null, "short_name": null, "valid_from": "2017-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3219, "invalid_codes": null, "legal_form_id": 819, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "HELSEHUSETS VENNER", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 590, "status_id": 1, "birth_date": "2018-02-07", "death_date": null, "short_name": null, "valid_from": "2017-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3219, "invalid_codes": null, "legal_form_id": 819, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3219,"valid_after":null,"valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"HELSEHUSETS VENNER","birth_date":"2018-02-07","death_date":null,"free_econ_zone":null,"sector_id":590,"status_id":1,"legal_form_id":819,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3219,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3219
DEBUG:  legal_unit row: {"id":3219,"valid_after":"2016-12-31","valid_from":"2017-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"HELSEHUSETS VENNER","birth_date":"2018-02-07","death_date":null,"free_econ_zone":null,"sector_id":590,"status_id":1,"legal_form_id":819,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3219,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  IMPORT_JOB_INSERT: Error executing batch insert: record "inserted_location" is not assigned yet
WARNING:  Error importing batch: record "inserted_location" is not assigned yet. 1000 rows marked as error.
DEBUG:  IMPORT_JOB_INSERT: Continuing with next batch, 362 rows remaining
DEBUG:  IMPORT_JOB_INSERT: Batches processed. Counts - Pending: 362, Imported: 0, Errors: 1000
DEBUG:  IMPORT_JOB_INSERT: Final update of imported_rows to 0
DEBUG:  IMPORT_JOB_INSERT: Still have 362 rows to import, will continue in next transaction
DEBUG:  Reset user context to original user 5625d86b-1e1d-43fc-bfa1-eb3911635881
DEBUG:  Rescheduled import job 19 for further processing
DEBUG:  Task 562 (import_job_process) completed in 172.028000 ms
DEBUG:  Set user context to 5625d86b-1e1d-43fc-bfa1-eb3911635881 for import job 20
DEBUG:  IMPORT_JOB_INSERT: Starting import from import_hovedenhet_2018_data to public.import_legal_unit_era
DEBUG:  IMPORT_JOB_INSERT: Target columns: tax_ident,name,legal_form_code,primary_activity_category_code,secondary_activity_category_code,postal_address_part1,postal_postplace,postal_postcode,postal_region_code,postal_country_iso_2,physical_address_part1,physical_postplace,physical_postcode,physical_region_code,physical_country_iso_2,sector_code,birth_date,valid_from,valid_to
DEBUG:  IMPORT_JOB_INSERT: Uniquely identifying columns: tax_ident
DEBUG:  IMPORT_JOB_INSERT: Initial state - Pending: 1501, Processing: 0, Imported: 0, Error: 0
DEBUG:  IMPORT_JOB_INSERT: Starting batch processing with 1501 pending rows
DEBUG:  IMPORT_JOB_INSERT: Starting new batch, remaining rows: 1501
DEBUG:  IMPORT_JOB_INSERT: Marking batch SQL: 
                    UPDATE public.import_hovedenhet_2018_data
                    SET state = 'importing'
                    WHERE state = 'pending'
                    AND ctid IN (
                        SELECT ctid
                        FROM public.import_hovedenhet_2018_data
                        WHERE state = 'pending'
                        ORDER BY tax_ident
                        LIMIT 1000
                    );
                
DEBUG:  IMPORT_JOB_INSERT: Marked 1000 rows as processing
DEBUG:  IMPORT_JOB_INSERT: Batch insert SQL: 
                WITH batch AS (
                    SELECT tax_ident,name,legal_form_code,primary_activity_category_code,secondary_activity_category_code,postal_address_part1,postal_postplace,postal_postcode,postal_region_code,postal_country_iso_2,physical_address_part1,physical_postplace,physical_postcode,physical_region_code,physical_country_iso_2,sector_code,birth_date,valid_from,valid_to, ctid AS source_ctid
                    FROM public.import_hovedenhet_2018_data
                    WHERE state = 'importing'
                    ORDER BY tax_ident
                    FOR UPDATE
                ),
                inserted AS (
                    INSERT INTO public.import_legal_unit_era (tax_ident,name,legal_form_code,primary_activity_category_code,secondary_activity_category_code,postal_address_part1,postal_postplace,postal_postcode,postal_region_code,postal_country_iso_2,physical_address_part1,physical_postplace,physical_postcode,physical_region_code,physical_country_iso_2,sector_code,birth_date,valid_from,valid_to)
                    SELECT tax_ident,name,legal_form_code,primary_activity_category_code,secondary_activity_category_code,postal_address_part1,postal_postplace,postal_postcode,postal_region_code,postal_country_iso_2,physical_address_part1,physical_postplace,physical_postcode,physical_region_code,physical_country_iso_2,sector_code,birth_date,valid_from,valid_to FROM batch
                    RETURNING 1 AS inserted_row
                )
                SELECT COUNT(*) FROM inserted;
            
DEBUG:  UPSERT row {"id": null, "name": "KJÆREVIK HOLDING AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2013-05-28", "death_date": null, "short_name": null, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3220, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "KJÆREVIK HOLDING AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2013-05-28", "death_date": null, "short_name": null, "valid_from": "2018-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3220, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3220,"valid_after":null,"valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"KJÆREVIK HOLDING AS","birth_date":"2013-05-28","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3220,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3220
DEBUG:  legal_unit row: {"id":3220,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"KJÆREVIK HOLDING AS","birth_date":"2013-05-28","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3220,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "5636", "valid_to": "infinity", "longitude": null, "postplace": "VARALDSØY", "region_id": 6946, "country_id": 167, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Kjæraviksvegen 200", "address_part2": null, "address_part3": null, "legal_unit_id": 3220, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "5636", "valid_to": "infinity", "longitude": null, "postplace": "VARALDSØY", "region_id": 6946, "country_id": 167, "valid_from": "2018-01-01", "edit_comment": null, "address_part1": "Kjæraviksvegen 200", "address_part2": null, "address_part3": null, "legal_unit_id": 3220, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7562
DEBUG:  location row: {"id":7562,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Kjæraviksvegen 200","address_part2":null,"address_part3":null,"postcode":"5636","postplace":"VARALDSØY","region_id":6946,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3220,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7562
DEBUG:  location row: {"id":7562,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Kjæraviksvegen 200","address_part2":null,"address_part3":null,"postcode":"5636","postplace":"VARALDSØY","region_id":6946,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3220,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 32171, "valid_after": null, "edit_comment": null, "legal_unit_id": 3220, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 32171, "edit_comment": null, "legal_unit_id": 3220, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 6000
DEBUG:  activity row: {"id":6000,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":32171,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3220}
DEBUG:  DEBUG: Selecting from public.activity where id = 6000
DEBUG:  activity row: {"id":6000,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":32171,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3220}
DEBUG:  UPSERT row {"id": null, "name": "SCOTT FINANS AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2005-10-18", "death_date": null, "short_name": null, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3221, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "SCOTT FINANS AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2005-10-18", "death_date": null, "short_name": null, "valid_from": "2018-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3221, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3221,"valid_after":null,"valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"SCOTT FINANS AS","birth_date":"2005-10-18","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3221,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3221
DEBUG:  legal_unit row: {"id":3221,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"SCOTT FINANS AS","birth_date":"2005-10-18","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3221,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3320", "valid_to": "infinity", "longitude": null, "postplace": "VESTFOSSEN", "region_id": 6831, "country_id": 167, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Røkebergveien 6", "address_part2": null, "address_part3": null, "legal_unit_id": 3221, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3320", "valid_to": "infinity", "longitude": null, "postplace": "VESTFOSSEN", "region_id": 6831, "country_id": 167, "valid_from": "2018-01-01", "edit_comment": null, "address_part1": "Røkebergveien 6", "address_part2": null, "address_part3": null, "legal_unit_id": 3221, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7563
DEBUG:  location row: {"id":7563,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Røkebergveien 6","address_part2":null,"address_part3":null,"postcode":"3320","postplace":"VESTFOSSEN","region_id":6831,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3221,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7563
DEBUG:  location row: {"id":7563,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Røkebergveien 6","address_part2":null,"address_part3":null,"postcode":"3320","postplace":"VESTFOSSEN","region_id":6831,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3221,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 31793, "valid_after": null, "edit_comment": null, "legal_unit_id": 3221, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 31793, "edit_comment": null, "legal_unit_id": 3221, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 6001
DEBUG:  activity row: {"id":6001,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":31793,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3221}
DEBUG:  DEBUG: Selecting from public.activity where id = 6001
DEBUG:  activity row: {"id":6001,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":31793,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3221}
DEBUG:  UPSERT row {"id": null, "name": "TEGNET AV BRUÅS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3222, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "TEGNET AV BRUÅS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2018-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3222, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3222,"valid_after":null,"valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"TEGNET AV BRUÅS","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3222,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3222
DEBUG:  legal_unit row: {"id":3222,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"TEGNET AV BRUÅS","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3222,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "0690", "valid_to": "infinity", "longitude": null, "postplace": "OSLO", "region_id": 6701, "country_id": 167, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Ulsrudveien 23C", "address_part2": null, "address_part3": null, "legal_unit_id": 3222, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "0690", "valid_to": "infinity", "longitude": null, "postplace": "OSLO", "region_id": 6701, "country_id": 167, "valid_from": "2018-01-01", "edit_comment": null, "address_part1": "Ulsrudveien 23C", "address_part2": null, "address_part3": null, "legal_unit_id": 3222, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7564
DEBUG:  location row: {"id":7564,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Ulsrudveien 23C","address_part2":null,"address_part3":null,"postcode":"0690","postplace":"OSLO","region_id":6701,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3222,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7564
DEBUG:  location row: {"id":7564,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Ulsrudveien 23C","address_part2":null,"address_part3":null,"postcode":"0690","postplace":"OSLO","region_id":6701,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3222,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 32231, "valid_after": null, "edit_comment": null, "legal_unit_id": 3222, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 32231, "edit_comment": null, "legal_unit_id": 3222, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 6002
DEBUG:  activity row: {"id":6002,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":32231,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3222}
DEBUG:  DEBUG: Selecting from public.activity where id = 6002
DEBUG:  activity row: {"id":6002,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":32231,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3222}
DEBUG:  UPSERT row {"id": null, "name": "REED PROJECTS AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2014-06-13", "death_date": null, "short_name": null, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3223, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "REED PROJECTS AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2014-06-13", "death_date": null, "short_name": null, "valid_from": "2018-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3223, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3223,"valid_after":null,"valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"REED PROJECTS AS","birth_date":"2014-06-13","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3223,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3223
DEBUG:  legal_unit row: {"id":3223,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"REED PROJECTS AS","birth_date":"2014-06-13","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3223,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "4014", "valid_to": "infinity", "longitude": null, "postplace": "STAVANGER", "region_id": 6703, "country_id": 167, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Kvitsøygata 25", "address_part2": null, "address_part3": null, "legal_unit_id": 3223, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "4014", "valid_to": "infinity", "longitude": null, "postplace": "STAVANGER", "region_id": 6703, "country_id": 167, "valid_from": "2018-01-01", "edit_comment": null, "address_part1": "Kvitsøygata 25", "address_part2": null, "address_part3": null, "legal_unit_id": 3223, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7565
DEBUG:  location row: {"id":7565,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Kvitsøygata 25","address_part2":null,"address_part3":null,"postcode":"4014","postplace":"STAVANGER","region_id":6703,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3223,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "4014", "valid_to": "infinity", "longitude": null, "postplace": "STAVANGER", "region_id": 6703, "country_id": 167, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": null, "address_part1": "TOU/nPostboks 1590 Kjelvene", "address_part2": null, "address_part3": null, "legal_unit_id": 3223, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "4014", "valid_to": "infinity", "longitude": null, "postplace": "STAVANGER", "region_id": 6703, "country_id": 167, "valid_from": "2018-01-01", "edit_comment": null, "address_part1": "TOU/nPostboks 1590 Kjelvene", "address_part2": null, "address_part3": null, "legal_unit_id": 3223, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7566
DEBUG:  location row: {"id":7566,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"postal","address_part1":"TOU/nPostboks 1590 Kjelvene","address_part2":null,"address_part3":null,"postcode":"4014","postplace":"STAVANGER","region_id":6703,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3223,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 31896, "valid_after": null, "edit_comment": null, "legal_unit_id": 3223, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 31896, "edit_comment": null, "legal_unit_id": 3223, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 6003
DEBUG:  activity row: {"id":6003,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":31896,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3223}
DEBUG:  DEBUG: Selecting from public.activity where id = 6003
DEBUG:  activity row: {"id":6003,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":31896,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3223}
DEBUG:  UPSERT row {"id": null, "name": "THRINO SA", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2014-08-26", "death_date": null, "short_name": null, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3224, "invalid_codes": null, "legal_form_id": 837, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "THRINO SA", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2014-08-26", "death_date": null, "short_name": null, "valid_from": "2018-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3224, "invalid_codes": null, "legal_form_id": 837, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3224,"valid_after":null,"valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"THRINO SA","birth_date":"2014-08-26","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":837,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3224,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3224
DEBUG:  legal_unit row: {"id":3224,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"THRINO SA","birth_date":"2014-08-26","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":837,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3224,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3132", "valid_to": "infinity", "longitude": null, "postplace": "HUSØYSUND", "region_id": 6895, "country_id": 167, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Bjørnebuveien 21A", "address_part2": null, "address_part3": null, "legal_unit_id": 3224, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3132", "valid_to": "infinity", "longitude": null, "postplace": "HUSØYSUND", "region_id": 6895, "country_id": 167, "valid_from": "2018-01-01", "edit_comment": null, "address_part1": "Bjørnebuveien 21A", "address_part2": null, "address_part3": null, "legal_unit_id": 3224, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7567
DEBUG:  location row: {"id":7567,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Bjørnebuveien 21A","address_part2":null,"address_part3":null,"postcode":"3132","postplace":"HUSØYSUND","region_id":6895,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3224,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7567
DEBUG:  location row: {"id":7567,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Bjørnebuveien 21A","address_part2":null,"address_part3":null,"postcode":"3132","postplace":"HUSØYSUND","region_id":6895,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3224,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 32090, "valid_after": null, "edit_comment": null, "legal_unit_id": 3224, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 32090, "edit_comment": null, "legal_unit_id": 3224, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 6004
DEBUG:  activity row: {"id":6004,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":32090,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3224}
DEBUG:  DEBUG: Selecting from public.activity where id = 6004
DEBUG:  activity row: {"id":6004,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":32090,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3224}
DEBUG:  UPSERT row {"id": null, "name": "VEGANMISJONEN JANE HELEN JOHANSEN", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3225, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "VEGANMISJONEN JANE HELEN JOHANSEN", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2018-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3225, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3225,"valid_after":null,"valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"VEGANMISJONEN JANE HELEN JOHANSEN","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3225,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3225
DEBUG:  legal_unit row: {"id":3225,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"VEGANMISJONEN JANE HELEN JOHANSEN","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3225,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3924", "valid_to": "infinity", "longitude": null, "postplace": "PORSGRUNN", "region_id": 6896, "country_id": 167, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Grønlihamna 12", "address_part2": null, "address_part3": null, "legal_unit_id": 3225, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3924", "valid_to": "infinity", "longitude": null, "postplace": "PORSGRUNN", "region_id": 6896, "country_id": 167, "valid_from": "2018-01-01", "edit_comment": null, "address_part1": "Grønlihamna 12", "address_part2": null, "address_part3": null, "legal_unit_id": 3225, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7568
DEBUG:  location row: {"id":7568,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Grønlihamna 12","address_part2":null,"address_part3":null,"postcode":"3924","postplace":"PORSGRUNN","region_id":6896,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3225,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7568
DEBUG:  location row: {"id":7568,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Grønlihamna 12","address_part2":null,"address_part3":null,"postcode":"3924","postplace":"PORSGRUNN","region_id":6896,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3225,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 32505, "valid_after": null, "edit_comment": null, "legal_unit_id": 3225, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 32505, "edit_comment": null, "legal_unit_id": 3225, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 6005
DEBUG:  activity row: {"id":6005,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":32505,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3225}
DEBUG:  DEBUG: Selecting from public.activity where id = 6005
DEBUG:  activity row: {"id":6005,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":32505,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3225}
DEBUG:  UPSERT row {"id": null, "name": "ROPPEN STVE", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3226, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "ROPPEN STVE", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2018-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3226, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3226,"valid_after":null,"valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"ROPPEN STVE","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3226,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3226
DEBUG:  legal_unit row: {"id":3226,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"ROPPEN STVE","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3226,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "5006", "valid_to": "infinity", "longitude": null, "postplace": "BERGEN", "region_id": 6938, "country_id": 167, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Storms gate 14", "address_part2": null, "address_part3": null, "legal_unit_id": 3226, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "5006", "valid_to": "infinity", "longitude": null, "postplace": "BERGEN", "region_id": 6938, "country_id": 167, "valid_from": "2018-01-01", "edit_comment": null, "address_part1": "Storms gate 14", "address_part2": null, "address_part3": null, "legal_unit_id": 3226, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7569
DEBUG:  location row: {"id":7569,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Storms gate 14","address_part2":null,"address_part3":null,"postcode":"5006","postplace":"BERGEN","region_id":6938,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3226,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7569
DEBUG:  location row: {"id":7569,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Storms gate 14","address_part2":null,"address_part3":null,"postcode":"5006","postplace":"BERGEN","region_id":6938,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3226,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 32193, "valid_after": null, "edit_comment": null, "legal_unit_id": 3226, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 32193, "edit_comment": null, "legal_unit_id": 3226, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 6006
DEBUG:  activity row: {"id":6006,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":32193,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3226}
DEBUG:  DEBUG: Selecting from public.activity where id = 6006
DEBUG:  activity row: {"id":6006,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":32193,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3226}
DEBUG:  UPSERT row {"id": null, "name": "SCHECK - KUNST OG DESIGN", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3227, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "SCHECK - KUNST OG DESIGN", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2018-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3227, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3227,"valid_after":null,"valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"SCHECK - KUNST OG DESIGN","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3227,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3227
DEBUG:  legal_unit row: {"id":3227,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"SCHECK - KUNST OG DESIGN","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3227,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "4844", "valid_to": "infinity", "longitude": null, "postplace": "ARENDAL", "region_id": 6915, "country_id": 167, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Nygårdsveien 4", "address_part2": null, "address_part3": null, "legal_unit_id": 3227, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "4844", "valid_to": "infinity", "longitude": null, "postplace": "ARENDAL", "region_id": 6915, "country_id": 167, "valid_from": "2018-01-01", "edit_comment": null, "address_part1": "Nygårdsveien 4", "address_part2": null, "address_part3": null, "legal_unit_id": 3227, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7570
DEBUG:  location row: {"id":7570,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Nygårdsveien 4","address_part2":null,"address_part3":null,"postcode":"4844","postplace":"ARENDAL","region_id":6915,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3227,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7570
DEBUG:  location row: {"id":7570,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Nygårdsveien 4","address_part2":null,"address_part3":null,"postcode":"4844","postplace":"ARENDAL","region_id":6915,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3227,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 32502, "valid_after": null, "edit_comment": null, "legal_unit_id": 3227, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 32502, "edit_comment": null, "legal_unit_id": 3227, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 6007
DEBUG:  activity row: {"id":6007,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":32502,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3227}
DEBUG:  DEBUG: Selecting from public.activity where id = 6007
DEBUG:  activity row: {"id":6007,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":32502,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3227}
DEBUG:  UPSERT row {"id": null, "name": "HANNA SANNES AANONSEN", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3228, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "HANNA SANNES AANONSEN", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2018-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3228, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3228,"valid_after":null,"valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"HANNA SANNES AANONSEN","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3228,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3228
DEBUG:  legal_unit row: {"id":3228,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"HANNA SANNES AANONSEN","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3228,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "0684", "valid_to": "infinity", "longitude": null, "postplace": "OSLO", "region_id": 6701, "country_id": 167, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Vetlandsfaret 12B", "address_part2": null, "address_part3": null, "legal_unit_id": 3228, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "0684", "valid_to": "infinity", "longitude": null, "postplace": "OSLO", "region_id": 6701, "country_id": 167, "valid_from": "2018-01-01", "edit_comment": null, "address_part1": "Vetlandsfaret 12B", "address_part2": null, "address_part3": null, "legal_unit_id": 3228, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7571
DEBUG:  location row: {"id":7571,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Vetlandsfaret 12B","address_part2":null,"address_part3":null,"postcode":"0684","postplace":"OSLO","region_id":6701,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3228,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7571
DEBUG:  location row: {"id":7571,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Vetlandsfaret 12B","address_part2":null,"address_part3":null,"postcode":"0684","postplace":"OSLO","region_id":6701,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3228,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 32496, "valid_after": null, "edit_comment": null, "legal_unit_id": 3228, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 32496, "edit_comment": null, "legal_unit_id": 3228, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 6008
DEBUG:  activity row: {"id":6008,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":32496,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3228}
DEBUG:  DEBUG: Selecting from public.activity where id = 6008
DEBUG:  activity row: {"id":6008,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":32496,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3228}
DEBUG:  UPSERT row {"id": null, "name": "BRAGE PELLE STIG BRAGE-ANDERSEN", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3229, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "BRAGE PELLE STIG BRAGE-ANDERSEN", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2018-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3229, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3229,"valid_after":null,"valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"BRAGE PELLE STIG BRAGE-ANDERSEN","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3229,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3229
DEBUG:  legal_unit row: {"id":3229,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"BRAGE PELLE STIG BRAGE-ANDERSEN","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3229,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "4610", "valid_to": "infinity", "longitude": null, "postplace": "KRISTIANSAND S", "region_id": 6916, "country_id": 167, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Odderøyveien 32", "address_part2": null, "address_part3": null, "legal_unit_id": 3229, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "4610", "valid_to": "infinity", "longitude": null, "postplace": "KRISTIANSAND S", "region_id": 6916, "country_id": 167, "valid_from": "2018-01-01", "edit_comment": null, "address_part1": "Odderøyveien 32", "address_part2": null, "address_part3": null, "legal_unit_id": 3229, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7572
DEBUG:  location row: {"id":7572,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Odderøyveien 32","address_part2":null,"address_part3":null,"postcode":"4610","postplace":"KRISTIANSAND S","region_id":6916,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3229,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "4770", "valid_to": "infinity", "longitude": null, "postplace": "HØVÅG", "region_id": 6924, "country_id": 167, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Humlejordet 67", "address_part2": null, "address_part3": null, "legal_unit_id": 3229, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "4770", "valid_to": "infinity", "longitude": null, "postplace": "HØVÅG", "region_id": 6924, "country_id": 167, "valid_from": "2018-01-01", "edit_comment": null, "address_part1": "Humlejordet 67", "address_part2": null, "address_part3": null, "legal_unit_id": 3229, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7573
DEBUG:  location row: {"id":7573,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"postal","address_part1":"Humlejordet 67","address_part2":null,"address_part3":null,"postcode":"4770","postplace":"HØVÅG","region_id":6924,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3229,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 32502, "valid_after": null, "edit_comment": null, "legal_unit_id": 3229, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 32502, "edit_comment": null, "legal_unit_id": 3229, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 6009
DEBUG:  activity row: {"id":6009,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":32502,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3229}
DEBUG:  DEBUG: Selecting from public.activity where id = 6009
DEBUG:  activity row: {"id":6009,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":32502,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3229}
DEBUG:  UPSERT row {"id": null, "name": "MICROLOG AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2015-05-26", "death_date": null, "short_name": null, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3230, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "MICROLOG AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2015-05-26", "death_date": null, "short_name": null, "valid_from": "2018-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3230, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3230,"valid_after":null,"valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"MICROLOG AS","birth_date":"2015-05-26","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3230,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3230
DEBUG:  legal_unit row: {"id":3230,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"MICROLOG AS","birth_date":"2015-05-26","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3230,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "1405", "valid_to": "infinity", "longitude": null, "postplace": "LANGHUS", "region_id": 6808, "country_id": 167, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Parkveien 23", "address_part2": null, "address_part3": null, "legal_unit_id": 3230, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "1405", "valid_to": "infinity", "longitude": null, "postplace": "LANGHUS", "region_id": 6808, "country_id": 167, "valid_from": "2018-01-01", "edit_comment": null, "address_part1": "Parkveien 23", "address_part2": null, "address_part3": null, "legal_unit_id": 3230, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7574
DEBUG:  location row: {"id":7574,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Parkveien 23","address_part2":null,"address_part3":null,"postcode":"1405","postplace":"LANGHUS","region_id":6808,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3230,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7574
DEBUG:  location row: {"id":7574,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Parkveien 23","address_part2":null,"address_part3":null,"postcode":"1405","postplace":"LANGHUS","region_id":6808,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3230,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 31778, "valid_after": null, "edit_comment": null, "legal_unit_id": 3230, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 31778, "edit_comment": null, "legal_unit_id": 3230, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 6010
DEBUG:  activity row: {"id":6010,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":31778,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3230}
DEBUG:  DEBUG: Selecting from public.activity where id = 6010
DEBUG:  activity row: {"id":6010,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":31778,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3230}
DEBUG:  UPSERT row {"id": null, "name": "HELLERUDLIA AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2015-05-20", "death_date": null, "short_name": null, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3231, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "HELLERUDLIA AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2015-05-20", "death_date": null, "short_name": null, "valid_from": "2018-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3231, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3231,"valid_after":null,"valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"HELLERUDLIA AS","birth_date":"2015-05-20","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3231,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3231
DEBUG:  legal_unit row: {"id":3231,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"HELLERUDLIA AS","birth_date":"2015-05-20","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3231,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3045", "valid_to": "infinity", "longitude": null, "postplace": "DRAMMEN", "region_id": 6826, "country_id": 167, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Grønland 67", "address_part2": null, "address_part3": null, "legal_unit_id": 3231, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3045", "valid_to": "infinity", "longitude": null, "postplace": "DRAMMEN", "region_id": 6826, "country_id": 167, "valid_from": "2018-01-01", "edit_comment": null, "address_part1": "Grønland 67", "address_part2": null, "address_part3": null, "legal_unit_id": 3231, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7575
DEBUG:  location row: {"id":7575,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Grønland 67","address_part2":null,"address_part3":null,"postcode":"3045","postplace":"DRAMMEN","region_id":6826,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3231,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3001", "valid_to": "infinity", "longitude": null, "postplace": "DRAMMEN", "region_id": 6826, "country_id": 167, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Postboks 323 Bragernes", "address_part2": null, "address_part3": null, "legal_unit_id": 3231, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "3001", "valid_to": "infinity", "longitude": null, "postplace": "DRAMMEN", "region_id": 6826, "country_id": 167, "valid_from": "2018-01-01", "edit_comment": null, "address_part1": "Postboks 323 Bragernes", "address_part2": null, "address_part3": null, "legal_unit_id": 3231, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7576
DEBUG:  location row: {"id":7576,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"postal","address_part1":"Postboks 323 Bragernes","address_part2":null,"address_part3":null,"postcode":"3001","postplace":"DRAMMEN","region_id":6826,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3231,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 31599, "valid_after": null, "edit_comment": null, "legal_unit_id": 3231, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 31599, "edit_comment": null, "legal_unit_id": 3231, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 6011
DEBUG:  activity row: {"id":6011,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":31599,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3231}
DEBUG:  DEBUG: Selecting from public.activity where id = 6011
DEBUG:  activity row: {"id":6011,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":31599,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3231}
DEBUG:  UPSERT row {"id": null, "name": "BEST BEMANNING AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 583, "status_id": 1, "birth_date": "2021-04-26", "death_date": null, "short_name": null, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3232, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "BEST BEMANNING AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 583, "status_id": 1, "birth_date": "2021-04-26", "death_date": null, "short_name": null, "valid_from": "2018-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3232, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3232,"valid_after":null,"valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"BEST BEMANNING AS","birth_date":"2021-04-26","death_date":null,"free_econ_zone":null,"sector_id":583,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3232,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3232
DEBUG:  legal_unit row: {"id":3232,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"BEST BEMANNING AS","birth_date":"2021-04-26","death_date":null,"free_econ_zone":null,"sector_id":583,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3232,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "0154", "valid_to": "infinity", "longitude": null, "postplace": "OSLO", "region_id": 6701, "country_id": 167, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Karl Johans gate 8", "address_part2": null, "address_part3": null, "legal_unit_id": 3232, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "0154", "valid_to": "infinity", "longitude": null, "postplace": "OSLO", "region_id": 6701, "country_id": 167, "valid_from": "2018-01-01", "edit_comment": null, "address_part1": "Karl Johans gate 8", "address_part2": null, "address_part3": null, "legal_unit_id": 3232, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7577
DEBUG:  location row: {"id":7577,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Karl Johans gate 8","address_part2":null,"address_part3":null,"postcode":"0154","postplace":"OSLO","region_id":6701,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3232,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7577
DEBUG:  location row: {"id":7577,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Karl Johans gate 8","address_part2":null,"address_part3":null,"postcode":"0154","postplace":"OSLO","region_id":6701,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3232,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 32152, "valid_after": null, "edit_comment": null, "legal_unit_id": 3232, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 32152, "edit_comment": null, "legal_unit_id": 3232, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 6012
DEBUG:  activity row: {"id":6012,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":32152,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3232}
DEBUG:  DEBUG: Selecting from public.activity where id = 6012
DEBUG:  activity row: {"id":6012,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":32152,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3232}
DEBUG:  UPSERT row {"id": null, "name": "LEGE ASLAK JOHANSEN", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3233, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "LEGE ASLAK JOHANSEN", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2018-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3233, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3233,"valid_after":null,"valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"LEGE ASLAK JOHANSEN","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3233,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3233
DEBUG:  legal_unit row: {"id":3233,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"LEGE ASLAK JOHANSEN","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3233,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "7654", "valid_to": "infinity", "longitude": null, "postplace": "VERDAL", "region_id": 7000, "country_id": 167, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Grustaket 4B", "address_part2": null, "address_part3": null, "legal_unit_id": 3233, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "7654", "valid_to": "infinity", "longitude": null, "postplace": "VERDAL", "region_id": 7000, "country_id": 167, "valid_from": "2018-01-01", "edit_comment": null, "address_part1": "Grustaket 4B", "address_part2": null, "address_part3": null, "legal_unit_id": 3233, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7578
DEBUG:  location row: {"id":7578,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Grustaket 4B","address_part2":null,"address_part3":null,"postcode":"7654","postplace":"VERDAL","region_id":7000,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3233,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7578
DEBUG:  location row: {"id":7578,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Grustaket 4B","address_part2":null,"address_part3":null,"postcode":"7654","postplace":"VERDAL","region_id":7000,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3233,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 32429, "valid_after": null, "edit_comment": null, "legal_unit_id": 3233, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 32429, "edit_comment": null, "legal_unit_id": 3233, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 6013
DEBUG:  activity row: {"id":6013,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":32429,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3233}
DEBUG:  DEBUG: Selecting from public.activity where id = 6013
DEBUG:  activity row: {"id":6013,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":32429,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3233}
DEBUG:  UPSERT row {"id": null, "name": "AM OLAFSDOTTIR", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3234, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "AM OLAFSDOTTIR", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2018-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3234, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3234,"valid_after":null,"valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"AM OLAFSDOTTIR","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3234,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3234
DEBUG:  legal_unit row: {"id":3234,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"AM OLAFSDOTTIR","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3234,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "5518", "valid_to": "infinity", "longitude": null, "postplace": "HAUGESUND", "region_id": 6704, "country_id": 167, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Sørhallet 68", "address_part2": null, "address_part3": null, "legal_unit_id": 3234, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "5518", "valid_to": "infinity", "longitude": null, "postplace": "HAUGESUND", "region_id": 6704, "country_id": 167, "valid_from": "2018-01-01", "edit_comment": null, "address_part1": "Sørhallet 68", "address_part2": null, "address_part3": null, "legal_unit_id": 3234, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7579
DEBUG:  location row: {"id":7579,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Sørhallet 68","address_part2":null,"address_part3":null,"postcode":"5518","postplace":"HAUGESUND","region_id":6704,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3234,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7579
DEBUG:  location row: {"id":7579,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Sørhallet 68","address_part2":null,"address_part3":null,"postcode":"5518","postplace":"HAUGESUND","region_id":6704,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3234,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 32232, "valid_after": null, "edit_comment": null, "legal_unit_id": 3234, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 32232, "edit_comment": null, "legal_unit_id": 3234, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 6014
DEBUG:  activity row: {"id":6014,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":32232,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3234}
DEBUG:  DEBUG: Selecting from public.activity where id = 6014
DEBUG:  activity row: {"id":6014,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":32232,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3234}
DEBUG:  UPSERT row {"id": null, "name": "CEBO HOLLAND B.V.", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": null, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3235, "invalid_codes": null, "legal_form_id": 830, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "CEBO HOLLAND B.V.", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": null, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2018-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3235, "invalid_codes": null, "legal_form_id": 830, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3235,"valid_after":null,"valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"CEBO HOLLAND B.V.","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":null,"status_id":1,"legal_form_id":830,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3235,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3235
DEBUG:  legal_unit row: {"id":3235,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"CEBO HOLLAND B.V.","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":null,"status_id":1,"legal_form_id":830,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3235,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": null, "valid_to": "infinity", "longitude": null, "postplace": "1976 BV IJMUIDEN", "region_id": null, "country_id": 158, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Westerduinweg 1", "address_part2": null, "address_part3": null, "legal_unit_id": 3235, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": null, "valid_to": "infinity", "longitude": null, "postplace": "1976 BV IJMUIDEN", "region_id": null, "country_id": 158, "valid_from": "2018-01-01", "edit_comment": null, "address_part1": "Westerduinweg 1", "address_part2": null, "address_part3": null, "legal_unit_id": 3235, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7580
DEBUG:  location row: {"id":7580,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Westerduinweg 1","address_part2":null,"address_part3":null,"postcode":null,"postplace":"1976 BV IJMUIDEN","region_id":null,"country_id":158,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3235,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7580
DEBUG:  location row: {"id":7580,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Westerduinweg 1","address_part2":null,"address_part3":null,"postcode":null,"postplace":"1976 BV IJMUIDEN","region_id":null,"country_id":158,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3235,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 31780, "valid_after": null, "edit_comment": null, "legal_unit_id": 3235, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 31780, "edit_comment": null, "legal_unit_id": 3235, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 6015
DEBUG:  activity row: {"id":6015,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":31780,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3235}
DEBUG:  DEBUG: Selecting from public.activity where id = 6015
DEBUG:  activity row: {"id":6015,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":31780,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3235}
DEBUG:  UPSERT row {"id": null, "name": "HYLKJE NÆRINGSBYGG 14 AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2016-10-12", "death_date": null, "short_name": null, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3236, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "HYLKJE NÆRINGSBYGG 14 AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2016-10-12", "death_date": null, "short_name": null, "valid_from": "2018-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3236, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3236,"valid_after":null,"valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"HYLKJE NÆRINGSBYGG 14 AS","birth_date":"2016-10-12","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3236,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3236
DEBUG:  legal_unit row: {"id":3236,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"HYLKJE NÆRINGSBYGG 14 AS","birth_date":"2016-10-12","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3236,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "5109", "valid_to": "infinity", "longitude": null, "postplace": "HYLKJE", "region_id": 6938, "country_id": 167, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Hylkjeflaten 32A", "address_part2": null, "address_part3": null, "legal_unit_id": 3236, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "5109", "valid_to": "infinity", "longitude": null, "postplace": "HYLKJE", "region_id": 6938, "country_id": 167, "valid_from": "2018-01-01", "edit_comment": null, "address_part1": "Hylkjeflaten 32A", "address_part2": null, "address_part3": null, "legal_unit_id": 3236, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7581
DEBUG:  location row: {"id":7581,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Hylkjeflaten 32A","address_part2":null,"address_part3":null,"postcode":"5109","postplace":"HYLKJE","region_id":6938,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3236,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7581
DEBUG:  location row: {"id":7581,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Hylkjeflaten 32A","address_part2":null,"address_part3":null,"postcode":"5109","postplace":"HYLKJE","region_id":6938,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3236,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 32171, "valid_after": null, "edit_comment": null, "legal_unit_id": 3236, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 32171, "edit_comment": null, "legal_unit_id": 3236, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 6016
DEBUG:  activity row: {"id":6016,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":32171,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3236}
DEBUG:  DEBUG: Selecting from public.activity where id = 6016
DEBUG:  activity row: {"id":6016,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":32171,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3236}
DEBUG:  UPSERT row {"id": null, "name": "BRASØY BÅTFORENING", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 590, "status_id": 1, "birth_date": "1993-06-01", "death_date": null, "short_name": null, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3237, "invalid_codes": null, "legal_form_id": 819, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "BRASØY BÅTFORENING", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 590, "status_id": 1, "birth_date": "1993-06-01", "death_date": null, "short_name": null, "valid_from": "2018-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3237, "invalid_codes": null, "legal_form_id": 819, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3237,"valid_after":null,"valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"BRASØY BÅTFORENING","birth_date":"1993-06-01","death_date":null,"free_econ_zone":null,"sector_id":590,"status_id":1,"legal_form_id":819,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3237,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3237
DEBUG:  legal_unit row: {"id":3237,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"BRASØY BÅTFORENING","birth_date":"1993-06-01","death_date":null,"free_econ_zone":null,"sector_id":590,"status_id":1,"legal_form_id":819,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3237,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "8842", "valid_to": "infinity", "longitude": null, "postplace": "BRASØY", "region_id": 6759, "country_id": 167, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": null, "address_part1": "c/o Svein G. Storholm/nVågveien 2", "address_part2": null, "address_part3": null, "legal_unit_id": 3237, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "8842", "valid_to": "infinity", "longitude": null, "postplace": "BRASØY", "region_id": 6759, "country_id": 167, "valid_from": "2018-01-01", "edit_comment": null, "address_part1": "c/o Svein G. Storholm/nVågveien 2", "address_part2": null, "address_part3": null, "legal_unit_id": 3237, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7582
DEBUG:  location row: {"id":7582,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"c/o Svein G. Storholm/nVågveien 2","address_part2":null,"address_part3":null,"postcode":"8842","postplace":"BRASØY","region_id":6759,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3237,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7582
DEBUG:  location row: {"id":7582,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"c/o Svein G. Storholm/nVågveien 2","address_part2":null,"address_part3":null,"postcode":"8842","postplace":"BRASØY","region_id":6759,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3237,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 32562, "valid_after": null, "edit_comment": null, "legal_unit_id": 3237, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 32562, "edit_comment": null, "legal_unit_id": 3237, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 6017
DEBUG:  activity row: {"id":6017,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":32562,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3237}
DEBUG:  DEBUG: Selecting from public.activity where id = 6017
DEBUG:  activity row: {"id":6017,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":32562,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3237}
DEBUG:  UPSERT row {"id": null, "name": "SPORT OUTLET LILLEHAMMER 45 AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2017-08-10", "death_date": null, "short_name": null, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3238, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "SPORT OUTLET LILLEHAMMER 45 AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2017-08-10", "death_date": null, "short_name": null, "valid_from": "2018-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3238, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3238,"valid_after":null,"valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"SPORT OUTLET LILLEHAMMER 45 AS","birth_date":"2017-08-10","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3238,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3238
DEBUG:  legal_unit row: {"id":3238,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"SPORT OUTLET LILLEHAMMER 45 AS","birth_date":"2017-08-10","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3238,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "2619", "valid_to": "infinity", "longitude": null, "postplace": "LILLEHAMMER", "region_id": 6846, "country_id": 167, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Gudbrandsdalsvegen 188", "address_part2": null, "address_part3": null, "legal_unit_id": 3238, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "2619", "valid_to": "infinity", "longitude": null, "postplace": "LILLEHAMMER", "region_id": 6846, "country_id": 167, "valid_from": "2018-01-01", "edit_comment": null, "address_part1": "Gudbrandsdalsvegen 188", "address_part2": null, "address_part3": null, "legal_unit_id": 3238, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7583
DEBUG:  location row: {"id":7583,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Gudbrandsdalsvegen 188","address_part2":null,"address_part3":null,"postcode":"2619","postplace":"LILLEHAMMER","region_id":6846,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3238,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "5217", "valid_to": "infinity", "longitude": null, "postplace": "HAGAVIK", "region_id": 6953, "country_id": 167, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Ulvenvegen 344", "address_part2": null, "address_part3": null, "legal_unit_id": 3238, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "5217", "valid_to": "infinity", "longitude": null, "postplace": "HAGAVIK", "region_id": 6953, "country_id": 167, "valid_from": "2018-01-01", "edit_comment": null, "address_part1": "Ulvenvegen 344", "address_part2": null, "address_part3": null, "legal_unit_id": 3238, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7584
DEBUG:  location row: {"id":7584,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"postal","address_part1":"Ulvenvegen 344","address_part2":null,"address_part3":null,"postcode":"5217","postplace":"HAGAVIK","region_id":6953,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3238,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 31871, "valid_after": null, "edit_comment": null, "legal_unit_id": 3238, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 31871, "edit_comment": null, "legal_unit_id": 3238, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 6018
DEBUG:  activity row: {"id":6018,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":31871,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3238}
DEBUG:  DEBUG: Selecting from public.activity where id = 6018
DEBUG:  activity row: {"id":6018,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":31871,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3238}
DEBUG:  UPSERT row {"id": null, "name": "EVENTYR I PARKEN", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 590, "status_id": 1, "birth_date": "2019-01-07", "death_date": null, "short_name": null, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3239, "invalid_codes": null, "legal_form_id": 819, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "EVENTYR I PARKEN", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 590, "status_id": 1, "birth_date": "2019-01-07", "death_date": null, "short_name": null, "valid_from": "2018-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3239, "invalid_codes": null, "legal_form_id": 819, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3239,"valid_after":null,"valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"EVENTYR I PARKEN","birth_date":"2019-01-07","death_date":null,"free_econ_zone":null,"sector_id":590,"status_id":1,"legal_form_id":819,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3239,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3239
DEBUG:  legal_unit row: {"id":3239,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"EVENTYR I PARKEN","birth_date":"2019-01-07","death_date":null,"free_econ_zone":null,"sector_id":590,"status_id":1,"legal_form_id":819,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3239,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "5006", "valid_to": "infinity", "longitude": null, "postplace": "BERGEN", "region_id": 6938, "country_id": 167, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Konsul Børs' gate 9", "address_part2": null, "address_part3": null, "legal_unit_id": 3239, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "5006", "valid_to": "infinity", "longitude": null, "postplace": "BERGEN", "region_id": 6938, "country_id": 167, "valid_from": "2018-01-01", "edit_comment": null, "address_part1": "Konsul Børs' gate 9", "address_part2": null, "address_part3": null, "legal_unit_id": 3239, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7585
DEBUG:  location row: {"id":7585,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Konsul Børs' gate 9","address_part2":null,"address_part3":null,"postcode":"5006","postplace":"BERGEN","region_id":6938,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3239,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7585
DEBUG:  location row: {"id":7585,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Konsul Børs' gate 9","address_part2":null,"address_part3":null,"postcode":"5006","postplace":"BERGEN","region_id":6938,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3239,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 32500, "valid_after": null, "edit_comment": null, "legal_unit_id": 3239, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 32500, "edit_comment": null, "legal_unit_id": 3239, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 6019
DEBUG:  activity row: {"id":6019,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":32500,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3239}
DEBUG:  DEBUG: Selecting from public.activity where id = 6019
DEBUG:  activity row: {"id":6019,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":32500,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3239}
DEBUG:  UPSERT row {"id": null, "name": "BERGET TRANSLATE", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3240, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "BERGET TRANSLATE", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 592, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2018-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3240, "invalid_codes": null, "legal_form_id": 815, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3240,"valid_after":null,"valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"BERGET TRANSLATE","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3240,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3240
DEBUG:  legal_unit row: {"id":3240,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"BERGET TRANSLATE","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":592,"status_id":1,"legal_form_id":815,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3240,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "4642", "valid_to": "infinity", "longitude": null, "postplace": "SØGNE", "region_id": 6916, "country_id": 167, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Skytterveien 81", "address_part2": null, "address_part3": null, "legal_unit_id": 3240, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "4642", "valid_to": "infinity", "longitude": null, "postplace": "SØGNE", "region_id": 6916, "country_id": 167, "valid_from": "2018-01-01", "edit_comment": null, "address_part1": "Skytterveien 81", "address_part2": null, "address_part3": null, "legal_unit_id": 3240, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7586
DEBUG:  location row: {"id":7586,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Skytterveien 81","address_part2":null,"address_part3":null,"postcode":"4642","postplace":"SØGNE","region_id":6916,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3240,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7586
DEBUG:  location row: {"id":7586,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Skytterveien 81","address_part2":null,"address_part3":null,"postcode":"4642","postplace":"SØGNE","region_id":6916,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3240,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 32239, "valid_after": null, "edit_comment": null, "legal_unit_id": 3240, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 32239, "edit_comment": null, "legal_unit_id": 3240, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 6020
DEBUG:  activity row: {"id":6020,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":32239,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3240}
DEBUG:  DEBUG: Selecting from public.activity where id = 6020
DEBUG:  activity row: {"id":6020,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":32239,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3240}
DEBUG:  UPSERT row {"id": null, "name": "NEVROPSYKOLOG ERLEND BROVOLD AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2017-11-23", "death_date": null, "short_name": null, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3241, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "NEVROPSYKOLOG ERLEND BROVOLD AS", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 571, "status_id": 1, "birth_date": "2017-11-23", "death_date": null, "short_name": null, "valid_from": "2018-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3241, "invalid_codes": null, "legal_form_id": 807, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3241,"valid_after":null,"valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"NEVROPSYKOLOG ERLEND BROVOLD AS","birth_date":"2017-11-23","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3241,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3241
DEBUG:  legal_unit row: {"id":3241,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"NEVROPSYKOLOG ERLEND BROVOLD AS","birth_date":"2017-11-23","death_date":null,"free_econ_zone":null,"sector_id":571,"status_id":1,"legal_form_id":807,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3241,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "7105", "valid_to": "infinity", "longitude": null, "postplace": "STADSBYGD", "region_id": 7011, "country_id": 167, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Grønningsveien 366", "address_part2": null, "address_part3": null, "legal_unit_id": 3241, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "7105", "valid_to": "infinity", "longitude": null, "postplace": "STADSBYGD", "region_id": 7011, "country_id": 167, "valid_from": "2018-01-01", "edit_comment": null, "address_part1": "Grønningsveien 366", "address_part2": null, "address_part3": null, "legal_unit_id": 3241, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7587
DEBUG:  location row: {"id":7587,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Grønningsveien 366","address_part2":null,"address_part3":null,"postcode":"7105","postplace":"STADSBYGD","region_id":7011,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3241,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  DEBUG: Selecting from public.location where id = 7587
DEBUG:  location row: {"id":7587,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Grønningsveien 366","address_part2":null,"address_part3":null,"postcode":"7105","postplace":"STADSBYGD","region_id":7011,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3241,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 32445, "valid_after": null, "edit_comment": null, "legal_unit_id": 3241, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 32445, "edit_comment": null, "legal_unit_id": 3241, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 6021
DEBUG:  activity row: {"id":6021,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":32445,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3241}
DEBUG:  DEBUG: Selecting from public.activity where id = 6021
DEBUG:  activity row: {"id":6021,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":32445,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3241}
DEBUG:  UPSERT row {"id": null, "name": "PRIMA FERDIG HEKK", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": null, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3242, "invalid_codes": null, "legal_form_id": 830, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "PRIMA FERDIG HEKK", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": null, "status_id": 1, "birth_date": null, "death_date": null, "short_name": null, "valid_from": "2018-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3242, "invalid_codes": null, "legal_form_id": 830, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3242,"valid_after":null,"valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"PRIMA FERDIG HEKK","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":null,"status_id":1,"legal_form_id":830,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3242,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3242
DEBUG:  legal_unit row: {"id":3242,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"PRIMA FERDIG HEKK","birth_date":null,"death_date":null,"free_econ_zone":null,"sector_id":null,"status_id":1,"legal_form_id":830,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3242,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  UPSERT row {"id": null, "type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": null, "valid_to": "infinity", "longitude": null, "postplace": "DK-5750 RINGE", "region_id": null, "country_id": 61, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": null, "address_part1": "Ravnshøjgyden 6/nSdr Højrup", "address_part2": null, "address_part3": null, "legal_unit_id": 3242, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "physical", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": null, "valid_to": "infinity", "longitude": null, "postplace": "DK-5750 RINGE", "region_id": null, "country_id": 61, "valid_from": "2018-01-01", "edit_comment": null, "address_part1": "Ravnshøjgyden 6/nSdr Højrup", "address_part2": null, "address_part3": null, "legal_unit_id": 3242, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7588
DEBUG:  location row: {"id":7588,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"physical","address_part1":"Ravnshøjgyden 6/nSdr Højrup","address_part2":null,"address_part3":null,"postcode":null,"postplace":"DK-5750 RINGE","region_id":null,"country_id":61,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3242,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "1914", "valid_to": "infinity", "longitude": null, "postplace": "YTRE ENEBAKK", "region_id": 6814, "country_id": 167, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": null, "address_part1": "c/o Scanvisio AS/nAndersrudveien 1", "address_part2": null, "address_part3": null, "legal_unit_id": 3242, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.location
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  altitude IS NOT DISTINCT FROM $1.altitude  AND  latitude IS NOT DISTINCT FROM $1.latitude  AND  postcode IS NOT DISTINCT FROM $1.postcode  AND  longitude IS NOT DISTINCT FROM $1.longitude  AND  postplace IS NOT DISTINCT FROM $1.postplace  AND  region_id IS NOT DISTINCT FROM $1.region_id  AND  country_id IS NOT DISTINCT FROM $1.country_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  address_part1 IS NOT DISTINCT FROM $1.address_part1  AND  address_part2 IS NOT DISTINCT FROM $1.address_part2  AND  address_part3 IS NOT DISTINCT FROM $1.address_part3  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.location
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.location({"type": "postal", "edit_at": "2025-03-12T05:02:43.559626-07:00", "altitude": null, "latitude": null, "postcode": "1914", "valid_to": "infinity", "longitude": null, "postplace": "YTRE ENEBAKK", "region_id": 6814, "country_id": 167, "valid_from": "2018-01-01", "edit_comment": null, "address_part1": "c/o Scanvisio AS/nAndersrudveien 1", "address_part2": null, "address_part3": null, "legal_unit_id": 3242, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.location where id = 7589
DEBUG:  location row: {"id":7589,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"postal","address_part1":"c/o Scanvisio AS/nAndersrudveien 1","address_part2":null,"address_part3":null,"postcode":"1914","postplace":"YTRE ENEBAKK","region_id":6814,"country_id":167,"latitude":null,"longitude":null,"altitude":null,"establishment_id":null,"legal_unit_id":3242,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00"}
DEBUG:  UPSERT row {"id": null, "type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 31917, "valid_after": null, "edit_comment": null, "legal_unit_id": 3242, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.activity
          WHERE  "id"= $1."id"  OR ( type= $1.type  AND  establishment_id= $1.establishment_id ) OR ( type= $1.type  AND  legal_unit_id= $1.legal_unit_id )
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( type IS NOT DISTINCT FROM $1.type  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  category_id IS NOT DISTINCT FROM $1.category_id  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  legal_unit_id IS NOT DISTINCT FROM $1.legal_unit_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  establishment_id IS NOT DISTINCT FROM $1.establishment_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.activity
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.activity({"type": "primary", "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "valid_from": "2018-01-01", "category_id": 31917, "edit_comment": null, "legal_unit_id": 3242, "data_source_id": null, "edit_by_user_id": 82, "establishment_id": null})
DEBUG:  DEBUG: Selecting from public.activity where id = 6022
DEBUG:  activity row: {"id":6022,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":31917,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3242}
DEBUG:  DEBUG: Selecting from public.activity where id = 6022
DEBUG:  activity row: {"id":6022,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","type":"primary","category_id":31917,"data_source_id":null,"edit_comment":null,"edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","establishment_id":null,"legal_unit_id":3242}
DEBUG:  UPSERT row {"id": null, "name": "HELSEHUSETS VENNER", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 590, "status_id": 1, "birth_date": "2018-02-07", "death_date": null, "short_name": null, "valid_from": "2018-01-01", "valid_after": null, "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3243, "invalid_codes": null, "legal_form_id": 819, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null}
DEBUG:  identifying_query 
          SELECT id
          FROM public.legal_unit
          WHERE  "id"= $1."id" 
          LIMIT 1;
DEBUG:  existing_id <NULL>
DEBUG:  existing_query 
      SELECT *
           , ( name IS NOT DISTINCT FROM $1.name  AND  active IS NOT DISTINCT FROM $1.active  AND  edit_at IS NOT DISTINCT FROM $1.edit_at  AND  sector_id IS NOT DISTINCT FROM $1.sector_id  AND  status_id IS NOT DISTINCT FROM $1.status_id  AND  birth_date IS NOT DISTINCT FROM $1.birth_date  AND  death_date IS NOT DISTINCT FROM $1.death_date  AND  short_name IS NOT DISTINCT FROM $1.short_name  AND  edit_comment IS NOT DISTINCT FROM $1.edit_comment  AND  unit_size_id IS NOT DISTINCT FROM $1.unit_size_id  AND  enterprise_id IS NOT DISTINCT FROM $1.enterprise_id  AND  invalid_codes IS NOT DISTINCT FROM $1.invalid_codes  AND  legal_form_id IS NOT DISTINCT FROM $1.legal_form_id  AND  data_source_id IS NOT DISTINCT FROM $1.data_source_id  AND  free_econ_zone IS NOT DISTINCT FROM $1.free_econ_zone  AND  edit_by_user_id IS NOT DISTINCT FROM $1.edit_by_user_id  AND  primary_for_enterprise IS NOT DISTINCT FROM $1.primary_for_enterprise  AND  foreign_participation_id IS NOT DISTINCT FROM $1.foreign_participation_id ) AS equivalent
           , CASE
             WHEN valid_to = ($1.valid_from - '1 day'::INTERVAL) THEN 'existing_adjacent_valid_from'
             WHEN valid_from = ($1.valid_to + '1 day'::INTERVAL) THEN 'existing_adjacent_valid_to'
             WHEN valid_from <  $1.valid_from AND valid_to <= $1.valid_to THEN 'existing_overlaps_valid_from'
             WHEN valid_from <  $1.valid_from AND valid_to >  $1.valid_to THEN 'inside_existing'
             WHEN valid_from >= $1.valid_from AND valid_to <= $1.valid_to THEN 'contains_existing'
             WHEN valid_from >= $1.valid_from AND valid_to >  $1.valid_to THEN 'existing_overlaps_valid_to'
             END::admin.existing_upsert_case AS upsert_case
      FROM public.legal_unit
      WHERE daterange(valid_from, valid_to, '[]') && daterange(($1.valid_from - '1 day'::INTERVAL)::DATE, ($1.valid_to + '1 day'::INTERVAL)::DATE, '[]')
        AND id = $2
      ORDER BY valid_from
DEBUG:  INSERT public.legal_unit({"name": "HELSEHUSETS VENNER", "active": true, "edit_at": "2025-03-12T05:02:43.559626-07:00", "valid_to": "infinity", "sector_id": 590, "status_id": 1, "birth_date": "2018-02-07", "death_date": null, "short_name": null, "valid_from": "2018-01-01", "edit_comment": "Batch import", "unit_size_id": null, "enterprise_id": 3243, "invalid_codes": null, "legal_form_id": 819, "data_source_id": null, "free_econ_zone": null, "edit_by_user_id": 82, "primary_for_enterprise": true, "foreign_participation_id": null})
DEBUG:  inserted_legal_unit {"id":3243,"valid_after":null,"valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"HELSEHUSETS VENNER","birth_date":"2018-02-07","death_date":null,"free_econ_zone":null,"sector_id":590,"status_id":1,"legal_form_id":819,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3243,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  DEBUG: Selecting from public.legal_unit where id = 3243
DEBUG:  legal_unit row: {"id":3243,"valid_after":"2017-12-31","valid_from":"2018-01-01","valid_to":"infinity","active":true,"short_name":null,"name":"HELSEHUSETS VENNER","birth_date":"2018-02-07","death_date":null,"free_econ_zone":null,"sector_id":590,"status_id":1,"legal_form_id":819,"edit_comment":"Batch import","edit_by_user_id":82,"edit_at":"2025-03-12T05:02:43.559626-07:00","unit_size_id":null,"foreign_participation_id":null,"data_source_id":null,"enterprise_id":3243,"primary_for_enterprise":true,"invalid_codes":null}
DEBUG:  IMPORT_JOB_INSERT: Error executing batch insert: record "inserted_location" is not assigned yet
WARNING:  Error importing batch: record "inserted_location" is not assigned yet. 1000 rows marked as error.
DEBUG:  IMPORT_JOB_INSERT: Continuing with next batch, 501 rows remaining
DEBUG:  IMPORT_JOB_INSERT: Batches processed. Counts - Pending: 501, Imported: 0, Errors: 1000
DEBUG:  IMPORT_JOB_INSERT: Final update of imported_rows to 0
DEBUG:  IMPORT_JOB_INSERT: Still have 501 rows to import, will continue in next transaction
DEBUG:  Reset user context to original user 5625d86b-1e1d-43fc-bfa1-eb3911635881
DEBUG:  Rescheduled import job 20 for further processing
DEBUG:  Task 563 (import_job_process) completed in 162.072000 ms
DEBUG:  Set user context to 5625d86b-1e1d-43fc-bfa1-eb3911635881 for import job 21
DEBUG:  IMPORT_JOB_INSERT: Starting import from import_underenhet_2015_data to public.import_establishment_era_for_legal_unit
DEBUG:  IMPORT_JOB_INSERT: Target columns: tax_ident,name,primary_activity_category_code,secondary_activity_category_code,postal_address_part1,postal_postplace,postal_postcode,postal_region_code,postal_country_iso_2,physical_address_part1,physical_postplace,physical_postcode,physical_region_code,physical_country_iso_2,birth_date,legal_unit_tax_ident,death_date,valid_from,valid_to
DEBUG:  IMPORT_JOB_INSERT: Uniquely identifying columns: tax_ident
DEBUG:  IMPORT_JOB_INSERT: Initial state - Pending: 1030, Processing: 0, Imported: 0, Error: 0
DEBUG:  IMPORT_JOB_INSERT: Starting batch processing with 1030 pending rows
DEBUG:  IMPORT_JOB_INSERT: Starting new batch, remaining rows: 1030
DEBUG:  IMPORT_JOB_INSERT: Marking batch SQL: 
                    UPDATE public.import_underenhet_2015_data
                    SET state = 'importing'
                    WHERE state = 'pending'
                    AND ctid IN (
                        SELECT ctid
                        FROM public.import_underenhet_2015_data
                        WHERE state = 'pending'
                        ORDER BY tax_ident
                        LIMIT 1000
                    );
                
DEBUG:  IMPORT_JOB_INSERT: Marked 1000 rows as processing
DEBUG:  IMPORT_JOB_INSERT: Batch insert SQL: 
                WITH batch AS (
                    SELECT tax_ident,name,primary_activity_category_code,secondary_activity_category_code,postal_address_part1,postal_postplace,postal_postcode,postal_region_code,postal_country_iso_2,physical_address_part1,physical_postplace,physical_postcode,physical_region_code,physical_country_iso_2,birth_date,legal_unit_tax_ident,death_date,valid_from,valid_to, ctid AS source_ctid
                    FROM public.import_underenhet_2015_data
                    WHERE state = 'importing'
                    ORDER BY tax_ident
                    FOR UPDATE
                ),
                inserted AS (
                    INSERT INTO public.import_establishment_era_for_legal_unit (tax_ident,name,primary_activity_category_code,secondary_activity_category_code,postal_address_part1,postal_postplace,postal_postcode,postal_region_code,postal_country_iso_2,physical_address_part1,physical_postplace,physical_postcode,physical_region_code,physical_country_iso_2,birth_date,legal_unit_tax_ident,death_date,valid_from,valid_to)
                    SELECT tax_ident,name,primary_activity_category_code,secondary_activity_category_code,postal_address_part1,postal_postplace,postal_postcode,postal_region_code,postal_country_iso_2,physical_address_part1,physical_postplace,physical_postcode,physical_region_code,physical_country_iso_2,birth_date,legal_unit_tax_ident,death_date,valid_from,valid_to FROM batch
                    RETURNING 1 AS inserted_row
                )
                SELECT COUNT(*) FROM inserted;
            
DEBUG:  IMPORT_JOB_INSERT: Error executing batch insert: Could not find legal_unit_tax_ident for row {"name": "L.A.B.S.", "landline": null, "tag_path": null, "turnover": null, "valid_to": "infinity", "employees": null, "tax_ident": "812703692", "birth_date": "2013-10-30", "death_date": null, "fax_number": null, "stat_ident": null, "valid_from": "01-01-2015", "sector_code": null, "status_code": null, "web_address": null, "phone_number": null, "email_address": null, "mobile_number": null, "postal_altitude": null, "postal_latitude": null, "postal_postcode": null, "data_source_code": null, "postal_longitude": null, "postal_postplace": null, "physical_altitude": null, "physical_latitude": null, "physical_postcode": "0552", "physical_longitude": null, "physical_postplace": "OSLO", "postal_region_code": null, "postal_region_path": null, "legal_unit_tax_ident": "912675580", "physical_region_code": "0301", "physical_region_path": null, "postal_address_part1": null, "postal_address_part2": null, "postal_address_part3": null, "postal_country_iso_2": null, "legal_unit_stat_ident": null, "physical_address_part1": "Grüners gate 11", "physical_address_part2": null, "physical_address_part3": null, "physical_country_iso_2": "NO", "primary_activity_category_code": "71.112", "secondary_activity_category_code": null}
WARNING:  Error importing batch: Could not find legal_unit_tax_ident for row {"name": "L.A.B.S.", "landline": null, "tag_path": null, "turnover": null, "valid_to": "infinity", "employees": null, "tax_ident": "812703692", "birth_date": "2013-10-30", "death_date": null, "fax_number": null, "stat_ident": null, "valid_from": "01-01-2015", "sector_code": null, "status_code": null, "web_address": null, "phone_number": null, "email_address": null, "mobile_number": null, "postal_altitude": null, "postal_latitude": null, "postal_postcode": null, "data_source_code": null, "postal_longitude": null, "postal_postplace": null, "physical_altitude": null, "physical_latitude": null, "physical_postcode": "0552", "physical_longitude": null, "physical_postplace": "OSLO", "postal_region_code": null, "postal_region_path": null, "legal_unit_tax_ident": "912675580", "physical_region_code": "0301", "physical_region_path": null, "postal_address_part1": null, "postal_address_part2": null, "postal_address_part3": null, "postal_country_iso_2": null, "legal_unit_stat_ident": null, "physical_address_part1": "Grüners gate 11", "physical_address_part2": null, "physical_address_part3": null, "physical_country_iso_2": "NO", "primary_activity_category_code": "71.112", "secondary_activity_category_code": null}. 1000 rows marked as error.
DEBUG:  IMPORT_JOB_INSERT: Continuing with next batch, 30 rows remaining
DEBUG:  IMPORT_JOB_INSERT: Batches processed. Counts - Pending: 30, Imported: 0, Errors: 1000
DEBUG:  IMPORT_JOB_INSERT: Final update of imported_rows to 0
DEBUG:  IMPORT_JOB_INSERT: Still have 30 rows to import, will continue in next transaction
DEBUG:  Reset user context to original user 5625d86b-1e1d-43fc-bfa1-eb3911635881
DEBUG:  Rescheduled import job 21 for further processing
DEBUG:  Task 564 (import_job_process) completed in 39.092000 ms
DEBUG:  Set user context to 5625d86b-1e1d-43fc-bfa1-eb3911635881 for import job 22
DEBUG:  IMPORT_JOB_INSERT: Starting import from import_underenhet_2016_data to public.import_establishment_era_for_legal_unit
DEBUG:  IMPORT_JOB_INSERT: Target columns: tax_ident,name,primary_activity_category_code,secondary_activity_category_code,postal_address_part1,postal_postplace,postal_postcode,postal_region_code,postal_country_iso_2,physical_address_part1,physical_postplace,physical_postcode,physical_region_code,physical_country_iso_2,birth_date,legal_unit_tax_ident,death_date,valid_from,valid_to
DEBUG:  IMPORT_JOB_INSERT: Uniquely identifying columns: tax_ident
DEBUG:  IMPORT_JOB_INSERT: Initial state - Pending: 1031, Processing: 0, Imported: 0, Error: 0
DEBUG:  IMPORT_JOB_INSERT: Starting batch processing with 1031 pending rows
DEBUG:  IMPORT_JOB_INSERT: Starting new batch, remaining rows: 1031
DEBUG:  IMPORT_JOB_INSERT: Marking batch SQL: 
                    UPDATE public.import_underenhet_2016_data
                    SET state = 'importing'
                    WHERE state = 'pending'
                    AND ctid IN (
                        SELECT ctid
                        FROM public.import_underenhet_2016_data
                        WHERE state = 'pending'
                        ORDER BY tax_ident
                        LIMIT 1000
                    );
                
DEBUG:  IMPORT_JOB_INSERT: Marked 1000 rows as processing
DEBUG:  IMPORT_JOB_INSERT: Batch insert SQL: 
                WITH batch AS (
                    SELECT tax_ident,name,primary_activity_category_code,secondary_activity_category_code,postal_address_part1,postal_postplace,postal_postcode,postal_region_code,postal_country_iso_2,physical_address_part1,physical_postplace,physical_postcode,physical_region_code,physical_country_iso_2,birth_date,legal_unit_tax_ident,death_date,valid_from,valid_to, ctid AS source_ctid
                    FROM public.import_underenhet_2016_data
                    WHERE state = 'importing'
                    ORDER BY tax_ident
                    FOR UPDATE
                ),
                inserted AS (
                    INSERT INTO public.import_establishment_era_for_legal_unit (tax_ident,name,primary_activity_category_code,secondary_activity_category_code,postal_address_part1,postal_postplace,postal_postcode,postal_region_code,postal_country_iso_2,physical_address_part1,physical_postplace,physical_postcode,physical_region_code,physical_country_iso_2,birth_date,legal_unit_tax_ident,death_date,valid_from,valid_to)
                    SELECT tax_ident,name,primary_activity_category_code,secondary_activity_category_code,postal_address_part1,postal_postplace,postal_postcode,postal_region_code,postal_country_iso_2,physical_address_part1,physical_postplace,physical_postcode,physical_region_code,physical_country_iso_2,birth_date,legal_unit_tax_ident,death_date,valid_from,valid_to FROM batch
                    RETURNING 1 AS inserted_row
                )
                SELECT COUNT(*) FROM inserted;
            
DEBUG:  IMPORT_JOB_INSERT: Error executing batch insert: Could not find legal_unit_tax_ident for row {"name": "L.A.B.S.", "landline": null, "tag_path": null, "turnover": null, "valid_to": "infinity", "employees": null, "tax_ident": "812703692", "birth_date": "2013-10-30", "death_date": null, "fax_number": null, "stat_ident": null, "valid_from": "01-01-2016", "sector_code": null, "status_code": null, "web_address": null, "phone_number": null, "email_address": null, "mobile_number": null, "postal_altitude": null, "postal_latitude": null, "postal_postcode": null, "data_source_code": null, "postal_longitude": null, "postal_postplace": null, "physical_altitude": null, "physical_latitude": null, "physical_postcode": "0552", "physical_longitude": null, "physical_postplace": "OSLO", "postal_region_code": null, "postal_region_path": null, "legal_unit_tax_ident": "912675580", "physical_region_code": "0301", "physical_region_path": null, "postal_address_part1": null, "postal_address_part2": null, "postal_address_part3": null, "postal_country_iso_2": null, "legal_unit_stat_ident": null, "physical_address_part1": "Grüners gate 11", "physical_address_part2": null, "physical_address_part3": null, "physical_country_iso_2": "NO", "primary_activity_category_code": "71.112", "secondary_activity_category_code": null}
WARNING:  Error importing batch: Could not find legal_unit_tax_ident for row {"name": "L.A.B.S.", "landline": null, "tag_path": null, "turnover": null, "valid_to": "infinity", "employees": null, "tax_ident": "812703692", "birth_date": "2013-10-30", "death_date": null, "fax_number": null, "stat_ident": null, "valid_from": "01-01-2016", "sector_code": null, "status_code": null, "web_address": null, "phone_number": null, "email_address": null, "mobile_number": null, "postal_altitude": null, "postal_latitude": null, "postal_postcode": null, "data_source_code": null, "postal_longitude": null, "postal_postplace": null, "physical_altitude": null, "physical_latitude": null, "physical_postcode": "0552", "physical_longitude": null, "physical_postplace": "OSLO", "postal_region_code": null, "postal_region_path": null, "legal_unit_tax_ident": "912675580", "physical_region_code": "0301", "physical_region_path": null, "postal_address_part1": null, "postal_address_part2": null, "postal_address_part3": null, "postal_country_iso_2": null, "legal_unit_stat_ident": null, "physical_address_part1": "Grüners gate 11", "physical_address_part2": null, "physical_address_part3": null, "physical_country_iso_2": "NO", "primary_activity_category_code": "71.112", "secondary_activity_category_code": null}. 1000 rows marked as error.
DEBUG:  IMPORT_JOB_INSERT: Continuing with next batch, 31 rows remaining
DEBUG:  IMPORT_JOB_INSERT: Batches processed. Counts - Pending: 31, Imported: 0, Errors: 1000
DEBUG:  IMPORT_JOB_INSERT: Final update of imported_rows to 0
DEBUG:  IMPORT_JOB_INSERT: Still have 31 rows to import, will continue in next transaction
DEBUG:  Reset user context to original user 5625d86b-1e1d-43fc-bfa1-eb3911635881
DEBUG:  Rescheduled import job 22 for further processing
DEBUG:  Task 565 (import_job_process) completed in 37.476000 ms
DEBUG:  Set user context to 5625d86b-1e1d-43fc-bfa1-eb3911635881 for import job 23
DEBUG:  IMPORT_JOB_INSERT: Starting import from import_underenhet_2017_data to public.import_establishment_era_for_legal_unit
DEBUG:  IMPORT_JOB_INSERT: Target columns: tax_ident,name,primary_activity_category_code,secondary_activity_category_code,postal_address_part1,postal_postplace,postal_postcode,postal_region_code,postal_country_iso_2,physical_address_part1,physical_postplace,physical_postcode,physical_region_code,physical_country_iso_2,birth_date,legal_unit_tax_ident,death_date,valid_from,valid_to
DEBUG:  IMPORT_JOB_INSERT: Uniquely identifying columns: tax_ident
DEBUG:  IMPORT_JOB_INSERT: Initial state - Pending: 1218, Processing: 0, Imported: 0, Error: 0
DEBUG:  IMPORT_JOB_INSERT: Starting batch processing with 1218 pending rows
DEBUG:  IMPORT_JOB_INSERT: Starting new batch, remaining rows: 1218
DEBUG:  IMPORT_JOB_INSERT: Marking batch SQL: 
                    UPDATE public.import_underenhet_2017_data
                    SET state = 'importing'
                    WHERE state = 'pending'
                    AND ctid IN (
                        SELECT ctid
                        FROM public.import_underenhet_2017_data
                        WHERE state = 'pending'
                        ORDER BY tax_ident
                        LIMIT 1000
                    );
                
DEBUG:  IMPORT_JOB_INSERT: Marked 1000 rows as processing
DEBUG:  IMPORT_JOB_INSERT: Batch insert SQL: 
                WITH batch AS (
                    SELECT tax_ident,name,primary_activity_category_code,secondary_activity_category_code,postal_address_part1,postal_postplace,postal_postcode,postal_region_code,postal_country_iso_2,physical_address_part1,physical_postplace,physical_postcode,physical_region_code,physical_country_iso_2,birth_date,legal_unit_tax_ident,death_date,valid_from,valid_to, ctid AS source_ctid
                    FROM public.import_underenhet_2017_data
                    WHERE state = 'importing'
                    ORDER BY tax_ident
                    FOR UPDATE
                ),
                inserted AS (
                    INSERT INTO public.import_establishment_era_for_legal_unit (tax_ident,name,primary_activity_category_code,secondary_activity_category_code,postal_address_part1,postal_postplace,postal_postcode,postal_region_code,postal_country_iso_2,physical_address_part1,physical_postplace,physical_postcode,physical_region_code,physical_country_iso_2,birth_date,legal_unit_tax_ident,death_date,valid_from,valid_to)
                    SELECT tax_ident,name,primary_activity_category_code,secondary_activity_category_code,postal_address_part1,postal_postplace,postal_postcode,postal_region_code,postal_country_iso_2,physical_address_part1,physical_postplace,physical_postcode,physical_region_code,physical_country_iso_2,birth_date,legal_unit_tax_ident,death_date,valid_from,valid_to FROM batch
                    RETURNING 1 AS inserted_row
                )
                SELECT COUNT(*) FROM inserted;
            
DEBUG:  IMPORT_JOB_INSERT: Error executing batch insert: Could not find legal_unit_tax_ident for row {"name": "JONE VORMELAND", "landline": null, "tag_path": null, "turnover": null, "valid_to": "infinity", "employees": null, "tax_ident": "812148192", "birth_date": "2013-01-01", "death_date": null, "fax_number": null, "stat_ident": null, "valid_from": "01-01-2017", "sector_code": null, "status_code": null, "web_address": null, "phone_number": null, "email_address": null, "mobile_number": null, "postal_altitude": null, "postal_latitude": null, "postal_postcode": null, "data_source_code": null, "postal_longitude": null, "postal_postplace": null, "physical_altitude": null, "physical_latitude": null, "physical_postcode": "4352", "physical_longitude": null, "physical_postplace": "KLEPPE", "postal_region_code": null, "postal_region_path": null, "legal_unit_tax_ident": "884523672", "physical_region_code": "1120", "physical_region_path": null, "postal_address_part1": null, "postal_address_part2": null, "postal_address_part3": null, "postal_country_iso_2": null, "legal_unit_stat_ident": null, "physical_address_part1": "Linjevegen 6", "physical_address_part2": null, "physical_address_part3": null, "physical_country_iso_2": "NO", "primary_activity_category_code": "02.400", "secondary_activity_category_code": null}
WARNING:  Error importing batch: Could not find legal_unit_tax_ident for row {"name": "JONE VORMELAND", "landline": null, "tag_path": null, "turnover": null, "valid_to": "infinity", "employees": null, "tax_ident": "812148192", "birth_date": "2013-01-01", "death_date": null, "fax_number": null, "stat_ident": null, "valid_from": "01-01-2017", "sector_code": null, "status_code": null, "web_address": null, "phone_number": null, "email_address": null, "mobile_number": null, "postal_altitude": null, "postal_latitude": null, "postal_postcode": null, "data_source_code": null, "postal_longitude": null, "postal_postplace": null, "physical_altitude": null, "physical_latitude": null, "physical_postcode": "4352", "physical_longitude": null, "physical_postplace": "KLEPPE", "postal_region_code": null, "postal_region_path": null, "legal_unit_tax_ident": "884523672", "physical_region_code": "1120", "physical_region_path": null, "postal_address_part1": null, "postal_address_part2": null, "postal_address_part3": null, "postal_country_iso_2": null, "legal_unit_stat_ident": null, "physical_address_part1": "Linjevegen 6", "physical_address_part2": null, "physical_address_part3": null, "physical_country_iso_2": "NO", "primary_activity_category_code": "02.400", "secondary_activity_category_code": null}. 1000 rows marked as error.
DEBUG:  IMPORT_JOB_INSERT: Continuing with next batch, 218 rows remaining
DEBUG:  IMPORT_JOB_INSERT: Batches processed. Counts - Pending: 218, Imported: 0, Errors: 1000
DEBUG:  IMPORT_JOB_INSERT: Final update of imported_rows to 0
DEBUG:  IMPORT_JOB_INSERT: Still have 218 rows to import, will continue in next transaction
DEBUG:  Reset user context to original user 5625d86b-1e1d-43fc-bfa1-eb3911635881
DEBUG:  Rescheduled import job 23 for further processing
DEBUG:  Task 566 (import_job_process) completed in 41.709000 ms
DEBUG:  Set user context to 5625d86b-1e1d-43fc-bfa1-eb3911635881 for import job 24
DEBUG:  IMPORT_JOB_INSERT: Starting import from import_underenhet_2018_data to public.import_establishment_era_for_legal_unit
DEBUG:  IMPORT_JOB_INSERT: Target columns: tax_ident,name,primary_activity_category_code,secondary_activity_category_code,postal_address_part1,postal_postplace,postal_postcode,postal_region_code,postal_country_iso_2,physical_address_part1,physical_postplace,physical_postcode,physical_region_code,physical_country_iso_2,birth_date,legal_unit_tax_ident,death_date,valid_from,valid_to
DEBUG:  IMPORT_JOB_INSERT: Uniquely identifying columns: tax_ident
DEBUG:  IMPORT_JOB_INSERT: Initial state - Pending: 1324, Processing: 0, Imported: 0, Error: 0
DEBUG:  IMPORT_JOB_INSERT: Starting batch processing with 1324 pending rows
DEBUG:  IMPORT_JOB_INSERT: Starting new batch, remaining rows: 1324
DEBUG:  IMPORT_JOB_INSERT: Marking batch SQL: 
                    UPDATE public.import_underenhet_2018_data
                    SET state = 'importing'
                    WHERE state = 'pending'
                    AND ctid IN (
                        SELECT ctid
                        FROM public.import_underenhet_2018_data
                        WHERE state = 'pending'
                        ORDER BY tax_ident
                        LIMIT 1000
                    );
                
DEBUG:  IMPORT_JOB_INSERT: Marked 1000 rows as processing
DEBUG:  IMPORT_JOB_INSERT: Batch insert SQL: 
                WITH batch AS (
                    SELECT tax_ident,name,primary_activity_category_code,secondary_activity_category_code,postal_address_part1,postal_postplace,postal_postcode,postal_region_code,postal_country_iso_2,physical_address_part1,physical_postplace,physical_postcode,physical_region_code,physical_country_iso_2,birth_date,legal_unit_tax_ident,death_date,valid_from,valid_to, ctid AS source_ctid
                    FROM public.import_underenhet_2018_data
                    WHERE state = 'importing'
                    ORDER BY tax_ident
                    FOR UPDATE
                ),
                inserted AS (
                    INSERT INTO public.import_establishment_era_for_legal_unit (tax_ident,name,primary_activity_category_code,secondary_activity_category_code,postal_address_part1,postal_postplace,postal_postcode,postal_region_code,postal_country_iso_2,physical_address_part1,physical_postplace,physical_postcode,physical_region_code,physical_country_iso_2,birth_date,legal_unit_tax_ident,death_date,valid_from,valid_to)
                    SELECT tax_ident,name,primary_activity_category_code,secondary_activity_category_code,postal_address_part1,postal_postplace,postal_postcode,postal_region_code,postal_country_iso_2,physical_address_part1,physical_postplace,physical_postcode,physical_region_code,physical_country_iso_2,birth_date,legal_unit_tax_ident,death_date,valid_from,valid_to FROM batch
                    RETURNING 1 AS inserted_row
                )
                SELECT COUNT(*) FROM inserted;
            
DEBUG:  IMPORT_JOB_INSERT: Error executing batch insert: Could not find legal_unit_tax_ident for row {"name": "JONE VORMELAND", "landline": null, "tag_path": null, "turnover": null, "valid_to": "infinity", "employees": null, "tax_ident": "812148192", "birth_date": "2013-01-01", "death_date": null, "fax_number": null, "stat_ident": null, "valid_from": "01-01-2018", "sector_code": null, "status_code": null, "web_address": null, "phone_number": null, "email_address": null, "mobile_number": null, "postal_altitude": null, "postal_latitude": null, "postal_postcode": null, "data_source_code": null, "postal_longitude": null, "postal_postplace": null, "physical_altitude": null, "physical_latitude": null, "physical_postcode": "4352", "physical_longitude": null, "physical_postplace": "KLEPPE", "postal_region_code": null, "postal_region_path": null, "legal_unit_tax_ident": "884523672", "physical_region_code": "1120", "physical_region_path": null, "postal_address_part1": null, "postal_address_part2": null, "postal_address_part3": null, "postal_country_iso_2": null, "legal_unit_stat_ident": null, "physical_address_part1": "Linjevegen 6", "physical_address_part2": null, "physical_address_part3": null, "physical_country_iso_2": "NO", "primary_activity_category_code": "02.400", "secondary_activity_category_code": null}
WARNING:  Error importing batch: Could not find legal_unit_tax_ident for row {"name": "JONE VORMELAND", "landline": null, "tag_path": null, "turnover": null, "valid_to": "infinity", "employees": null, "tax_ident": "812148192", "birth_date": "2013-01-01", "death_date": null, "fax_number": null, "stat_ident": null, "valid_from": "01-01-2018", "sector_code": null, "status_code": null, "web_address": null, "phone_number": null, "email_address": null, "mobile_number": null, "postal_altitude": null, "postal_latitude": null, "postal_postcode": null, "data_source_code": null, "postal_longitude": null, "postal_postplace": null, "physical_altitude": null, "physical_latitude": null, "physical_postcode": "4352", "physical_longitude": null, "physical_postplace": "KLEPPE", "postal_region_code": null, "postal_region_path": null, "legal_unit_tax_ident": "884523672", "physical_region_code": "1120", "physical_region_path": null, "postal_address_part1": null, "postal_address_part2": null, "postal_address_part3": null, "postal_country_iso_2": null, "legal_unit_stat_ident": null, "physical_address_part1": "Linjevegen 6", "physical_address_part2": null, "physical_address_part3": null, "physical_country_iso_2": "NO", "primary_activity_category_code": "02.400", "secondary_activity_category_code": null}. 1000 rows marked as error.
DEBUG:  IMPORT_JOB_INSERT: Continuing with next batch, 324 rows remaining
DEBUG:  IMPORT_JOB_INSERT: Batches processed. Counts - Pending: 324, Imported: 0, Errors: 1000
DEBUG:  IMPORT_JOB_INSERT: Final update of imported_rows to 0
DEBUG:  IMPORT_JOB_INSERT: Still have 324 rows to import, will continue in next transaction
DEBUG:  Reset user context to original user 5625d86b-1e1d-43fc-bfa1-eb3911635881
DEBUG:  Rescheduled import job 24 for further processing
DEBUG:  Task 567 (import_job_process) completed in 43.434000 ms
DEBUG:  Set user context to 5625d86b-1e1d-43fc-bfa1-eb3911635881 for import job 18
DEBUG:  Reset user context to original user 5625d86b-1e1d-43fc-bfa1-eb3911635881
DEBUG:  Rescheduled import job 18 for further processing
DEBUG:  Task 685 (import_job_process) completed in 0.385000 ms
DEBUG:  Set user context to 5625d86b-1e1d-43fc-bfa1-eb3911635881 for import job 19
DEBUG:  Reset user context to original user 5625d86b-1e1d-43fc-bfa1-eb3911635881
DEBUG:  Rescheduled import job 19 for further processing
DEBUG:  Task 789 (import_job_process) completed in 0.296000 ms
DEBUG:  Set user context to 5625d86b-1e1d-43fc-bfa1-eb3911635881 for import job 20
DEBUG:  Reset user context to original user 5625d86b-1e1d-43fc-bfa1-eb3911635881
DEBUG:  Rescheduled import job 20 for further processing
DEBUG:  Task 889 (import_job_process) completed in 0.418000 ms
DEBUG:  Set user context to 5625d86b-1e1d-43fc-bfa1-eb3911635881 for import job 21
DEBUG:  Reset user context to original user 5625d86b-1e1d-43fc-bfa1-eb3911635881
DEBUG:  Rescheduled import job 21 for further processing
DEBUG:  Task 890 (import_job_process) completed in 0.308000 ms
DEBUG:  Set user context to 5625d86b-1e1d-43fc-bfa1-eb3911635881 for import job 22
DEBUG:  Reset user context to original user 5625d86b-1e1d-43fc-bfa1-eb3911635881
DEBUG:  Rescheduled import job 22 for further processing
DEBUG:  Task 891 (import_job_process) completed in 0.277000 ms
DEBUG:  Set user context to 5625d86b-1e1d-43fc-bfa1-eb3911635881 for import job 23
DEBUG:  Reset user context to original user 5625d86b-1e1d-43fc-bfa1-eb3911635881
DEBUG:  Rescheduled import job 23 for further processing
DEBUG:  Task 892 (import_job_process) completed in 0.270000 ms
DEBUG:  Set user context to 5625d86b-1e1d-43fc-bfa1-eb3911635881 for import job 24
DEBUG:  Reset user context to original user 5625d86b-1e1d-43fc-bfa1-eb3911635881
DEBUG:  Rescheduled import job 24 for further processing
DEBUG:  Task 893 (import_job_process) completed in 0.301000 ms
DEBUG:  Exiting worker loop: No more pending tasks found
SET client_min_messages TO NOTICE;
SELECT queue, state, count(*) FROM worker.tasks AS t JOIN worker.command_registry AS c ON t.command = c.command GROUP BY queue,state ORDER BY queue,state;
    queue    |   state   | count 
-------------+-----------+-------
 import      | completed |    31
 maintenance | pending   |     1
(2 rows)

\echo Check import job state after import
Check import job state after import
SELECT state, count(*) FROM import_job GROUP BY state;
  state   | count 
----------+-------
 finished |     8
(1 row)

\echo Check data row state after import
Check data row state after import
SELECT state, count(*) FROM public.import_hovedenhet_2015_data GROUP BY state;
 state | count 
-------+-------
 error |  1000
(1 row)

\echo Check data row state after import
Check data row state after import
SELECT state, count(*) FROM public.import_underenhet_2015_data GROUP BY state;
  state  | count 
---------+-------
 error   |  1000
 pending |    30
(2 rows)

\echo Overview of statistical units
Overview of statistical units
SELECT valid_from
     , valid_to
     , name
     , external_idents ->> 'tax_ident' AS tax_ident
     , unit_type
 FROM public.statistical_unit
 ORDER BY valid_from, valid_to, name, external_idents ->> 'tax_ident', unit_type, unit_id;
 valid_from | valid_to | name | tax_ident | unit_type 
------------+----------+------+-----------+-----------
(0 rows)

\echo Getting statistical_units after upload
\x
SELECT valid_after
     , valid_from
     , valid_to
     , unit_type
     , external_idents
     , jsonb_pretty(
          public.remove_ephemeral_data_from_hierarchy(
          to_jsonb(statistical_unit.*)
          -'valid_after'
          -'valid_from'
          -'valid_to'
          -'unit_type'
          -'external_idents'
          -'stats'
          -'stats_summary'
          )
     ) AS statistical_unit_data
     , jsonb_pretty(stats) AS stats
     , jsonb_pretty(stats_summary) AS stats_summary
 FROM public.statistical_unit
 ORDER BY valid_from, valid_to, unit_type, external_idents ->> 'tax_ident', unit_id;
\x

ROLLBACK;
