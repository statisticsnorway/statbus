BEGIN;
\i test/setup.sql
-- While the datestyle is set for the database, the pg_regress tool sets the MDY format
-- to ensure consistent date formatting, so we must manually override this
SET datestyle TO 'ISO, DMY';
\if :{?DEBUG}
SET client_min_messages TO debug1;
\else
SET client_min_messages TO NOTICE;
\endif
-- Create temporary function to execute queries as system user
CREATE OR REPLACE FUNCTION test.sudo_exec(
    sql text,
    OUT results jsonb
) RETURNS jsonb
SECURITY DEFINER LANGUAGE plpgsql AS $sudo_exec$
DECLARE
    result_rows jsonb;
BEGIN
    -- Check if the SQL starts with common DDL keywords
    IF sql ~* '^\s*(CREATE|DROP|ALTER|TRUNCATE|GRANT|REVOKE|ANALYZE)' THEN
        -- For DDL statements, execute directly
        EXECUTE sql;
        results := '[]'::jsonb;
    ELSE
        -- For DML/queries, wrap in a SELECT to capture results
        EXECUTE format('
            SELECT COALESCE(
                jsonb_agg(row_to_json(t)),
                ''[]''::jsonb
            )
            FROM (%s) t',
            sql
        ) INTO result_rows;
        results := result_rows;
    END IF;
END;
$sudo_exec$;
-- Grant execute to public since this is for testing
GRANT EXECUTE ON FUNCTION test.sudo_exec(text) TO PUBLIC;
\echo Add users for testing purposes
Add users for testing purposes
SELECT * FROM public.user_create('test.admin@statbus.org', 'admin_user'::statbus_role, 'Admin#123!');
         email          |  password  
------------------------+------------
 test.admin@statbus.org | Admin#123!
(1 row)

SELECT * FROM public.user_create('test.regular@statbus.org', 'regular_user'::statbus_role, 'Regular#123!');
          email           |   password   
--------------------------+--------------
 test.regular@statbus.org | Regular#123!
(1 row)

SELECT * FROM public.user_create('test.restricted@statbus.org', 'restricted_user'::statbus_role, 'Restricted#123!');
            email            |    password     
-----------------------------+-----------------
 test.restricted@statbus.org | Restricted#123!
(1 row)

\echo "Setting up Statbus using the web provided examples"
"Setting up Statbus using the web provided examples"
-- A Super User configures statbus.
CALL test.set_user_from_email('test.admin@statbus.org');
\echo "User selected the Activity Category Standard"
"User selected the Activity Category Standard"
INSERT INTO settings(activity_category_standard_id,only_one_setting)
SELECT id, true FROM activity_category_standard WHERE code = 'isic_v4'
ON CONFLICT (only_one_setting)
DO UPDATE SET
   activity_category_standard_id =(SELECT id FROM activity_category_standard WHERE code = 'isic_v4')
   WHERE settings.id = EXCLUDED.id;
;
\echo "User uploads the sample activity categories"
"User uploads the sample activity categories"
\copy public.activity_category_available_custom(path,name) FROM 'app/public/demo/activity_custom_isic_demo.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
\echo "User uploads the sample regions"
"User uploads the sample regions"
\copy public.region_upload(path, name) FROM 'app/public/demo/regions_demo.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
\echo "User uploads the sample legal forms"
"User uploads the sample legal forms"
\copy public.legal_form_custom_only(code,name) FROM 'app/public/demo/legal_forms_demo.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
\echo "User uploads the sample sectors"
"User uploads the sample sectors"
\copy public.sector_custom_only(path,name,description) FROM 'app/public/demo/sectors_demo.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
SAVEPOINT before_loading_units;
SELECT
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.establishment) AS establishment_count,
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.legal_unit) AS legal_unit_count,
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.enterprise) AS enterprise_count;
 establishment_count | legal_unit_count | enterprise_count 
---------------------+------------------+------------------
                   0 |                0 |                0
(1 row)

-- Create Import Job for Legal Units with Data Source
INSERT INTO public.import_job (definition_id, slug, description, note, edit_comment, time_context_ident)
SELECT
    (SELECT id FROM public.import_definition WHERE slug = 'legal_unit_job_provided'),
    'import_32_lu_tc_ds',
    'Import LU with Time Context and Data Source (32_legal_units_with_data_source.sql)',
    'Import job for app/public/demo/legal_units_demo.csv using legal_unit_job_provided definition.',
    'Test data load (32_legal_units_with_data_source.sql)',
    'r_year_curr';
\echo "User uploads the sample legal units (via import job: import_32_lu_tc_ds)"
"User uploads the sample legal units (via import job: import_32_lu_tc_ds)"
\copy public.import_32_lu_tc_ds_upload(tax_ident,stat_ident,name,birth_date,physical_region_code,physical_country_iso_2,primary_activity_category_code,legal_form_code,sector_code,employees,turnover,data_source_code) FROM 'app/public/demo/legal_units_demo.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
\echo Run worker processing for import jobs
Run worker processing for import jobs
CALL worker.process_tasks(p_queue => 'import');
SELECT queue, state, count(*) FROM worker.tasks AS t JOIN worker.command_registry AS c ON t.command = c.command WHERE c.queue != 'maintenance' GROUP BY queue,state ORDER BY queue,state;
   queue   |   state   | count 
-----------+-----------+-------
 analytics | pending   |     6
 import    | completed |     6
(2 rows)

\echo "Checking unit counts after import processing"
"Checking unit counts after import processing"
SELECT
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.establishment) AS establishment_count,
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.legal_unit) AS legal_unit_count,
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.enterprise) AS enterprise_count;
 establishment_count | legal_unit_count | enterprise_count 
---------------------+------------------+------------------
                   0 |               23 |               23
(1 row)

\echo "Inspecting import job data for import_32_lu_tc_ds"
"Inspecting import job data for import_32_lu_tc_ds"
SELECT row_id, state, error, tax_ident, name, data_source_code
FROM public.import_32_lu_tc_ds_data
ORDER BY row_id
LIMIT 5;
 row_id |   state   | error | tax_ident  |            name             | data_source_code 
--------+-----------+-------+------------+-----------------------------+------------------
      1 | processed |       | 2212760144 | NILE PEARL WATER            | nlr
      2 | processed |       | 2812760140 | EQUATOR GLOBE SOLUTIONS     | nlr
      3 | processed |       | 2212760084 | EQUATOR CIRCLE CONSTRUCTION | nlr
      4 | processed |       | 2612760138 | LIRA FRESH FRUIT EXPORTERS  | nlr
      5 | processed |       | 2812760130 | ENTEBBE FUEL ENTERPRISES    | nlr
(5 rows)

\echo "Checking import job status for import_32_lu_tc_ds"
"Checking import job status for import_32_lu_tc_ds"
SELECT slug, state, total_rows, imported_rows, error IS NOT NULL AS has_error,
       (SELECT COUNT(*) FROM public.import_32_lu_tc_ds_data dr WHERE dr.state = 'error') AS error_rows
FROM public.import_job
WHERE slug = 'import_32_lu_tc_ds'
ORDER BY slug;
        slug        |  state   | total_rows | imported_rows | has_error | error_rows 
--------------------+----------+------------+---------------+-----------+------------
 import_32_lu_tc_ds | finished |         23 |            23 | f         |          0
(1 row)

\echo Run worker processing for analytics tasks
Run worker processing for analytics tasks
CALL worker.process_tasks(p_queue => 'analytics');
SELECT queue, state, count(*) FROM worker.tasks AS t JOIN worker.command_registry AS c ON t.command = c.command WHERE c.queue != 'maintenance' GROUP BY queue,state ORDER BY queue,state;
   queue   |   state   | count 
-----------+-----------+-------
 analytics | completed |     8
 import    | completed |     6
(2 rows)

\echo "Checking statistics"
"Checking statistics"
SELECT name, external_idents, unit_type, data_source_codes, invalid_codes
 FROM statistical_unit
 WHERE valid_after < CURRENT_DATE AND CURRENT_DATE <= valid_to
 ORDER BY name, external_idents->>'tax_ident', unit_type, valid_from, unit_id;
            name             |                 external_idents                 | unit_type  | data_source_codes | invalid_codes 
-----------------------------+-------------------------------------------------+------------+-------------------+---------------
 Amman RIAD 13-14            | {"tax_ident": "3300598", "stat_ident": "22"}    | legal_unit | {nlr}             | 
 Amman RIAD 13-14            | {"tax_ident": "3300598", "stat_ident": "22"}    | enterprise | {nlr}             | 
 ENTEBBE FUEL ENTERPRISES    | {"tax_ident": "2812760130", "stat_ident": "5"}  | legal_unit | {nlr}             | 
 ENTEBBE FUEL ENTERPRISES    | {"tax_ident": "2812760130", "stat_ident": "5"}  | enterprise | {nlr}             | 
 EQUATOR CIRCLE CONSTRUCTION | {"tax_ident": "2212760084", "stat_ident": "3"}  | legal_unit | {nlr}             | 
 EQUATOR CIRCLE CONSTRUCTION | {"tax_ident": "2212760084", "stat_ident": "3"}  | enterprise | {nlr}             | 
 EQUATOR GLOBE SOLUTIONS     | {"tax_ident": "2812760140", "stat_ident": "2"}  | legal_unit | {nlr}             | 
 EQUATOR GLOBE SOLUTIONS     | {"tax_ident": "2812760140", "stat_ident": "2"}  | enterprise | {nlr}             | 
 Erdenes Tavan Tolgoi JSC    | {"tax_ident": "397611", "stat_ident": "19"}     | legal_unit | {nlr}             | 
 Erdenes Tavan Tolgoi JSC    | {"tax_ident": "397611", "stat_ident": "19"}     | enterprise | {nlr}             | 
 KAMPALA Cofffe SUPPLIERS    | {"tax_ident": "2815384160", "stat_ident": "11"} | legal_unit | {nlr}             | 
 KAMPALA Cofffe SUPPLIERS    | {"tax_ident": "2815384160", "stat_ident": "11"} | enterprise | {nlr}             | 
 KAMPALA DIGITAL CHARTS      | {"tax_ident": "2407020166", "stat_ident": "7"}  | legal_unit | {nlr}             | 
 KAMPALA DIGITAL CHARTS      | {"tax_ident": "2407020166", "stat_ident": "7"}  | enterprise | {nlr}             | 
 LIRA FRESH FRUIT EXPORTERS  | {"tax_ident": "2612760138", "stat_ident": "4"}  | legal_unit | {nlr}             | 
 LIRA FRESH FRUIT EXPORTERS  | {"tax_ident": "2612760138", "stat_ident": "4"}  | enterprise | {nlr}             | 
 MANUAL Auto Uzbekistan      | {"tax_ident": "3998011", "stat_ident": "231"}   | legal_unit | {nlr}             | 
 MANUAL Auto Uzbekistan      | {"tax_ident": "3998011", "stat_ident": "231"}   | enterprise | {nlr}             | 
 MARINE SERVICES             | {"tax_ident": "2602025168", "stat_ident": "8"}  | legal_unit | {nlr}             | 
 MARINE SERVICES             | {"tax_ident": "2602025168", "stat_ident": "8"}  | enterprise | {nlr}             | 
 Morocco Trade               | {"tax_ident": "5340521", "stat_ident": "16"}    | legal_unit | {nlr}             | 
 Morocco Trade               | {"tax_ident": "5340521", "stat_ident": "16"}    | enterprise | {nlr}             | 
 NILE PEARL WATER            | {"tax_ident": "2212760144", "stat_ident": "1"}  | legal_unit | {nlr}             | 
 NILE PEARL WATER            | {"tax_ident": "2212760144", "stat_ident": "1"}  | enterprise | {nlr}             | 
 NILE TEXTILES               | {"tax_ident": "2612760118", "stat_ident": "9"}  | legal_unit | {nlr}             | 
 NILE TEXTILES               | {"tax_ident": "2612760118", "stat_ident": "9"}  | enterprise | {nlr}             | 
 Office Picture Corp         | {"tax_ident": "2220794", "stat_ident": "17"}    | legal_unit | {nlr}             | 
 Office Picture Corp         | {"tax_ident": "2220794", "stat_ident": "17"}    | enterprise | {nlr}             | 
 Oyu Tolgoi LLC              | {"tax_ident": "397622", "stat_ident": "20"}     | legal_unit | {nlr}             | 
 Oyu Tolgoi LLC              | {"tax_ident": "397622", "stat_ident": "20"}     | enterprise | {nlr}             | 
 Rainbow shopping            | {"tax_ident": "2200019", "stat_ident": "21"}    | legal_unit | {nlr}             | 
 Rainbow shopping            | {"tax_ident": "2200019", "stat_ident": "21"}    | enterprise | {nlr}             | 
 Statistics Denmark          | {"tax_ident": "45000", "stat_ident": "13"}      | legal_unit | {nlr}             | 
 Statistics Denmark          | {"tax_ident": "45000", "stat_ident": "13"}      | enterprise | {nlr}             | 
 Statistics Ethiopia         | {"tax_ident": "22501", "stat_ident": "18"}      | legal_unit | {nlr}             | 
 Statistics Ethiopia         | {"tax_ident": "22501", "stat_ident": "18"}      | enterprise | {nlr}             | 
 Statistics Finland          | {"tax_ident": "358000", "stat_ident": "14"}     | legal_unit | {nlr}             | 
 Statistics Finland          | {"tax_ident": "358000", "stat_ident": "14"}     | enterprise | {nlr}             | 
 Statistics Norway           | {"tax_ident": "4711111", "stat_ident": "230"}   | legal_unit | {nlr}             | 
 Statistics Norway           | {"tax_ident": "4711111", "stat_ident": "230"}   | enterprise | {nlr}             | 
 Statistics Sweeden          | {"tax_ident": "46001", "stat_ident": "15"}      | legal_unit | {nlr}             | 
 Statistics Sweeden          | {"tax_ident": "46001", "stat_ident": "15"}      | enterprise | {nlr}             | 
 VICTORIA FRESH FARMS        | {"tax_ident": "2507020167", "stat_ident": "12"} | legal_unit | {nlr}             | 
 VICTORIA FRESH FARMS        | {"tax_ident": "2507020167", "stat_ident": "12"} | enterprise | {nlr}             | 
 ZEBRA HAVEN SAFARIS         | {"tax_ident": "2312760075", "stat_ident": "6"}  | legal_unit | {nlr}             | 
 ZEBRA HAVEN SAFARIS         | {"tax_ident": "2312760075", "stat_ident": "6"}  | enterprise | {nlr}             | 
(46 rows)

ROLLBACK;
