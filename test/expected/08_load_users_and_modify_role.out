BEGIN;
\i test/setup.sql
-- While the datestyle is set for the database, the pg_regress tool sets the MDY format
-- to ensure consistent date formatting, so we must manually override this
SET datestyle TO 'ISO, DMY';
\if :{?DEBUG}
SET client_min_messages TO debug1;
\else
SET client_min_messages TO NOTICE;
\endif
-- Create temporary function to execute queries as system user
CREATE OR REPLACE FUNCTION test.sudo_exec(
    sql text,
    OUT results jsonb
) RETURNS jsonb
SECURITY DEFINER LANGUAGE plpgsql AS $sudo_exec$
DECLARE
    result_rows jsonb;
BEGIN
    -- Check if the SQL starts with common DDL keywords
    IF sql ~* '^\s*(CREATE|DROP|ALTER|TRUNCATE|GRANT|REVOKE|ANALYZE)' THEN
        -- For DDL statements, execute directly
        EXECUTE sql;
        results := '[]'::jsonb;
    ELSE
        -- For DML/queries, wrap in a SELECT to capture results
        EXECUTE format('
            SELECT COALESCE(
                jsonb_agg(row_to_json(t)),
                ''[]''::jsonb
            )
            FROM (%s) t',
            sql
        ) INTO result_rows;
        results := result_rows;
    END IF;
END;
$sudo_exec$;
-- Grant execute to public since this is for testing
GRANT EXECUTE ON FUNCTION test.sudo_exec(text) TO PUBLIC;
\echo Add users for testing purposes
Add users for testing purposes
SELECT * FROM public.user_create('test.admin@statbus.org', 'admin_user'::statbus_role, 'Admin#123!');
         email          |  password  
------------------------+------------
 test.admin@statbus.org | Admin#123!
(1 row)

SELECT * FROM public.user_create('test.regular@statbus.org', 'regular_user'::statbus_role, 'Regular#123!');
          email           |   password   
--------------------------+--------------
 test.regular@statbus.org | Regular#123!
(1 row)

SELECT * FROM public.user_create('test.restricted@statbus.org', 'restricted_user'::statbus_role, 'Restricted#123!');
            email            |    password     
-----------------------------+-----------------
 test.restricted@statbus.org | Restricted#123!
(1 row)

-- Create test users with different roles
SELECT public.user_create('test.admin@example.com', 'admin_user'::statbus_role, 'AdminPass123!');
              user_create               
----------------------------------------
 (test.admin@example.com,AdminPass123!)
(1 row)

SELECT public.user_create('test.regular@example.com', 'regular_user'::statbus_role, 'RegularPass123!');
                user_create                 
--------------------------------------------
 (test.regular@example.com,RegularPass123!)
(1 row)

SELECT public.user_create('test.restricted@example.com', 'restricted_user'::statbus_role, 'RestrictedPass123!');
                   user_create                    
--------------------------------------------------
 (test.restricted@example.com,RestrictedPass123!)
(1 row)

-- Verify users were created with correct roles
DO $$
DECLARE
    v_count integer;
BEGIN
    SELECT COUNT(*) INTO v_count
    FROM user_with_role
    WHERE email LIKE '%@example.com';

    IF v_count = 3 THEN
        RAISE NOTICE '✓ Three users created';
    ELSE
        RAISE EXCEPTION 'Expected 3 users, but found % users', v_count;
    END IF;
END $$;
NOTICE:  ✓ Three users created
DO $$
DECLARE
    v_statbus_role statbus_role;
BEGIN
    SELECT statbus_role INTO v_statbus_role
    FROM user_with_role
    WHERE email = 'test.admin@example.com';

    IF v_statbus_role = 'admin_user' THEN
        RAISE NOTICE '✓ Super user has correct role';
    ELSE
        RAISE EXCEPTION 'Expected admin_user role, but found %', v_statbus_role;
    END IF;
END $$;
NOTICE:  ✓ Super user has correct role
-- Test role update functionality with super user
SAVEPOINT before_admin_user_test;
CALL test.set_user_from_email('test.admin@example.com');
-- Should succeed: super user updating another user's role
UPDATE user_with_role
SET statbus_role = 'regular_user'
WHERE email = 'test.restricted@example.com';
WARNING:  role "test.restricted@example.com" has not been granted membership in role "restricted_user" by role "postgres"
NOTICE:  role "test.restricted@example.com" has already been granted membership in role "regular_user" by role "postgres"
-- Verify the update worked
DO $$
DECLARE
    v_statbus_role statbus_role;
BEGIN
    SELECT statbus_role INTO v_statbus_role
    FROM user_with_role
    WHERE email = 'test.restricted@example.com';

    IF v_statbus_role = 'regular_user' THEN
        RAISE NOTICE '✓ Role update succeeded';
    ELSE
        RAISE EXCEPTION 'Expected regular_user role, but found %', v_statbus_role;
    END IF;
END $$;
NOTICE:  ✓ Role update succeeded
ROLLBACK TO SAVEPOINT before_admin_user_test;
-- Test permission checks with regular user
SAVEPOINT before_regular_user_test;
CALL test.set_user_from_email('test.regular@example.com');
-- Should fail: non-super user trying to update roles
DO $$
BEGIN
    BEGIN
        UPDATE user_with_role
        SET statbus_role = 'restricted_user'
        WHERE email = 'test.regular@example.com';
        RAISE EXCEPTION 'Should not reach this point';
    EXCEPTION
        WHEN OTHERS THEN
            IF SQLERRM LIKE '%Only admin users or system accounts can perform this action%' THEN
                RAISE NOTICE '✓ Permission check working: %', SQLERRM;
            ELSE
                RAISE EXCEPTION 'Unexpected error: %', SQLERRM;
            END IF;
    END;
END $$;
NOTICE:  ✓ Permission check working: Only admin users or system accounts can perform this action
ROLLBACK;
