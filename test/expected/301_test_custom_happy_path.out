SET datestyle TO 'ISO, DMY';
BEGIN;
\i test/setup.sql
-- While the datestyle is set for the database, the pg_regress tool sets the MDY format
-- to ensure consistent date formatting, so we must manually override this
SET datestyle TO 'ISO, DMY';
\if :{?DEBUG}
SET client_min_messages TO debug1;
\else
SET client_min_messages TO NOTICE;
\endif
-- Create temporary function to execute queries as system user
CREATE OR REPLACE FUNCTION test.sudo_exec(
    sql text,
    OUT results jsonb
) RETURNS jsonb
SECURITY DEFINER LANGUAGE plpgsql AS $sudo_exec$
DECLARE
    result_rows jsonb;
BEGIN
    -- Check if the SQL starts with common DDL keywords
    IF sql ~* '^\s*(CREATE|DROP|ALTER|TRUNCATE|GRANT|REVOKE|ANALYZE)' THEN
        -- For DDL statements, execute directly
        EXECUTE sql;
        results := '[]'::jsonb;
    ELSE
        -- For DML/queries, wrap in a SELECT to capture results
        EXECUTE format('
            SELECT COALESCE(
                jsonb_agg(row_to_json(t)),
                ''[]''::jsonb
            )
            FROM (%s) t',
            sql
        ) INTO result_rows;
        results := result_rows;
    END IF;
END;
$sudo_exec$;
-- Grant execute to public since this is for testing
GRANT EXECUTE ON FUNCTION test.sudo_exec(text) TO PUBLIC;
\echo Add users for testing purposes
Add users for testing purposes
SELECT * FROM public.user_create('test.admin@statbus.org', 'admin_user'::statbus_role, 'Admin#123!');
         email          |  password  
------------------------+------------
 test.admin@statbus.org | Admin#123!
(1 row)

SELECT * FROM public.user_create('test.regular@statbus.org', 'regular_user'::statbus_role, 'Regular#123!');
          email           |   password   
--------------------------+--------------
 test.regular@statbus.org | Regular#123!
(1 row)

SELECT * FROM public.user_create('test.restricted@statbus.org', 'restricted_user'::statbus_role, 'Restricted#123!');
            email            |    password     
-----------------------------+-----------------
 test.restricted@statbus.org | Restricted#123!
(1 row)

\echo "Test 71: Custom Happy Path - Custom Stats (Men/Women Employees) and Custom External Ident (NIN)"
"Test 71: Custom Happy Path - Custom Stats (Men/Women Employees) and Custom External Ident (NIN)"
\echo "Setting up Statbus environment for test 71"
"Setting up Statbus environment for test 71"
-- A Super User configures statbus.
CALL test.set_user_from_email('test.admin@statbus.org');
\echo "User selected the Activity Category Standard"
"User selected the Activity Category Standard"
INSERT INTO settings(activity_category_standard_id,only_one_setting)
SELECT id, true FROM activity_category_standard WHERE code = 'nace_v2.1'
ON CONFLICT (only_one_setting)
DO UPDATE SET
   activity_category_standard_id =(SELECT id FROM activity_category_standard WHERE code = 'nace_v2.1')
   WHERE settings.id = EXCLUDED.id;
SELECT acs.code FROM public.settings AS s JOIN activity_category_standard AS acs ON s.activity_category_standard_id = acs.id;
   code    
-----------
 nace_v2.1
(1 row)

\echo "User uploads the sample activity categories, regions, legal forms, sectors, tags"
"User uploads the sample activity categories, regions, legal forms, sectors, tags"
\copy public.activity_category_available_custom(path,name,description) FROM 'samples/norway/activity_category/activity_category_norway.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
\copy public.region_upload(path, name) FROM 'samples/norway/regions/norway-regions-2024.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
\copy public.legal_form_custom_only(code,name) FROM 'samples/norway/legal_form/legal_form_norway.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
\copy public.sector_custom_only(path,name,description) FROM 'samples/norway/sector/sector_norway.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
\echo "Ensure sample tags are loaded"
"Ensure sample tags are loaded"
INSERT INTO public.tag (path, name, type) VALUES
('TestTag', 'Test Tag Parent', 'custom'),
('TestTag.LU', 'Legal Unit Test Tag', 'custom'),
('TestTag.LU.Updated', 'Legal Unit Updated Test Tag', 'custom'),
('TestTag.ES', 'Establishment Test Tag Parent', 'custom'),
('TestTag.ES.Formal', 'Formal Establishment Test Tag', 'custom'),
('TestTag.ES.Formal.Updated', 'Formal Establishment Updated Test Tag', 'custom'),
('TestTag.ES.Informal', 'Informal Establishment Test Tag', 'custom'),
('TestTag.ES.Informal.Updated', 'Informal Establishment Updated Test Tag', 'custom')
ON CONFLICT (path) DO NOTHING;
\echo "Setup custom stat definitions and external ident types for Test 71"
"Setup custom stat definitions and external ident types for Test 71"
INSERT INTO public.stat_definition (code, name, type, frequency, description, archived, priority) VALUES
('men_employees', 'Number of Men Employees', 'int', 'yearly', 'Number of men employees in the unit', false, 10),
('women_employees', 'Number of Women Employees', 'int', 'yearly', 'Number of women employees in the unit', false, 11)
ON CONFLICT (code) DO UPDATE SET archived = false; -- Ensure they are active for this test
NOTICE:  Dropped index su_ei_stat_ident_idx
NOTICE:  Dropped index su_ei_tax_ident_idx
NOTICE:  Dropped index su_s_employees_idx
NOTICE:  Dropped index su_s_turnover_idx
NOTICE:  Dropped index su_ss_employees_count_idx
NOTICE:  Dropped index su_ss_employees_sum_idx
NOTICE:  Dropped index su_ss_turnover_count_idx
NOTICE:  Dropped index su_ss_turnover_sum_idx
NOTICE:  Created index su_ei_tax_ident for external_ident_type
NOTICE:  Created index su_ei_stat_ident for external_ident_type
NOTICE:  Created indices for stat_definition employees
NOTICE:  Created indices for stat_definition turnover
NOTICE:  Created indices for stat_definition men_employees
NOTICE:  Created indices for stat_definition women_employees
NOTICE:  Dropped index su_ei_stat_ident_idx
NOTICE:  Dropped index su_ei_tax_ident_idx
NOTICE:  Dropped index su_s_employees_idx
NOTICE:  Dropped index su_s_men_employees_idx
NOTICE:  Dropped index su_s_turnover_idx
NOTICE:  Dropped index su_s_women_employees_idx
NOTICE:  Dropped index su_ss_employees_count_idx
NOTICE:  Dropped index su_ss_employees_sum_idx
NOTICE:  Dropped index su_ss_men_employees_count_idx
NOTICE:  Dropped index su_ss_men_employees_sum_idx
NOTICE:  Dropped index su_ss_turnover_count_idx
NOTICE:  Dropped index su_ss_turnover_sum_idx
NOTICE:  Dropped index su_ss_women_employees_count_idx
NOTICE:  Dropped index su_ss_women_employees_sum_idx
NOTICE:  Created index su_ei_tax_ident for external_ident_type
NOTICE:  Created index su_ei_stat_ident for external_ident_type
NOTICE:  Created indices for stat_definition employees
NOTICE:  Created indices for stat_definition turnover
NOTICE:  Created indices for stat_definition men_employees
NOTICE:  Created indices for stat_definition women_employees
INSERT INTO public.external_ident_type (code, name, description, priority, archived) VALUES
('nin_ident', 'National Identity Number', 'Custom NIN ident for test 71', 3, false)
ON CONFLICT (code) DO UPDATE SET archived = false; -- Ensure it's active
NOTICE:  Dropped index su_ei_stat_ident_idx
NOTICE:  Dropped index su_ei_tax_ident_idx
NOTICE:  Dropped index su_s_employees_idx
NOTICE:  Dropped index su_s_men_employees_idx
NOTICE:  Dropped index su_s_turnover_idx
NOTICE:  Dropped index su_s_women_employees_idx
NOTICE:  Dropped index su_ss_employees_count_idx
NOTICE:  Dropped index su_ss_employees_sum_idx
NOTICE:  Dropped index su_ss_men_employees_count_idx
NOTICE:  Dropped index su_ss_men_employees_sum_idx
NOTICE:  Dropped index su_ss_turnover_count_idx
NOTICE:  Dropped index su_ss_turnover_sum_idx
NOTICE:  Dropped index su_ss_women_employees_count_idx
NOTICE:  Dropped index su_ss_women_employees_sum_idx
NOTICE:  Created index su_ei_tax_ident for external_ident_type
NOTICE:  Created index su_ei_stat_ident for external_ident_type
NOTICE:  Created index su_ei_nin_ident for external_ident_type
NOTICE:  Created indices for stat_definition employees
NOTICE:  Created indices for stat_definition turnover
NOTICE:  Created indices for stat_definition men_employees
NOTICE:  Created indices for stat_definition women_employees
NOTICE:  Dropped index su_ei_nin_ident_idx
NOTICE:  Dropped index su_ei_stat_ident_idx
NOTICE:  Dropped index su_ei_tax_ident_idx
NOTICE:  Dropped index su_s_employees_idx
NOTICE:  Dropped index su_s_men_employees_idx
NOTICE:  Dropped index su_s_turnover_idx
NOTICE:  Dropped index su_s_women_employees_idx
NOTICE:  Dropped index su_ss_employees_count_idx
NOTICE:  Dropped index su_ss_employees_sum_idx
NOTICE:  Dropped index su_ss_men_employees_count_idx
NOTICE:  Dropped index su_ss_men_employees_sum_idx
NOTICE:  Dropped index su_ss_turnover_count_idx
NOTICE:  Dropped index su_ss_turnover_sum_idx
NOTICE:  Dropped index su_ss_women_employees_count_idx
NOTICE:  Dropped index su_ss_women_employees_sum_idx
NOTICE:  Created index su_ei_tax_ident for external_ident_type
NOTICE:  Created index su_ei_stat_ident for external_ident_type
NOTICE:  Created index su_ei_nin_ident for external_ident_type
NOTICE:  Created indices for stat_definition employees
NOTICE:  Created indices for stat_definition turnover
NOTICE:  Created indices for stat_definition men_employees
NOTICE:  Created indices for stat_definition women_employees
-- Archive stat_ident for this test to ensure nin_ident is picked up where applicable
UPDATE public.external_ident_type SET archived = true WHERE code = 'stat_ident';
NOTICE:  Dropped index su_ei_nin_ident_idx
NOTICE:  Dropped index su_ei_stat_ident_idx
NOTICE:  Dropped index su_ei_tax_ident_idx
NOTICE:  Dropped index su_s_employees_idx
NOTICE:  Dropped index su_s_men_employees_idx
NOTICE:  Dropped index su_s_turnover_idx
NOTICE:  Dropped index su_s_women_employees_idx
NOTICE:  Dropped index su_ss_employees_count_idx
NOTICE:  Dropped index su_ss_employees_sum_idx
NOTICE:  Dropped index su_ss_men_employees_count_idx
NOTICE:  Dropped index su_ss_men_employees_sum_idx
NOTICE:  Dropped index su_ss_turnover_count_idx
NOTICE:  Dropped index su_ss_turnover_sum_idx
NOTICE:  Dropped index su_ss_women_employees_count_idx
NOTICE:  Dropped index su_ss_women_employees_sum_idx
NOTICE:  Created index su_ei_tax_ident for external_ident_type
NOTICE:  Created index su_ei_nin_ident for external_ident_type
NOTICE:  Created indices for stat_definition employees
NOTICE:  Created indices for stat_definition turnover
NOTICE:  Created indices for stat_definition men_employees
NOTICE:  Created indices for stat_definition women_employees
\echo "Define custom import definitions for Test 71"
"Define custom import definitions for Test 71"
DO $$
DECLARE
    v_lu_def_id INT;
    v_es_lu_def_id INT;
    v_es_no_lu_def_id INT;
    v_lu_step_ids INT[];
    v_es_formal_step_ids INT[];
    v_es_informal_step_ids INT[];
    v_lu_source_cols TEXT[][] := ARRAY[
        ['tax_ident', '1'], ['nin_ident', '2'], ['valid_from', '3'], ['valid_to', '4'], ['name', '5'],
        ['birth_date', '6'], ['sector_code', '7'], ['status_code', '8'], ['legal_form_code', '9'],
        ['data_source_code', '10'],
        ['physical_address_part1', '11'], ['physical_country_iso_2', '12'], ['physical_postcode', '13'], ['physical_region_code', '14'],
        ['primary_activity_category_code', '15'],
        ['men_employees', '16'], ['women_employees', '17'], ['tag_path', '18'], ['email_address', '19']
    ];
    v_es_source_cols TEXT[][] := ARRAY[
        ['tax_ident', '1'], ['nin_ident', '2'], ['legal_unit_tax_ident', '3'], ['valid_from', '4'], ['valid_to', '5'], ['name', '6'], ['status_code', '7'],
        ['physical_address_part1', '8'], ['physical_country_iso_2', '9'], ['physical_postcode', '10'], ['physical_region_code', '11'],
        ['primary_activity_category_code', '12'],
        ['men_employees', '13'], ['women_employees', '14'], ['tag_path', '15'],
        ['email_address', '16']
    ];
    v_es_no_lu_source_cols TEXT[][] := ARRAY[
        ['tax_ident', '1'], ['nin_ident', '2'], ['valid_from', '3'], ['valid_to', '4'], ['name', '5'], ['status_code', '6'],
        ['physical_address_part1', '7'], ['physical_country_iso_2', '8'], ['physical_postcode', '9'], ['physical_region_code', '10'],
        ['primary_activity_category_code', '11'],
        ['men_employees', '12'], ['women_employees', '13'], ['tag_path', '14'],
        ['email_address', '15']
    ];
    col_rec TEXT[];
BEGIN
    -- Define step ID arrays for different import modes
    SELECT array_agg(s.id) INTO v_lu_step_ids
    FROM public.import_step s
    WHERE s.code IN (
        'external_idents', 'enterprise_link_for_legal_unit', 'valid_time', 'status', 'legal_unit',
        'physical_location', 'postal_location', 'primary_activity', 'secondary_activity',
        'contact', 'statistical_variables', 'tags', 'edit_info', 'metadata'
    );

    SELECT array_agg(s.id) INTO v_es_formal_step_ids
    FROM public.import_step s
    WHERE s.code IN (
        'external_idents', 'link_establishment_to_legal_unit', 'enterprise_link_for_establishment', 'valid_time', 'status', 'establishment',
        'physical_location', 'postal_location', 'primary_activity', 'secondary_activity',
        'contact', 'statistical_variables', 'tags', 'edit_info', 'metadata'
    );

    SELECT array_agg(s.id) INTO v_es_informal_step_ids
    FROM public.import_step s
    WHERE s.code IN (
        'external_idents', 'enterprise_link_for_establishment', 'valid_time', 'status', 'establishment',
        'physical_location', 'postal_location', 'primary_activity', 'secondary_activity',
        'contact', 'statistical_variables', 'tags', 'edit_info', 'metadata'
    );

    -- Create Legal Unit Import Definition for Test 71
    INSERT INTO public.import_definition (slug, name, note, strategy, mode, valid_time_from, valid)
    VALUES ('legal_unit_custom_test71', 'Test 71 LU Custom', 'Imports LUs with NIN and custom stats', 'insert_or_replace', 'legal_unit', 'source_columns', false)
    RETURNING id INTO v_lu_def_id;

    INSERT INTO public.import_definition_step (definition_id, step_id)
    SELECT v_lu_def_id, unnest(v_lu_step_ids);

    FOREACH col_rec SLICE 1 IN ARRAY v_lu_source_cols LOOP
        INSERT INTO public.import_source_column (definition_id, column_name, priority)
        VALUES (v_lu_def_id, col_rec[1], col_rec[2]::INT);
    END LOOP;

    INSERT INTO public.import_mapping (definition_id, source_column_id, target_data_column_id)
    SELECT d.id, sc.id, dc.id
    FROM public.import_definition d
    JOIN public.import_source_column sc ON sc.definition_id = d.id
    JOIN public.import_definition_step ds ON ds.definition_id = d.id
    JOIN public.import_data_column dc ON dc.step_id = ds.step_id AND dc.column_name = sc.column_name AND dc.purpose = 'source_input'
    WHERE d.id = v_lu_def_id;
    UPDATE public.import_definition SET valid = true WHERE id = v_lu_def_id;

    -- Create Establishment (for LU) Import Definition for Test 71
    INSERT INTO public.import_definition (slug, name, note, strategy, mode, valid_time_from, valid)
    VALUES ('establishment_for_lu_custom_test71', 'Test 71 ES for LU Custom', 'Imports ES for LU with NIN and custom stats', 'insert_or_replace', 'establishment_formal', 'source_columns', false)
    RETURNING id INTO v_es_lu_def_id;

    INSERT INTO public.import_definition_step (definition_id, step_id)
    SELECT v_es_lu_def_id, unnest(v_es_formal_step_ids);

    FOREACH col_rec SLICE 1 IN ARRAY v_es_source_cols LOOP
        INSERT INTO public.import_source_column (definition_id, column_name, priority)
        VALUES (v_es_lu_def_id, col_rec[1], col_rec[2]::INT);
    END LOOP;

    INSERT INTO public.import_mapping (definition_id, source_column_id, target_data_column_id)
    SELECT d.id, sc.id, dc.id
    FROM public.import_definition d
    JOIN public.import_source_column sc ON sc.definition_id = d.id
    JOIN public.import_definition_step ds ON ds.definition_id = d.id
    JOIN public.import_data_column dc ON dc.step_id = ds.step_id AND dc.column_name = sc.column_name AND dc.purpose = 'source_input'
    WHERE d.id = v_es_lu_def_id;
    UPDATE public.import_definition SET valid = true WHERE id = v_es_lu_def_id;

    -- Create Establishment (without LU) Import Definition for Test 71
    INSERT INTO public.import_definition (slug, name, note, strategy, mode, valid_time_from, valid)
    VALUES ('establishment_without_lu_custom_test71', 'Test 71 ES no LU Custom', 'Imports ES no LU with NIN and custom stats', 'insert_or_replace', 'establishment_informal', 'source_columns', false)
    RETURNING id INTO v_es_no_lu_def_id;

    INSERT INTO public.import_definition_step (definition_id, step_id)
    SELECT v_es_no_lu_def_id, unnest(v_es_informal_step_ids);

    FOREACH col_rec SLICE 1 IN ARRAY v_es_no_lu_source_cols LOOP
        INSERT INTO public.import_source_column (definition_id, column_name, priority)
        VALUES (v_es_no_lu_def_id, col_rec[1], col_rec[2]::INT);
    END LOOP;

    INSERT INTO public.import_mapping (definition_id, source_column_id, target_data_column_id)
    SELECT d.id, sc.id, dc.id
    FROM public.import_definition d
    JOIN public.import_source_column sc ON sc.definition_id = d.id
    JOIN public.import_definition_step ds ON ds.definition_id = d.id
    JOIN public.import_data_column dc ON dc.step_id = ds.step_id AND dc.column_name = sc.column_name AND dc.purpose = 'source_input'
    WHERE d.id = v_es_no_lu_def_id;
    UPDATE public.import_definition SET valid = true WHERE id = v_es_no_lu_def_id;

END $$;
SAVEPOINT main_test_71_start;
\echo "Initial counts before any test block for Test 71"
"Initial counts before any test block for Test 71"
SELECT
    (SELECT COUNT(*) FROM public.legal_unit) AS legal_unit_count,
    (SELECT COUNT(*) FROM public.establishment) AS establishment_count,
    (SELECT COUNT(*) FROM public.enterprise) AS enterprise_count;
 legal_unit_count | establishment_count | enterprise_count 
------------------+---------------------+------------------
                0 |                   0 |                0
(1 row)

--------------------------------------------------------------------------------
-- Scenario 71.A: Legal Unit - Custom Stats and NIN
--------------------------------------------------------------------------------
SAVEPOINT scenario_71_a_lu_lifecycle;
\echo "Scenario 71.A: Legal Unit - Custom Stats and NIN (LU-71A)"
"Scenario 71.A: Legal Unit - Custom Stats and NIN (LU-71A)"
-- Sub-Scenario 71.A.1: Initial LU Import (1 Row)
\echo "Sub-Scenario 71.A.1: Initial LU Import for LU-71A"
"Sub-Scenario 71.A.1: Initial LU Import for LU-71A"
DO $$
DECLARE v_definition_id INT;
BEGIN
    SELECT id INTO v_definition_id FROM public.import_definition WHERE slug = 'legal_unit_custom_test71';
    IF v_definition_id IS NULL THEN RAISE EXCEPTION 'Import definition legal_unit_custom_test71 not found.'; END IF;
    INSERT INTO public.import_job (definition_id, slug, description, edit_comment)
    VALUES (v_definition_id, 'import_71_a1_lu', 'Test 71.A.1: LU-71A Initial', 'Test 71.A.1');
END $$;
\echo '--- Debugging Schema for Job import_71_a1_lu ---'
--- Debugging Schema for Job import_71_a1_lu ---
\d+ public.import_71_a1_lu_data
                                                            Table "public.import_71_a1_lu_data"
              Column              |           Type            | Collation | Nullable |           Default            | Storage  | Stats target | Description 
----------------------------------+---------------------------+-----------+----------+------------------------------+----------+--------------+-------------
 row_id                           | integer                   |           | not null | generated always as identity | plain    |              | 
 valid_from                       | text                      |           |          |                              | extended |              | 
 valid_to                         | text                      |           |          |                              | extended |              | 
 derived_valid_after              | date                      |           |          |                              | plain    |              | 
 derived_valid_from               | date                      |           |          |                              | plain    |              | 
 derived_valid_to                 | date                      |           |          |                              | plain    |              | 
 operation                        | import_row_operation_type |           |          |                              | plain    |              | 
 action                           | import_row_action_type    |           |          |                              | plain    |              | 
 tax_ident                        | text                      |           |          |                              | extended |              | 
 nin_ident                        | text                      |           |          |                              | extended |              | 
 status_code                      | text                      |           |          |                              | extended |              | 
 status_id                        | integer                   |           |          |                              | plain    |              | 
 enterprise_id                    | integer                   |           |          |                              | plain    |              | 
 primary_for_enterprise           | boolean                   |           |          |                              | plain    |              | 
 name                             | text                      |           |          |                              | extended |              | 
 birth_date                       | text                      |           |          |                              | extended |              | 
 death_date                       | text                      |           |          |                              | extended |              | 
 sector_code                      | text                      |           |          |                              | extended |              | 
 unit_size_code                   | text                      |           |          |                              | extended |              | 
 legal_form_code                  | text                      |           |          |                              | extended |              | 
 data_source_code                 | text                      |           |          |                              | extended |              | 
 legal_unit_id                    | integer                   |           |          |                              | plain    |              | 
 sector_id                        | integer                   |           |          |                              | plain    |              | 
 unit_size_id                     | integer                   |           |          |                              | plain    |              | 
 legal_form_id                    | integer                   |           |          |                              | plain    |              | 
 data_source_id                   | integer                   |           |          |                              | plain    |              | 
 typed_birth_date                 | date                      |           |          |                              | plain    |              | 
 typed_death_date                 | date                      |           |          |                              | plain    |              | 
 physical_address_part1           | text                      |           |          |                              | extended |              | 
 physical_address_part2           | text                      |           |          |                              | extended |              | 
 physical_address_part3           | text                      |           |          |                              | extended |              | 
 physical_postcode                | text                      |           |          |                              | extended |              | 
 physical_postplace               | text                      |           |          |                              | extended |              | 
 physical_latitude                | text                      |           |          |                              | extended |              | 
 physical_longitude               | text                      |           |          |                              | extended |              | 
 physical_altitude                | text                      |           |          |                              | extended |              | 
 physical_region_code             | text                      |           |          |                              | extended |              | 
 physical_country_iso_2           | text                      |           |          |                              | extended |              | 
 physical_location_id             | integer                   |           |          |                              | plain    |              | 
 physical_region_id               | integer                   |           |          |                              | plain    |              | 
 physical_country_id              | integer                   |           |          |                              | plain    |              | 
 typed_physical_latitude          | numeric(9,6)              |           |          |                              | main     |              | 
 typed_physical_longitude         | numeric(9,6)              |           |          |                              | main     |              | 
 typed_physical_altitude          | numeric(6,1)              |           |          |                              | main     |              | 
 postal_address_part1             | text                      |           |          |                              | extended |              | 
 postal_address_part2             | text                      |           |          |                              | extended |              | 
 postal_address_part3             | text                      |           |          |                              | extended |              | 
 postal_postcode                  | text                      |           |          |                              | extended |              | 
 postal_postplace                 | text                      |           |          |                              | extended |              | 
 postal_region_code               | text                      |           |          |                              | extended |              | 
 postal_country_iso_2             | text                      |           |          |                              | extended |              | 
 postal_latitude                  | text                      |           |          |                              | extended |              | 
 postal_longitude                 | text                      |           |          |                              | extended |              | 
 postal_altitude                  | text                      |           |          |                              | extended |              | 
 postal_location_id               | integer                   |           |          |                              | plain    |              | 
 postal_region_id                 | integer                   |           |          |                              | plain    |              | 
 postal_country_id                | integer                   |           |          |                              | plain    |              | 
 typed_postal_latitude            | numeric(9,6)              |           |          |                              | main     |              | 
 typed_postal_longitude           | numeric(9,6)              |           |          |                              | main     |              | 
 typed_postal_altitude            | numeric(6,1)              |           |          |                              | main     |              | 
 primary_activity_category_code   | text                      |           |          |                              | extended |              | 
 primary_activity_id              | integer                   |           |          |                              | plain    |              | 
 primary_activity_category_id     | integer                   |           |          |                              | plain    |              | 
 secondary_activity_category_code | text                      |           |          |                              | extended |              | 
 secondary_activity_id            | integer                   |           |          |                              | plain    |              | 
 secondary_activity_category_id   | integer                   |           |          |                              | plain    |              | 
 web_address                      | text                      |           |          |                              | extended |              | 
 email_address                    | text                      |           |          |                              | extended |              | 
 phone_number                     | text                      |           |          |                              | extended |              | 
 landline                         | text                      |           |          |                              | extended |              | 
 mobile_number                    | text                      |           |          |                              | extended |              | 
 fax_number                       | text                      |           |          |                              | extended |              | 
 contact_id                       | integer                   |           |          |                              | plain    |              | 
 employees                        | text                      |           |          |                              | extended |              | 
 turnover                         | text                      |           |          |                              | extended |              | 
 men_employees                    | text                      |           |          |                              | extended |              | 
 women_employees                  | text                      |           |          |                              | extended |              | 
 stat_for_unit_employees_id       | integer                   |           |          |                              | plain    |              | 
 stat_for_unit_turnover_id        | integer                   |           |          |                              | plain    |              | 
 stat_for_unit_men_employees_id   | integer                   |           |          |                              | plain    |              | 
 stat_for_unit_women_employees_id | integer                   |           |          |                              | plain    |              | 
 tag_path                         | text                      |           |          |                              | extended |              | 
 tag_path_ltree                   | ltree                     |           |          |                              | extended |              | 
 tag_id                           | integer                   |           |          |                              | plain    |              | 
 tag_for_unit_id                  | integer                   |           |          |                              | plain    |              | 
 edit_by_user_id                  | integer                   |           |          |                              | plain    |              | 
 edit_at                          | timestamp with time zone  |           |          |                              | plain    |              | 
 edit_comment                     | text                      |           |          |                              | extended |              | 
 founding_row_id                  | integer                   |           |          |                              | plain    |              | 
 state                            | import_data_state         |           | not null | 'pending'::import_data_state | plain    |              | 
 last_completed_priority          | integer                   |           | not null | 0                            | plain    |              | 
 error                            | jsonb                     |           |          |                              | extended |              | 
 invalid_codes                    | jsonb                     |           |          |                              | extended |              | 
Indexes:
    "import_71_a1_lu_data_pkey" PRIMARY KEY, btree (row_id)
    "import_71_a1_lu_data_state_last_completed_priority_row_id_idx" btree (state, last_completed_priority, row_id)
Policies:
    POLICY "import_71_a1_lu_data_admin_user_manage"
      TO admin_user
      USING (true)
      WITH CHECK (true)
    POLICY "import_71_a1_lu_data_authenticated_read" FOR SELECT
      TO authenticated
      USING (true)
    POLICY "import_71_a1_lu_data_regular_user_manage"
      TO regular_user
      USING (true)
      WITH CHECK (true)

\echo '------------------------------------------'
------------------------------------------
INSERT INTO public.import_71_a1_lu_upload(
    tax_ident, nin_ident, name, valid_from, valid_to, physical_address_part1, physical_country_iso_2, physical_postcode, physical_region_code,
    primary_activity_category_code, sector_code, legal_form_code, email_address, men_employees, women_employees, tag_path
) VALUES (
    '71A000001', 'NIN71A001', 'LU-71A Period 1', '2023-01-01', '2023-03-31', 'Addr 1 LU-71A', 'NO', '1001', '0301',
    '01.110', 'S1', 'AS', 'lu71a_p1@example.com', '6', '4', 'TestTag.LU'
);
CALL worker.process_tasks(p_queue => 'import');
\echo "Job status for import_71_a1_lu:"
"Job status for import_71_a1_lu:"
SELECT slug, state, total_rows, imported_rows, error IS NOT NULL AS has_error, error as error_details FROM public.import_job WHERE slug = 'import_71_a1_lu';
      slug       |  state   | total_rows | imported_rows | has_error | error_details 
-----------------+----------+------------+---------------+-----------+---------------
 import_71_a1_lu | finished |          1 |             1 | f         | 
(1 row)

\echo "Data table for import_71_a1_lu:"
"Data table for import_71_a1_lu:"
SELECT row_id, state, error, action, operation, tax_ident, nin_ident, name, valid_from, valid_to FROM public.import_71_a1_lu_data ORDER BY row_id;
 row_id |   state   | error | action | operation | tax_ident | nin_ident |      name       | valid_from |  valid_to  
--------+-----------+-------+--------+-----------+-----------+-----------+-----------------+------------+------------
      1 | processed |       | insert | insert    | 71A000001 | NIN71A001 | LU-71A Period 1 | 2023-01-01 | 2023-03-31
(1 row)

\echo "Verification for LU-71A ('71A000001') after Sub-Scenario 71.A.1 (all segments shown):"
"Verification for LU-71A ('71A000001') after Sub-Scenario 71.A.1 (all segments shown):"
\echo "Legal Unit External Idents (tax_ident, nin_ident):"
"Legal Unit External Idents (tax_ident, nin_ident):"
SELECT lu.name, ei.ident as tax_ident, ei_nin.ident as nin_ident, sec.code as sector_code, lf.code as legal_form_code, lu.valid_from, lu.valid_to
FROM public.legal_unit lu
JOIN public.external_ident ei ON lu.id = ei.legal_unit_id AND ei.type_id = (SELECT id FROM external_ident_type WHERE code='tax_ident')
LEFT JOIN public.external_ident ei_nin ON lu.id = ei_nin.legal_unit_id AND ei_nin.type_id = (SELECT id FROM external_ident_type WHERE code='nin_ident')
LEFT JOIN public.sector sec ON lu.sector_id = sec.id
LEFT JOIN public.legal_form lf ON lu.legal_form_id = lf.id
WHERE ei.ident = '71A000001' ORDER BY lu.valid_from, lu.valid_to;
      name       | tax_ident | nin_ident | sector_code | legal_form_code | valid_from |  valid_to  
-----------------+-----------+-----------+-------------+-----------------+------------+------------
 LU-71A Period 1 | 71A000001 | NIN71A001 |             | AS              | 2023-01-01 | 2023-03-31
(1 row)

\echo "Stat (Men/Women Employees):"
"Stat (Men/Women Employees):"
SELECT sd.code as stat_code, sfu.value_int, sfu.valid_from, sfu.valid_to
FROM public.stat_for_unit sfu
JOIN public.stat_definition sd ON sfu.stat_definition_id = sd.id
JOIN public.external_ident ei ON sfu.legal_unit_id = ei.legal_unit_id AND ei.type_id = (SELECT id FROM external_ident_type WHERE code='tax_ident')
WHERE ei.ident = '71A000001' AND sd.code IN ('men_employees', 'women_employees') ORDER BY sfu.valid_from, sfu.valid_to, sd.code;
    stat_code    | value_int | valid_from |  valid_to  
-----------------+-----------+------------+------------
 men_employees   |         6 | 2023-01-01 | 2023-03-31
 women_employees |         4 | 2023-01-01 | 2023-03-31
(2 rows)

-- Sub-Scenario 71.A.2: First Update (Change LU Name, NIN, Men Employees)
\echo "Sub-Scenario 71.A.2: Update LU-71A (Name, NIN, Men Employees)"
"Sub-Scenario 71.A.2: Update LU-71A (Name, NIN, Men Employees)"
DO $$
DECLARE v_definition_id INT;
BEGIN
    SELECT id INTO v_definition_id FROM public.import_definition WHERE slug = 'legal_unit_custom_test71';
    INSERT INTO public.import_job (definition_id, slug, description, edit_comment)
    VALUES (v_definition_id, 'import_71_a2_lu', 'Test 71.A.2: LU-71A Update 1', 'Test 71.A.2');
END $$;
INSERT INTO public.import_71_a2_lu_upload(
    tax_ident, nin_ident, name, valid_from, valid_to, physical_address_part1, physical_country_iso_2, physical_postcode, physical_region_code,
    primary_activity_category_code, sector_code, legal_form_code, email_address, men_employees, women_employees, tag_path
) VALUES (
    '71A000001', 'NIN71A001', 'LU-71A Period 2 Updated Name', '2023-04-01', '2023-06-30', 'Addr 1 LU-71A', 'NO', '1001', '0301',
    '01.110', 'S1', 'AS', 'lu71a_p1@example.com', '7', '4', 'TestTag.LU' -- Women employees, address, etc. unchanged. NIN kept same.
);
--SET client_min_messages TO DEBUG1;
CALL worker.process_tasks(p_queue => 'import');
--SET client_min_messages TO NOTICE;
\echo "Job status for import_71_a2_lu:"
"Job status for import_71_a2_lu:"
SELECT slug, state, total_rows, imported_rows, error IS NOT NULL AS has_error, error as error_details FROM public.import_job WHERE slug = 'import_71_a2_lu';
      slug       |  state   | total_rows | imported_rows | has_error | error_details 
-----------------+----------+------------+---------------+-----------+---------------
 import_71_a2_lu | finished |          1 |             1 | f         | 
(1 row)

\echo "Data table for import_71_a2_lu:"
"Data table for import_71_a2_lu:"
SELECT row_id, state, error, action, operation, tax_ident, nin_ident, name, valid_from, valid_to FROM public.import_71_a2_lu_data ORDER BY row_id;
 row_id |   state   | error | action  | operation | tax_ident | nin_ident |             name             | valid_from |  valid_to  
--------+-----------+-------+---------+-----------+-----------+-----------+------------------------------+------------+------------
      1 | processed |       | replace | replace   | 71A000001 | NIN71A001 | LU-71A Period 2 Updated Name | 2023-04-01 | 2023-06-30
(1 row)

\echo "Verification for LU-71A ('71A000001') after Sub-Scenario 71.A.2 (all segments shown):"
"Verification for LU-71A ('71A000001') after Sub-Scenario 71.A.2 (all segments shown):"
\echo "Legal Unit External Idents (tax_ident, nin_ident - nin updated in latest segment):"
"Legal Unit External Idents (tax_ident, nin_ident - nin updated in latest segment):"
SELECT lu.name, ei.ident as tax_ident, ei_nin.ident as nin_ident, sec.code as sector_code, lf.code as legal_form_code, lu.valid_from, lu.valid_to
FROM public.legal_unit lu
JOIN public.external_ident ei ON lu.id = ei.legal_unit_id AND ei.type_id = (SELECT id FROM external_ident_type WHERE code='tax_ident')
LEFT JOIN public.external_ident ei_nin ON lu.id = ei_nin.legal_unit_id AND ei_nin.type_id = (SELECT id FROM external_ident_type WHERE code='nin_ident')
LEFT JOIN public.sector sec ON lu.sector_id = sec.id
LEFT JOIN public.legal_form lf ON lu.legal_form_id = lf.id
WHERE ei.ident = '71A000001' ORDER BY lu.valid_from, lu.valid_to;
             name             | tax_ident | nin_ident | sector_code | legal_form_code | valid_from |  valid_to  
------------------------------+-----------+-----------+-------------+-----------------+------------+------------
 LU-71A Period 1              | 71A000001 | NIN71A001 |             | AS              | 2023-01-01 | 2023-03-31
 LU-71A Period 2 Updated Name | 71A000001 | NIN71A001 |             | AS              | 2023-04-01 | 2023-06-30
(2 rows)

\echo "Stat (Men/Women Employees - men_employees updated in latest segment):"
"Stat (Men/Women Employees - men_employees updated in latest segment):"
SELECT sd.code as stat_code, sfu.value_int, sfu.valid_from, sfu.valid_to
FROM public.stat_for_unit sfu
JOIN public.stat_definition sd ON sfu.stat_definition_id = sd.id
JOIN public.external_ident ei ON sfu.legal_unit_id = ei.legal_unit_id AND ei.type_id = (SELECT id FROM external_ident_type WHERE code='tax_ident')
WHERE ei.ident = '71A000001' AND sd.code IN ('men_employees', 'women_employees') ORDER BY sfu.valid_from, sfu.valid_to, sd.code;
    stat_code    | value_int | valid_from |  valid_to  
-----------------+-----------+------------+------------
 men_employees   |         6 | 2023-01-01 | 2023-03-31
 women_employees |         4 | 2023-01-01 | 2023-06-30
 men_employees   |         7 | 2023-04-01 | 2023-06-30
(3 rows)

\echo "Consolidated Statistical Unit view for LU-71A (71A000001) across all periods:"
"Consolidated Statistical Unit view for LU-71A (71A000001) across all periods:"
CALL worker.process_tasks(p_queue => 'analytics');
SELECT
    su.name, su.valid_from, su.valid_to,
    su.external_idents->>'tax_ident' as tax_ident, su.external_idents->>'nin_ident' as nin_ident,
    su.stats->>'men_employees' as men_employees, su.stats->>'women_employees' as women_employees, su.tag_paths
FROM public.statistical_unit su
WHERE su.unit_type = 'legal_unit' AND su.external_idents->>'tax_ident' = '71A000001'
ORDER BY su.valid_from, su.valid_to;
             name             | valid_from |  valid_to  | tax_ident | nin_ident | men_employees | women_employees |  tag_paths   
------------------------------+------------+------------+-----------+-----------+---------------+-----------------+--------------
 LU-71A Period 1              | 2023-01-01 | 2023-03-31 | 71A000001 | NIN71A001 | 6             | 4               | {TestTag.LU}
 LU-71A Period 2 Updated Name | 2023-04-01 | 2023-06-30 | 71A000001 | NIN71A001 | 7             | 4               | {TestTag.LU}
(2 rows)

ROLLBACK TO scenario_71_a_lu_lifecycle;
--------------------------------------------------------------------------------
-- Scenario 71.B: Formal Establishment - Custom Stats and NIN
--------------------------------------------------------------------------------
SAVEPOINT scenario_71_b_formal_es_lifecycle;
\echo "Scenario 71.B: Formal Establishment - Custom Stats and NIN (ES-71B)"
"Scenario 71.B: Formal Establishment - Custom Stats and NIN (ES-71B)"
-- First, create a stable Legal Unit for the Formal Establishment to link to.
DO $$
DECLARE v_definition_id INT;
BEGIN
    SELECT id INTO v_definition_id FROM public.import_definition WHERE slug = 'legal_unit_custom_test71';
    INSERT INTO public.import_job (definition_id, slug, description, edit_comment)
    VALUES (v_definition_id, 'import_71_b_lu_for_es', 'Test 71.B: Base LU for Formal ES', 'Test 71.B');
END $$;
INSERT INTO public.import_71_b_lu_for_es_upload(tax_ident, nin_ident, name, valid_from, valid_to, sector_code, legal_form_code, primary_activity_category_code) VALUES
('71B000000', 'NIN_LU_FOR_ES_71B', 'Base LU for ES-71B', '2023-01-01', '2023-12-31', 'S_Base', 'AS', '00.000');
CALL worker.process_tasks(p_queue => 'import');
-- Sub-Scenario 71.B.1: Initial Formal ES Import
\echo "Sub-Scenario 71.B.1: Initial Formal ES Import for ES-71B"
"Sub-Scenario 71.B.1: Initial Formal ES Import for ES-71B"
DO $$
DECLARE v_definition_id INT;
BEGIN
    SELECT id INTO v_definition_id FROM public.import_definition WHERE slug = 'establishment_for_lu_custom_test71';
    INSERT INTO public.import_job (definition_id, slug, description, edit_comment)
    VALUES (v_definition_id, 'import_71_b1_es', 'Test 71.B.1: ES-71B Initial', 'Test 71.B.1');
END $$;
INSERT INTO public.import_71_b1_es_upload(
    tax_ident, nin_ident, legal_unit_tax_ident, name, valid_from, valid_to, physical_address_part1, physical_country_iso_2, physical_postcode, physical_region_code,
    primary_activity_category_code, email_address, men_employees, women_employees, tag_path
) VALUES (
    'E71B00001', 'NIN_ES_71B001', '71B000000', 'ES-71B Period 1', '2023-01-01', '2023-03-31', 'Addr 1 ES-71B', 'NO', '2001', '0301',
    '02.110', 'es71b_p1@example.com', '3', '2', 'TestTag.ES.Formal'
);
--SET client_min_messages TO DEBUG1;
CALL worker.process_tasks(p_queue => 'import');
--SET client_min_messages TO NOTICE;
\echo "Verification for ES-71B ('E71B00001') after Sub-Scenario 71.B.1 (all segments shown):"
"Verification for ES-71B ('E71B00001') after Sub-Scenario 71.B.1 (all segments shown):"
\echo "Establishment External Idents (tax_ident, nin_ident):"
"Establishment External Idents (tax_ident, nin_ident):"
SELECT est.name, ei.ident as tax_ident, ei_nin.ident as nin_ident, lu_ei.ident as legal_unit_tax_ident, est.valid_from, est.valid_to
FROM public.establishment est
JOIN public.external_ident ei ON est.id = ei.establishment_id AND ei.type_id = (SELECT id FROM external_ident_type WHERE code='tax_ident')
LEFT JOIN public.external_ident ei_nin ON est.id = ei_nin.establishment_id AND ei_nin.type_id = (SELECT id FROM external_ident_type WHERE code='nin_ident')
LEFT JOIN public.legal_unit lu ON est.legal_unit_id = lu.id
LEFT JOIN public.external_ident lu_ei ON lu.id = lu_ei.legal_unit_id AND lu_ei.type_id = (SELECT id FROM external_ident_type WHERE code='tax_ident')
WHERE ei.ident = 'E71B00001' ORDER BY est.valid_from, est.valid_to;
      name       | tax_ident |   nin_ident   | legal_unit_tax_ident | valid_from |  valid_to  
-----------------+-----------+---------------+----------------------+------------+------------
 ES-71B Period 1 | E71B00001 | NIN_ES_71B001 | 71B000000            | 2023-01-01 | 2023-03-31
(1 row)

\echo "Stat (Men/Women Employees):"
"Stat (Men/Women Employees):"
SELECT sd.code as stat_code, sfu.value_int, sfu.valid_from, sfu.valid_to
FROM public.stat_for_unit sfu
JOIN public.stat_definition sd ON sfu.stat_definition_id = sd.id
JOIN public.external_ident ei ON sfu.establishment_id = ei.establishment_id AND ei.type_id = (SELECT id FROM external_ident_type WHERE code='tax_ident')
WHERE ei.ident = 'E71B00001' AND sd.code IN ('men_employees', 'women_employees') ORDER BY sfu.valid_from, sfu.valid_to, sd.code;
    stat_code    | value_int | valid_from |  valid_to  
-----------------+-----------+------------+------------
 men_employees   |         3 | 2023-01-01 | 2023-03-31
 women_employees |         2 | 2023-01-01 | 2023-03-31
(2 rows)

\echo "Consolidated Statistical Unit view for ES-71B (E71B00001) across all periods:"
"Consolidated Statistical Unit view for ES-71B (E71B00001) across all periods:"
CALL worker.process_tasks(p_queue => 'analytics');
SELECT
    su.name, su.valid_from, su.valid_to,
    su.external_idents->>'tax_ident' as tax_ident, su.external_idents->>'nin_ident' as nin_ident,
    su.external_idents->>'legal_unit_tax_ident' as legal_unit_tax_ident,
    su.stats->>'men_employees' as men_employees, su.stats->>'women_employees' as women_employees, su.tag_paths
FROM public.statistical_unit su
WHERE su.unit_type = 'establishment' AND su.external_idents->>'tax_ident' = 'E71B00001'
ORDER BY su.valid_from, su.valid_to;
      name       | valid_from |  valid_to  | tax_ident |   nin_ident   | legal_unit_tax_ident | men_employees | women_employees |      tag_paths      
-----------------+------------+------------+-----------+---------------+----------------------+---------------+-----------------+---------------------
 ES-71B Period 1 | 2023-01-01 | 2023-03-31 | E71B00001 | NIN_ES_71B001 |                      | 3             | 2               | {TestTag.ES.Formal}
(1 row)

ROLLBACK TO scenario_71_b_formal_es_lifecycle;
--------------------------------------------------------------------------------
-- Scenario 71.C: Informal Establishment - Custom Stats and NIN
--------------------------------------------------------------------------------
SAVEPOINT scenario_71_c_informal_es_lifecycle;
\echo "Scenario 71.C: Informal Establishment - Custom Stats and NIN (ES-71C)"
"Scenario 71.C: Informal Establishment - Custom Stats and NIN (ES-71C)"
-- Sub-Scenario 71.C.1: Initial Informal ES Import
\echo "Sub-Scenario 71.C.1: Initial Informal ES Import for ES-71C"
"Sub-Scenario 71.C.1: Initial Informal ES Import for ES-71C"
DO $$
DECLARE v_definition_id INT;
BEGIN
    SELECT id INTO v_definition_id FROM public.import_definition WHERE slug = 'establishment_without_lu_custom_test71';
    INSERT INTO public.import_job (definition_id, slug, description, edit_comment)
    VALUES (v_definition_id, 'import_71_c1_es', 'Test 71.C.1: ES-71C Initial', 'Test 71.C.1');
END $$;
INSERT INTO public.import_71_c1_es_upload(
    tax_ident, nin_ident, name, valid_from, valid_to, physical_address_part1, physical_country_iso_2, physical_postcode, physical_region_code,
    primary_activity_category_code, email_address, men_employees, women_employees, tag_path
) VALUES (
    'E71C00001', 'NIN_ES_71C001', 'ES-71C Period 1', '2023-01-01', '2023-03-31', 'Addr 1 ES-71C', 'NO', '3001', '0301',
    '03.110', 'es71c_p1@example.com', '1', '1', 'TestTag.ES.Informal'
);
CALL worker.process_tasks(p_queue => 'import');
\echo "Verification for ES-71C ('E71C00001') after Sub-Scenario 71.C.1 (all segments shown):"
"Verification for ES-71C ('E71C00001') after Sub-Scenario 71.C.1 (all segments shown):"
\echo "Establishment External Idents (tax_ident, nin_ident):"
"Establishment External Idents (tax_ident, nin_ident):"
SELECT est.name, ei.ident as tax_ident, ei_nin.ident as nin_ident, est.valid_from, est.valid_to
FROM public.establishment est
JOIN public.external_ident ei ON est.id = ei.establishment_id AND ei.type_id = (SELECT id FROM external_ident_type WHERE code='tax_ident')
LEFT JOIN public.external_ident ei_nin ON est.id = ei_nin.establishment_id AND ei_nin.type_id = (SELECT id FROM external_ident_type WHERE code='nin_ident')
WHERE ei.ident = 'E71C00001' ORDER BY est.valid_from, est.valid_to;
      name       | tax_ident |   nin_ident   | valid_from |  valid_to  
-----------------+-----------+---------------+------------+------------
 ES-71C Period 1 | E71C00001 | NIN_ES_71C001 | 2023-01-01 | 2023-03-31
(1 row)

\echo "Stat (Men/Women Employees):"
"Stat (Men/Women Employees):"
SELECT sd.code as stat_code, sfu.value_int, sfu.valid_from, sfu.valid_to
FROM public.stat_for_unit sfu
JOIN public.stat_definition sd ON sfu.stat_definition_id = sd.id
JOIN public.external_ident ei ON sfu.establishment_id = ei.establishment_id AND ei.type_id = (SELECT id FROM external_ident_type WHERE code='tax_ident')
WHERE ei.ident = 'E71C00001' AND sd.code IN ('men_employees', 'women_employees') ORDER BY sfu.valid_from, sfu.valid_to, sd.code;
    stat_code    | value_int | valid_from |  valid_to  
-----------------+-----------+------------+------------
 men_employees   |         1 | 2023-01-01 | 2023-03-31
 women_employees |         1 | 2023-01-01 | 2023-03-31
(2 rows)

\echo "Consolidated Statistical Unit view for ES-71C (E71C00001) across all periods:"
"Consolidated Statistical Unit view for ES-71C (E71C00001) across all periods:"
CALL worker.process_tasks(p_queue => 'analytics');
SELECT
    su.name, su.valid_from, su.valid_to,
    su.external_idents->>'tax_ident' as tax_ident, su.external_idents->>'nin_ident' as nin_ident,
    su.stats->>'men_employees' as men_employees, su.stats->>'women_employees' as women_employees, su.tag_paths
FROM public.statistical_unit su
WHERE su.unit_type = 'establishment' AND su.external_idents->>'tax_ident' = 'E71C00001'
ORDER BY su.valid_from, su.valid_to;
      name       | valid_from |  valid_to  | tax_ident |   nin_ident   | men_employees | women_employees |       tag_paths       
-----------------+------------+------------+-----------+---------------+---------------+-----------------+-----------------------
 ES-71C Period 1 | 2023-01-01 | 2023-03-31 | E71C00001 | NIN_ES_71C001 | 1             | 1               | {TestTag.ES.Informal}
(1 row)

ROLLBACK TO scenario_71_c_informal_es_lifecycle;
\echo "Final counts after all test blocks for Test 71 (should be same as initial due to rollbacks)"
"Final counts after all test blocks for Test 71 (should be same as initial due to rollbacks)"
SELECT
    (SELECT COUNT(*) FROM public.legal_unit) AS legal_unit_count,
    (SELECT COUNT(*) FROM public.establishment) AS establishment_count,
    (SELECT COUNT(*) FROM public.enterprise) AS enterprise_count;
 legal_unit_count | establishment_count | enterprise_count 
------------------+---------------------+------------------
                0 |                   0 |                0
(1 row)

ROLLBACK TO main_test_71_start;
\echo "Test 71 completed and rolled back to main start."
"Test 71 completed and rolled back to main start."
ROLLBACK; -- Final rollback for the entire transaction
