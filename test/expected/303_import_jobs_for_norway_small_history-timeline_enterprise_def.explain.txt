                                                                                                                                                                         QUERY PLAN                                                                                                                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Left Join  (cost=29.05..35.39 rows=1 width=7520)
   ->  Nested Loop Left Join  (cost=29.00..31.79 rows=1 width=14984)
         ->  Nested Loop Left Join  (cost=25.99..28.75 rows=1 width=7944)
               ->  Merge Left Join  (cost=17.83..20.55 rows=1 width=836)
                     Merge Cond: ((en.id = en_1.id) AND (t.valid_from = t_1.valid_from) AND (t.valid_until = t_1.valid_until))
                     ->  Sort  (cost=2.02..2.03 rows=1 width=548)
                           Sort Key: t.unit_id, t.valid_from, t.valid_until
                           ->  Nested Loop  (cost=0.00..2.01 rows=1 width=548)
                                 Join Filter: (t.unit_id = en.id)
                                 ->  Seq Scan on timesegments t  (cost=0.00..1.00 rows=1 width=16)
                                       Filter: (unit_type = 'enterprise'::statistical_unit_type)
                                 ->  Seq Scan on enterprise en  (cost=0.00..1.00 rows=1 width=532)
                     ->  GroupAggregate  (cost=15.81..18.49 rows=1 width=300)
                           Group Key: en_1.id, t_1.valid_from, t_1.valid_until
                           ->  Sort  (cost=15.81..15.81 rows=1 width=492)
                                 Sort Key: en_1.id, t_1.valid_from, t_1.valid_until
                                 ->  Nested Loop Left Join  (cost=11.17..15.80 rows=1 width=492)
                                       ->  Nested Loop Left Join  (cost=8.16..11.86 rows=1 width=300)
                                             ->  Nested Loop  (cost=0.00..2.01 rows=1 width=12)
                                                   Join Filter: (t_1.unit_id = en_1.id)
                                                   ->  Seq Scan on timesegments t_1  (cost=0.00..1.00 rows=1 width=12)
                                                         Filter: (unit_type = 'enterprise'::statistical_unit_type)
                                                   ->  Seq Scan on enterprise en_1  (cost=0.00..1.00 rows=1 width=4)
                                             ->  GroupAggregate  (cost=8.16..9.83 rows=1 width=300)
                                                   ->  Sort  (cost=8.16..8.16 rows=1 width=201)
                                                         Sort Key: timeline_legal_unit.legal_unit_id
                                                         ->  Index Scan using idx_timeline_legal_unit_enterprise_id on timeline_legal_unit  (cost=0.12..8.15 rows=1 width=201)
                                                               Index Cond: (enterprise_id = en_1.id)
                                                               Filter: ((t_1.valid_from < valid_until) AND (valid_from < t_1.valid_until))
                                       ->  GroupAggregate  (cost=3.01..3.92 rows=1 width=204)
                                             ->  Sort  (cost=3.01..3.01 rows=1 width=105)
                                                   Sort Key: timeline_establishment.establishment_id
                                                   ->  Seq Scan on timeline_establishment  (cost=0.00..3.00 rows=1 width=105)
                                                         Filter: ((t_1.valid_from < valid_until) AND (valid_from < t_1.valid_until) AND (enterprise_id = en_1.id))
               ->  Limit  (cost=8.16..8.18 rows=1 width=7549)
                     ->  Incremental Sort  (cost=8.16..8.20 rows=2 width=7549)
                           Sort Key: enplu_1.valid_from DESC, enplu_1.legal_unit_id DESC
                           Presorted Key: enplu_1.valid_from
                           ->  Index Scan Backward using idx_timeline_legal_unit_valid_period on timeline_legal_unit enplu_1  (cost=0.12..8.15 rows=1 width=7549)
                                 Index Cond: ((valid_from < t.valid_until) AND (valid_until > t.valid_from))
                                 Filter: (enterprise_id = en.id)
         ->  Limit  (cost=3.01..3.01 rows=1 width=7522)
               ->  Sort  (cost=3.01..3.01 rows=1 width=7522)
                     Sort Key: enpes_1.valid_from DESC, enpes_1.establishment_id DESC
                     ->  Seq Scan on timeline_establishment enpes_1  (cost=0.00..3.00 rows=1 width=7522)
                           Filter: ((t.valid_from < valid_until) AND (valid_from < t.valid_until) AND (enterprise_id = en.id))
   ->  Limit  (cost=0.05..0.06 rows=1 width=528)
         ->  Sort  (cost=0.05..0.06 rows=3 width=528)
               Sort Key: "*VALUES*".column3 DESC
               ->  Values Scan on "*VALUES*"  (cost=0.00..0.04 rows=3 width=528)
                     Filter: (column3 IS NOT NULL)
   SubPlan 2
     ->  Aggregate  (cost=1.66..1.67 rows=1 width=32)
           ->  Unique  (cost=1.31..1.61 rows=20 width=4)
                 ->  Merge Append  (cost=1.31..1.56 rows=20 width=4)
                       Sort Key: (unnest((InitPlan 1).col1))
                       ->  Sort  (cost=1.06..1.09 rows=10 width=4)
                             Sort Key: (unnest((InitPlan 1).col1))
                             InitPlan 1
                               ->  Aggregate  (cost=0.82..0.83 rows=1 width=32)
                                     ->  Unique  (cost=0.67..0.77 rows=20 width=4)
                                           ->  Sort  (cost=0.67..0.72 rows=20 width=4)
                                                 Sort Key: (unnest(enplu_1.data_source_ids))
                                                 ->  Append  (cost=0.00..0.24 rows=20 width=4)
                                                       ->  ProjectSet  (cost=0.00..0.07 rows=10 width=4)
                                                             ->  Result  (cost=0.00..0.01 rows=1 width=0)
                                                       ->  ProjectSet  (cost=0.00..0.07 rows=10 width=4)
                                                             ->  Result  (cost=0.00..0.01 rows=1 width=0)
                             ->  ProjectSet  (cost=0.83..0.90 rows=10 width=4)
                                   ->  Result  (cost=0.00..0.01 rows=1 width=0)
                       ->  Sort  (cost=0.23..0.26 rows=10 width=4)
                             Sort Key: (unnest((array_distinct_concat(COALESCE(array_cat((array_distinct_concat(timeline_legal_unit.data_source_ids)), (array_distinct_concat(timeline_establishment.data_source_ids))), (array_distinct_concat(timeline_legal_unit.data_source_ids)), (array_distinct_concat(timeline_establishment.data_source_ids)))))))
                             ->  ProjectSet  (cost=0.00..0.07 rows=10 width=4)
                                   ->  Result  (cost=0.00..0.01 rows=1 width=0)
   SubPlan 4
     ->  Aggregate  (cost=1.60..1.61 rows=1 width=32)
           ->  Sort  (cost=1.50..1.55 rows=20 width=32)
                 Sort Key: (unnest((InitPlan 3).col1))
                 ->  Append  (cost=0.83..1.06 rows=20 width=32)
                       ->  ProjectSet  (cost=0.83..0.90 rows=10 width=32)
                             InitPlan 3
                               ->  Aggregate  (cost=0.82..0.83 rows=1 width=32)
                                     ->  Unique  (cost=0.67..0.77 rows=20 width=32)
                                           ->  Sort  (cost=0.67..0.72 rows=20 width=32)
                                                 Sort Key: (unnest(enplu_1.data_source_codes))
                                                 ->  Append  (cost=0.00..0.24 rows=20 width=32)
                                                       ->  ProjectSet  (cost=0.00..0.07 rows=10 width=32)
                                                             ->  Result  (cost=0.00..0.01 rows=1 width=0)
                                                       ->  ProjectSet  (cost=0.00..0.07 rows=10 width=32)
                                                             ->  Result  (cost=0.00..0.01 rows=1 width=0)
                             ->  Result  (cost=0.00..0.01 rows=1 width=0)
                       ->  ProjectSet  (cost=0.00..0.07 rows=10 width=32)
                             ->  Result  (cost=0.00..0.01 rows=1 width=0)
(93 rows)

