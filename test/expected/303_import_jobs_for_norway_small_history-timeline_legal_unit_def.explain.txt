                                                                                                                                                                                                QUERY PLAN                                                                                                                                                                                                 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=140.13..140.13 rows=1 width=7435)
   Sort Key: t.unit_type, t.unit_id, t.valid_from
   ->  Nested Loop Left Join  (cost=60.32..140.12 rows=1 width=7435)
         ->  Nested Loop Left Join  (cost=57.31..134.11 rows=1 width=7046)
               ->  Nested Loop Left Join  (cost=57.20..133.99 rows=1 width=9686)
                     ->  Nested Loop Left Join  (cost=18.85..95.62 rows=1 width=9674)
                           ->  Nested Loop Left Join  (cost=17.83..94.58 rows=1 width=9642)
                                 ->  Nested Loop Left Join  (cost=17.68..86.39 rows=1 width=9609)
                                       ->  Nested Loop Left Join  (cost=17.53..78.20 rows=1 width=9577)
                                             ->  Nested Loop Left Join  (cost=16.52..77.17 rows=1 width=7943)
                                                   Join Filter: (pol.region_id = por.id)
                                                   ->  Nested Loop Left Join  (cost=16.27..68.89 rows=1 width=7879)
                                                         ->  Nested Loop Left Join  (cost=15.24..61.39 rows=1 width=5204)
                                                               Join Filter: (phl.region_id = phr.id)
                                                               ->  Nested Loop Left Join  (cost=14.99..53.12 rows=1 width=5140)
                                                                     ->  Nested Loop Left Join  (cost=13.95..45.62 rows=1 width=2465)
                                                                           Join Filter: (lu_1.legal_form_id = lf.id)
                                                                           ->  Nested Loop Left Join  (cost=13.95..39.59 rows=1 width=2401)
                                                                                 ->  Nested Loop Left Join  (cost=13.81..30.99 rows=1 width=2305)
                                                                                       ->  Nested Loop Left Join  (cost=13.53..22.69 rows=1 width=2269)
                                                                                             ->  Nested Loop Left Join  (cost=12.52..21.66 rows=1 width=1733)
                                                                                                   ->  Nested Loop Left Join  (cost=12.24..13.35 rows=1 width=1697)
                                                                                                         ->  Nested Loop Left Join  (cost=11.23..12.32 rows=1 width=1161)
                                                                                                               Join Filter: ((t_1.unit_id = t.unit_id) AND (t_1.valid_from = t.valid_from))
                                                                                                               ->  Nested Loop  (cost=1.01..2.04 rows=1 width=1129)
                                                                                                                     ->  Seq Scan on timesegments t  (cost=0.00..1.00 rows=1 width=16)
                                                                                                                     ->  Limit  (cost=1.01..1.01 rows=1 width=1180)
                                                                                                                           ->  Sort  (cost=1.01..1.01 rows=1 width=1180)
                                                                                                                                 Sort Key: lu_1.valid_from DESC
                                                                                                                                 ->  Seq Scan on legal_unit lu_1  (cost=0.00..1.00 rows=1 width=1180)
                                                                                                                                       Filter: ((t.valid_from < valid_until) AND (valid_from < t.valid_until) AND (id = t.unit_id))
                                                                                                               ->  GroupAggregate  (cost=10.22..10.26 rows=1 width=40)
                                                                                                                     Group Key: t_1.unit_id, t_1.valid_from
                                                                                                                     ->  Sort  (cost=10.22..10.23 rows=1 width=85)
                                                                                                                           Sort Key: t_1.unit_id, t_1.valid_from
                                                                                                                           ->  Nested Loop  (cost=0.15..10.21 rows=1 width=85)
                                                                                                                                 ->  Nested Loop  (cost=0.00..2.02 rows=1 width=57)
                                                                                                                                       Join Filter: ((t_1.valid_from < sfu.valid_until) AND (sfu.valid_from < t_1.valid_until) AND (t_1.unit_id = sfu.legal_unit_id))
                                                                                                                                       ->  Seq Scan on timesegments t_1  (cost=0.00..1.00 rows=1 width=12)
                                                                                                                                             Filter: (unit_type = 'legal_unit'::statistical_unit_type)
                                                                                                                                       ->  Seq Scan on stat_for_unit sfu  (cost=0.00..1.00 rows=1 width=61)
                                                                                                                                 ->  Index Scan using stat_definition_pkey on stat_definition sd  (cost=0.15..8.17 rows=1 width=36)
                                                                                                                                       Index Cond: (id = sfu.stat_definition_id)
                                                                                                         ->  Limit  (cost=1.01..1.01 rows=1 width=564)
                                                                                                               ->  Sort  (cost=1.01..1.01 rows=1 width=564)
                                                                                                                     Sort Key: a.id DESC
                                                                                                                     ->  Seq Scan on activity a  (cost=0.00..1.00 rows=1 width=564)
                                                                                                                           Filter: ((t.valid_from < valid_until) AND (valid_from < t.valid_until) AND (legal_unit_id = lu_1.id) AND (type = 'primary'::activity_type))
                                                                                                   ->  Index Scan using activity_category_pkey on activity_category pac  (cost=0.28..8.29 rows=1 width=40)
                                                                                                         Index Cond: (id = a.category_id)
                                                                                             ->  Limit  (cost=1.01..1.01 rows=1 width=564)
                                                                                                   ->  Sort  (cost=1.01..1.01 rows=1 width=564)
                                                                                                         Sort Key: a_1.id DESC
                                                                                                         ->  Seq Scan on activity a_1  (cost=0.00..1.00 rows=1 width=564)
                                                                                                               Filter: ((t.valid_from < valid_until) AND (valid_from < t.valid_until) AND (legal_unit_id = lu_1.id) AND (type = 'secondary'::activity_type))
                                                                                       ->  Index Scan using activity_category_pkey on activity_category sac  (cost=0.28..8.29 rows=1 width=40)
                                                                                             Index Cond: (id = a_1.category_id)
                                                                                 ->  Index Scan using sector_pkey on sector s  (cost=0.14..8.16 rows=1 width=100)
                                                                                       Index Cond: (id = lu_1.sector_id)
                                                                           ->  Seq Scan on legal_form lf  (cost=0.00..5.46 rows=46 width=68)
                                                                     ->  Hash Right Join  (cost=1.04..7.48 rows=1 width=2675)
                                                                           Hash Cond: (phc.id = phl.country_id)
                                                                           ->  Seq Scan on country phc  (cost=0.00..5.50 rows=250 width=7)
                                                                           ->  Hash  (cost=1.02..1.02 rows=1 width=2672)
                                                                                 ->  Subquery Scan on phl  (cost=1.01..1.02 rows=1 width=2672)
                                                                                       ->  Limit  (cost=1.01..1.01 rows=1 width=2700)
                                                                                             ->  Sort  (cost=1.01..1.01 rows=1 width=2700)
                                                                                                   Sort Key: l.id DESC
                                                                                                   ->  Seq Scan on location l  (cost=0.00..1.00 rows=1 width=2700)
                                                                                                         Filter: ((t.valid_from < valid_until) AND (valid_from < t.valid_until) AND (legal_unit_id = lu_1.id) AND (type = 'physical'::location_type))
                                                               ->  Index Scan using region_pkey on region phr  (cost=0.25..8.26 rows=1 width=68)
                                                         ->  Hash Right Join  (cost=1.04..7.48 rows=1 width=2675)
                                                               Hash Cond: (poc.id = pol.country_id)
                                                               ->  Seq Scan on country poc  (cost=0.00..5.50 rows=250 width=7)
                                                               ->  Hash  (cost=1.02..1.02 rows=1 width=2672)
                                                                     ->  Subquery Scan on pol  (cost=1.01..1.02 rows=1 width=2672)
                                                                           ->  Limit  (cost=1.01..1.01 rows=1 width=2700)
                                                                                 ->  Sort  (cost=1.01..1.01 rows=1 width=2700)
                                                                                       Sort Key: l_1.id DESC
                                                                                       ->  Seq Scan on location l_1  (cost=0.00..1.00 rows=1 width=2700)
                                                                                             Filter: ((t.valid_from < valid_until) AND (valid_from < t.valid_until) AND (legal_unit_id = lu_1.id) AND (type = 'postal'::location_type))
                                                   ->  Index Scan using region_pkey on region por  (cost=0.25..8.26 rows=1 width=68)
                                             ->  Limit  (cost=1.01..1.01 rows=1 width=1662)
                                                   ->  Sort  (cost=1.01..1.01 rows=1 width=1662)
                                                         Sort Key: c_1.id DESC
                                                         ->  Seq Scan on contact c_1  (cost=0.00..1.00 rows=1 width=1662)
                                                               Filter: ((t.valid_from < valid_until) AND (valid_from < t.valid_until) AND (legal_unit_id = lu_1.id))
                                       ->  Index Scan using unit_size_pkey on unit_size us  (cost=0.15..8.17 rows=1 width=36)
                                             Index Cond: (id = lu_1.unit_size_id)
                                 ->  Index Scan using status_pkey on status st  (cost=0.15..8.17 rows=1 width=37)
                                       Index Cond: (id = lu_1.status_id)
                           ->  Aggregate  (cost=1.02..1.03 rows=1 width=32)
                                 ->  Sort  (cost=1.01..1.01 rows=1 width=4)
                                       Sort Key: sfu_1.data_source_id
                                       ->  Seq Scan on stat_for_unit sfu_1  (cost=0.00..1.00 rows=1 width=4)
                                             Filter: ((t.valid_from < valid_until) AND (valid_from < t.valid_until) AND (legal_unit_id = lu_1.id))
                     ->  Aggregate  (cost=38.35..38.36 rows=1 width=64)
                           ->  Seq Scan on data_source ds  (cost=0.00..34.85 rows=699 width=36)
                                 Filter: (COALESCE((id = lu_1.data_source_id), false) OR COALESCE((id = a.data_source_id), false) OR COALESCE((id = a_1.data_source_id), false) OR COALESCE((id = phl.data_source_id), false) OR COALESCE((id = pol.data_source_id), false) OR COALESCE((id = ANY ((array_agg(DISTINCT sfu_1.data_source_id) FILTER (WHERE (sfu_1.data_source_id IS NOT NULL))))), false))
               ->  Limit  (cost=0.11..0.11 rows=1 width=528)
                     ->  Sort  (cost=0.11..0.12 rows=6 width=528)
                           Sort Key: "*VALUES*".column3 DESC
                           ->  Values Scan on "*VALUES*"  (cost=0.00..0.08 rows=6 width=528)
                                 Filter: (column3 IS NOT NULL)
         ->  GroupAggregate  (cost=3.01..3.92 rows=1 width=196)
               ->  Sort  (cost=3.01..3.01 rows=1 width=105)
                     Sort Key: tes.establishment_id
                     ->  Seq Scan on timeline_establishment tes  (cost=0.00..3.00 rows=1 width=105)
                           Filter: ((t.valid_from < valid_until) AND (valid_from < t.valid_until) AND (legal_unit_id = lu_1.id))
         SubPlan 1
           ->  Aggregate  (cost=0.77..0.78 rows=1 width=32)
                 ->  Sort  (cost=0.67..0.72 rows=20 width=4)
                       Sort Key: (unnest(COALESCE((array_agg(ds.id)), '{}'::integer[])))
                       ->  Append  (cost=0.00..0.24 rows=20 width=4)
                             ->  ProjectSet  (cost=0.00..0.07 rows=10 width=4)
                                   ->  Result  (cost=0.00..0.01 rows=1 width=0)
                             ->  ProjectSet  (cost=0.00..0.07 rows=10 width=4)
                                   ->  Result  (cost=0.00..0.01 rows=1 width=0)
         SubPlan 2
           ->  Aggregate  (cost=0.77..0.78 rows=1 width=32)
                 ->  Sort  (cost=0.67..0.72 rows=20 width=32)
                       Sort Key: (unnest(COALESCE((array_agg(ds.code)), '{}'::text[])))
                       ->  Append  (cost=0.00..0.24 rows=20 width=32)
                             ->  ProjectSet  (cost=0.00..0.07 rows=10 width=32)
                                   ->  Result  (cost=0.00..0.01 rows=1 width=0)
                             ->  ProjectSet  (cost=0.00..0.07 rows=10 width=32)
                                   ->  Result  (cost=0.00..0.01 rows=1 width=0)
(127 rows)

