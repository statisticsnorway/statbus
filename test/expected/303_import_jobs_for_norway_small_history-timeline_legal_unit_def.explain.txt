                                                                                                                                                                                                  QUERY PLAN                                                                                                                                                                                                   
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=452.07..452.19 rows=49 width=4494)
   Sort Key: t.unit_type, t.unit_id, t.valid_from
   ->  Nested Loop Left Join  (cost=111.44..450.69 rows=49 width=4494)
         ->  Nested Loop Left Join  (cost=105.16..305.65 rows=49 width=4105)
               ->  Nested Loop Left Join  (cost=105.04..304.22 rows=49 width=4305)
                     ->  Nested Loop Left Join  (cost=66.68..227.06 rows=49 width=4293)
                           ->  Nested Loop Left Join  (cost=65.50..218.84 rows=49 width=4261)
                                 ->  Nested Loop Left Join  (cost=65.34..201.45 rows=49 width=4228)
                                       ->  Nested Loop Left Join  (cost=65.18..184.06 rows=49 width=4196)
                                             ->  Hash Left Join  (cost=64.16..176.80 rows=49 width=2562)
                                                   Hash Cond: (pol.country_id = poc.id)
                                                   ->  Hash Left Join  (cost=55.53..168.04 rows=49 width=2559)
                                                         Hash Cond: (pol.region_id = por.id)
                                                         ->  Nested Loop Left Join  (cost=46.26..158.64 rows=49 width=2495)
                                                               ->  Hash Left Join  (cost=42.80..136.98 rows=49 width=1535)
                                                                     Hash Cond: (phl.country_id = phc.id)
                                                                     ->  Hash Left Join  (cost=34.17..128.23 rows=49 width=1532)
                                                                           Hash Cond: (phl.region_id = phr.id)
                                                                           ->  Nested Loop Left Join  (cost=24.90..118.83 rows=49 width=1468)
                                                                                 ->  Hash Left Join  (cost=21.44..97.17 rows=49 width=508)
                                                                                       Hash Cond: (lu.legal_form_id = lf.id)
                                                                                       ->  Hash Left Join  (cost=17.37..92.96 rows=49 width=444)
                                                                                             Hash Cond: (lu.sector_id = s.id)
                                                                                             ->  Nested Loop Left Join  (cost=11.94..87.40 rows=49 width=348)
                                                                                                   ->  Nested Loop Left Join  (cost=11.64..69.75 rows=49 width=312)
                                                                                                         ->  Nested Loop Left Join  (cost=10.20..60.01 rows=49 width=264)
                                                                                                               ->  Nested Loop Left Join  (cost=9.91..42.36 rows=49 width=228)
                                                                                                                     ->  Hash Left Join  (cost=8.47..32.61 rows=49 width=180)
                                                                                                                           Hash Cond: ((t.unit_id = lu_stats.unit_id) AND (t.valid_from = lu_stats.valid_from))
                                                                                                                           ->  Nested Loop  (cost=1.20..25.07 rows=49 width=148)
                                                                                                                                 ->  Seq Scan on timesegments t  (cost=0.00..1.49 rows=49 width=16)
                                                                                                                                 ->  Memoize  (cost=1.20..1.21 rows=1 width=132)
                                                                                                                                       Cache Key: t.unit_id, t.valid_from, t.valid_until
                                                                                                                                       Cache Mode: binary
                                                                                                                                       ->  Subquery Scan on lu  (cost=1.19..1.20 rows=1 width=132)
                                                                                                                                             ->  Limit  (cost=1.19..1.19 rows=1 width=199)
                                                                                                                                                   ->  Sort  (cost=1.19..1.19 rows=1 width=199)
                                                                                                                                                         Sort Key: lu_1.valid_from DESC
                                                                                                                                                         ->  Seq Scan on legal_unit lu_1  (cost=0.00..1.18 rows=1 width=199)
                                                                                                                                                               Filter: ((t.valid_from < valid_until) AND (valid_from < t.valid_until) AND (id = t.unit_id))
                                                                                                                           ->  Hash  (cost=7.26..7.26 rows=1 width=40)
                                                                                                                                 ->  Subquery Scan on lu_stats  (cost=7.22..7.26 rows=1 width=40)
                                                                                                                                       ->  GroupAggregate  (cost=7.22..7.25 rows=1 width=40)
                                                                                                                                             Group Key: t_1.unit_id, t_1.valid_from
                                                                                                                                             ->  Sort  (cost=7.22..7.22 rows=1 width=85)
                                                                                                                                                   Sort Key: t_1.unit_id, t_1.valid_from
                                                                                                                                                   ->  Nested Loop  (cost=1.35..7.21 rows=1 width=85)
                                                                                                                                                         ->  Hash Join  (cost=1.20..3.02 rows=1 width=57)
                                                                                                                                                               Hash Cond: (t_1.unit_id = sfu.legal_unit_id)
                                                                                                                                                               Join Filter: ((t_1.valid_from < sfu.valid_until) AND (sfu.valid_from < t_1.valid_until))
                                                                                                                                                               ->  Seq Scan on timesegments t_1  (cost=0.00..1.61 rows=17 width=12)
                                                                                                                                                                     Filter: (unit_type = 'legal_unit'::statistical_unit_type)
                                                                                                                                                               ->  Hash  (cost=1.09..1.09 rows=9 width=61)
                                                                                                                                                                     ->  Seq Scan on stat_for_unit sfu  (cost=0.00..1.09 rows=9 width=61)
                                                                                                                                                         ->  Index Scan using stat_definition_pkey on stat_definition sd  (cost=0.15..4.17 rows=1 width=36)
                                                                                                                                                               Index Cond: (id = sfu.stat_definition_id)
                                                                                                                     ->  Memoize  (cost=1.44..1.45 rows=1 width=48)
                                                                                                                           Cache Key: lu.id, t.valid_from, t.valid_until
                                                                                                                           Cache Mode: binary
                                                                                                                           ->  Subquery Scan on pa  (cost=1.43..1.44 rows=1 width=48)
                                                                                                                                 ->  Limit  (cost=1.43..1.43 rows=1 width=76)
                                                                                                                                       ->  Sort  (cost=1.43..1.43 rows=1 width=76)
                                                                                                                                             Sort Key: a.id DESC
                                                                                                                                             ->  Seq Scan on activity a  (cost=0.00..1.42 rows=1 width=76)
                                                                                                                                                   Filter: ((t.valid_from < valid_until) AND (valid_from < t.valid_until) AND (legal_unit_id = lu.id) AND (type = 'primary'::activity_type))
                                                                                                               ->  Memoize  (cost=0.29..8.31 rows=1 width=40)
                                                                                                                     Cache Key: pa.category_id
                                                                                                                     Cache Mode: logical
                                                                                                                     ->  Index Scan using activity_category_pkey on activity_category pac  (cost=0.28..8.30 rows=1 width=40)
                                                                                                                           Index Cond: (id = pa.category_id)
                                                                                                         ->  Memoize  (cost=1.44..1.45 rows=1 width=48)
                                                                                                               Cache Key: lu.id, t.valid_from, t.valid_until
                                                                                                               Cache Mode: binary
                                                                                                               ->  Subquery Scan on sa  (cost=1.43..1.44 rows=1 width=48)
                                                                                                                     ->  Limit  (cost=1.43..1.43 rows=1 width=76)
                                                                                                                           ->  Sort  (cost=1.43..1.43 rows=1 width=76)
                                                                                                                                 Sort Key: a_1.id DESC
                                                                                                                                 ->  Seq Scan on activity a_1  (cost=0.00..1.42 rows=1 width=76)
                                                                                                                                       Filter: ((t.valid_from < valid_until) AND (valid_from < t.valid_until) AND (legal_unit_id = lu.id) AND (type = 'secondary'::activity_type))
                                                                                                   ->  Memoize  (cost=0.29..8.31 rows=1 width=40)
                                                                                                         Cache Key: sa.category_id
                                                                                                         Cache Mode: logical
                                                                                                         ->  Index Scan using activity_category_pkey on activity_category sac  (cost=0.28..8.30 rows=1 width=40)
                                                                                                               Index Cond: (id = sa.category_id)
                                                                                             ->  Hash  (cost=4.08..4.08 rows=108 width=100)
                                                                                                   ->  Seq Scan on sector s  (cost=0.00..4.08 rows=108 width=100)
                                                                                       ->  Hash  (cost=2.92..2.92 rows=92 width=68)
                                                                                             ->  Seq Scan on legal_form lf  (cost=0.00..2.92 rows=92 width=68)
                                                                                 ->  Memoize  (cost=3.46..3.47 rows=1 width=960)
                                                                                       Cache Key: lu.id, t.valid_from, t.valid_until
                                                                                       Cache Mode: binary
                                                                                       ->  Subquery Scan on phl  (cost=3.45..3.46 rows=1 width=960)
                                                                                             ->  Limit  (cost=3.45..3.45 rows=1 width=988)
                                                                                                   ->  Sort  (cost=3.45..3.45 rows=1 width=988)
                                                                                                         Sort Key: l.id DESC
                                                                                                         ->  Seq Scan on location l  (cost=0.00..3.44 rows=1 width=988)
                                                                                                               Filter: ((t.valid_from < valid_until) AND (valid_from < t.valid_until) AND (legal_unit_id = lu.id) AND (type = 'physical'::location_type))
                                                                           ->  Hash  (cost=6.90..6.90 rows=190 width=68)
                                                                                 ->  Seq Scan on region phr  (cost=0.00..6.90 rows=190 width=68)
                                                                     ->  Hash  (cost=5.50..5.50 rows=250 width=7)
                                                                           ->  Seq Scan on country phc  (cost=0.00..5.50 rows=250 width=7)
                                                               ->  Memoize  (cost=3.46..3.47 rows=1 width=960)
                                                                     Cache Key: lu.id, t.valid_from, t.valid_until
                                                                     Cache Mode: binary
                                                                     ->  Subquery Scan on pol  (cost=3.45..3.46 rows=1 width=960)
                                                                           ->  Limit  (cost=3.45..3.45 rows=1 width=988)
                                                                                 ->  Sort  (cost=3.45..3.45 rows=1 width=988)
                                                                                       Sort Key: l_1.id DESC
                                                                                       ->  Seq Scan on location l_1  (cost=0.00..3.44 rows=1 width=988)
                                                                                             Filter: ((t.valid_from < valid_until) AND (valid_from < t.valid_until) AND (legal_unit_id = lu.id) AND (type = 'postal'::location_type))
                                                         ->  Hash  (cost=6.90..6.90 rows=190 width=68)
                                                               ->  Seq Scan on region por  (cost=0.00..6.90 rows=190 width=68)
                                                   ->  Hash  (cost=5.50..5.50 rows=250 width=7)
                                                         ->  Seq Scan on country poc  (cost=0.00..5.50 rows=250 width=7)
                                             ->  Memoize  (cost=1.02..1.03 rows=1 width=1634)
                                                   Cache Key: lu.id, t.valid_from, t.valid_until
                                                   Cache Mode: binary
                                                   ->  Subquery Scan on c  (cost=1.01..1.02 rows=1 width=1634)
                                                         ->  Limit  (cost=1.01..1.01 rows=1 width=1662)
                                                               ->  Sort  (cost=1.01..1.01 rows=1 width=1662)
                                                                     Sort Key: c_1.id DESC
                                                                     ->  Seq Scan on contact c_1  (cost=0.00..1.00 rows=1 width=1662)
                                                                           Filter: ((t.valid_from < valid_until) AND (valid_from < t.valid_until) AND (legal_unit_id = lu.id))
                                       ->  Memoize  (cost=0.16..8.18 rows=1 width=36)
                                             Cache Key: lu.unit_size_id
                                             Cache Mode: logical
                                             ->  Index Scan using unit_size_pkey on unit_size us  (cost=0.15..8.17 rows=1 width=36)
                                                   Index Cond: (id = lu.unit_size_id)
                                 ->  Memoize  (cost=0.16..8.18 rows=1 width=37)
                                       Cache Key: lu.status_id
                                       Cache Mode: logical
                                       ->  Index Scan using status_pkey on status st  (cost=0.15..8.17 rows=1 width=37)
                                             Index Cond: (id = lu.status_id)
                           ->  Memoize  (cost=1.19..1.20 rows=1 width=32)
                                 Cache Key: lu.id, t.valid_from, t.valid_until
                                 Cache Mode: binary
                                 ->  Aggregate  (cost=1.18..1.19 rows=1 width=32)
                                       ->  Sort  (cost=1.17..1.17 rows=1 width=4)
                                             Sort Key: sfu_1.data_source_id
                                             ->  Seq Scan on stat_for_unit sfu_1  (cost=0.00..1.16 rows=1 width=4)
                                                   Filter: ((t.valid_from < valid_until) AND (valid_from < t.valid_until) AND (legal_unit_id = lu.id))
                     ->  Memoize  (cost=38.36..38.37 rows=1 width=64)
                           Cache Key: lu.data_source_id, pa.data_source_id, sa.data_source_id, phl.data_source_id, pol.data_source_id, (array_agg(DISTINCT sfu_1.data_source_id) FILTER (WHERE (sfu_1.data_source_id IS NOT NULL)))
                           Cache Mode: binary
                           ->  Aggregate  (cost=38.35..38.36 rows=1 width=64)
                                 ->  Seq Scan on data_source ds  (cost=0.00..34.85 rows=699 width=36)
                                       Filter: (COALESCE((id = lu.data_source_id), false) OR COALESCE((id = pa.data_source_id), false) OR COALESCE((id = sa.data_source_id), false) OR COALESCE((id = phl.data_source_id), false) OR COALESCE((id = pol.data_source_id), false) OR COALESCE((id = ANY ((array_agg(DISTINCT sfu_1.data_source_id) FILTER (WHERE (sfu_1.data_source_id IS NOT NULL))))), false))
               ->  Memoize  (cost=0.12..0.12 rows=1 width=528)
                     Cache Key: lu.edit_comment, lu.edit_by_user_id, lu.edit_at, pa.edit_comment, pa.edit_by_user_id, pa.edit_at, sa.edit_comment, sa.edit_by_user_id, sa.edit_at, phl.edit_comment, phl.edit_by_user_id, phl.edit_at, pol.edit_comment, pol.edit_by_user_id, pol.edit_at, c.edit_comment, c.edit_by_user_id, c.edit_at
                     Cache Mode: binary
                     ->  Limit  (cost=0.11..0.11 rows=1 width=528)
                           ->  Sort  (cost=0.11..0.12 rows=6 width=528)
                                 Sort Key: "*VALUES*".column3 DESC
                                 ->  Values Scan on "*VALUES*"  (cost=0.00..0.08 rows=6 width=528)
                                       Filter: (column3 IS NOT NULL)
         ->  Memoize  (cost=6.28..7.20 rows=1 width=192)
               Cache Key: lu.id, t.valid_from, t.valid_until
               Cache Mode: binary
               ->  Subquery Scan on esa  (cost=6.27..7.19 rows=1 width=192)
                     ->  GroupAggregate  (cost=6.27..7.18 rows=1 width=196)
                           ->  Sort  (cost=6.27..6.28 rows=1 width=53)
                                 Sort Key: tes.establishment_id
                                 ->  Seq Scan on timeline_establishment tes  (cost=0.00..6.26 rows=1 width=53)
                                       Filter: ((t.valid_from < valid_until) AND (valid_from < t.valid_until) AND (legal_unit_id = lu.id))
         SubPlan 1
           ->  Aggregate  (cost=0.77..0.78 rows=1 width=32)
                 ->  Sort  (cost=0.67..0.72 rows=20 width=4)
                       Sort Key: (unnest(COALESCE((array_agg(ds.id)), '{}'::integer[])))
                       ->  Append  (cost=0.00..0.24 rows=20 width=4)
                             ->  ProjectSet  (cost=0.00..0.07 rows=10 width=4)
                                   ->  Result  (cost=0.00..0.01 rows=1 width=0)
                             ->  ProjectSet  (cost=0.00..0.07 rows=10 width=4)
                                   ->  Result  (cost=0.00..0.01 rows=1 width=0)
         SubPlan 2
           ->  Aggregate  (cost=0.77..0.78 rows=1 width=32)
                 ->  Sort  (cost=0.67..0.72 rows=20 width=32)
                       Sort Key: (unnest(COALESCE((array_agg(ds.code)), '{}'::text[])))
                       ->  Append  (cost=0.00..0.24 rows=20 width=32)
                             ->  ProjectSet  (cost=0.00..0.07 rows=10 width=32)
                                   ->  Result  (cost=0.00..0.01 rows=1 width=0)
                             ->  ProjectSet  (cost=0.00..0.07 rows=10 width=32)
                                   ->  Result  (cost=0.00..0.01 rows=1 width=0)
(182 rows)

