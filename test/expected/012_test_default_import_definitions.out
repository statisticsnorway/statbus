BEGIN;
\i test/setup.sql
-- While the datestyle is set for the database, the pg_regress tool sets the MDY format
-- to ensure consistent date formatting, so we must manually override this
SET datestyle TO 'ISO, DMY';
\if :{?DEBUG}
SET client_min_messages TO debug1;
\else
SET client_min_messages TO NOTICE;
\endif
-- Create temporary function to execute queries as system user
CREATE OR REPLACE FUNCTION test.sudo_exec(
    sql text,
    OUT results jsonb
) RETURNS jsonb
SECURITY DEFINER LANGUAGE plpgsql AS $sudo_exec$
DECLARE
    result_rows jsonb;
BEGIN
    -- Check if the SQL starts with common DDL keywords
    IF sql ~* '^\s*(CREATE|DROP|ALTER|TRUNCATE|GRANT|REVOKE|ANALYZE)' THEN
        -- For DDL statements, execute directly
        EXECUTE sql;
        results := '[]'::jsonb;
    ELSE
        -- For DML/queries, wrap in a SELECT to capture results
        EXECUTE format('
            SELECT COALESCE(
                jsonb_agg(row_to_json(t)),
                ''[]''::jsonb
            )
            FROM (%s) t',
            sql
        ) INTO result_rows;
        results := result_rows;
    END IF;
END;
$sudo_exec$;
-- Grant execute to public since this is for testing
GRANT EXECUTE ON FUNCTION test.sudo_exec(text) TO PUBLIC;
\echo Add users for testing purposes
Add users for testing purposes
SELECT * FROM public.user_create(p_display_name => 'Test Admin', p_email => 'test.admin@statbus.org', p_statbus_role => 'admin_user'::statbus_role, p_password => 'Admin#123!');
         email          |  password  
------------------------+------------
 test.admin@statbus.org | Admin#123!
(1 row)

SELECT * FROM public.user_create(p_display_name => 'Test Regular', p_email => 'test.regular@statbus.org', p_statbus_role => 'regular_user'::statbus_role, p_password => 'Regular#123!');
          email           |   password   
--------------------------+--------------
 test.regular@statbus.org | Regular#123!
(1 row)

SELECT * FROM public.user_create(p_display_name => 'Test Restricted', p_email => 'test.restricted@statbus.org', p_statbus_role => 'restricted_user'::statbus_role, p_password => 'Restricted#123!');
            email            |    password     
-----------------------------+-----------------
 test.restricted@statbus.org | Restricted#123!
(1 row)

-- No specific user context is strictly needed for querying definition tables,
-- but setting it to admin for consistency with other tests.
CALL test.set_user_from_email('test.admin@statbus.org');
\echo "Test: Verify mappings of key identifier source columns in default import definitions"
"Test: Verify mappings of key identifier source columns in default import definitions"
\echo "------------------------------------------------------------------------------------"
"------------------------------------------------------------------------------------"
\echo "These tests check if source columns (like 'tax_ident' from a CSV) are correctly mapped"
"These tests check if source columns (like 'tax_ident' from a CSV) are correctly mapped"
\echo "to the appropriate data columns within the import steps of default definitions."
"to the appropriate data columns within the import steps of default definitions."
\echo "A common issue is 'tax_ident' not being mapped to the 'external_ident_value' data column"
"A common issue is 'tax_ident' not being mapped to the 'external_ident_value' data column"
\echo "in the 'external_idents' step, which is necessary for identifying units."
"in the 'external_idents' step, which is necessary for identifying units."
\echo ""
""
\echo "1. Definition: legal_unit_time_context, Source Column: tax_ident"
"1. Definition: legal_unit_time_context, Source Column: tax_ident"
\echo "   ----------------------------------------------------------------"
"   ----------------------------------------------------------------"
\echo "   Expected: The 'tax_ident' source column should be mapped to the 'external_ident_value' data column"
"   Expected: The 'tax_ident' source column should be mapped to the 'external_ident_value' data column"
\echo "             (purpose: 'external_ident_value') within the 'external_idents' import step."
"             (purpose: 'external_ident_value') within the 'external_idents' import step."
\echo "             The 'external_ident_type_code' data column (purpose: 'external_ident_type_code')"
"             The 'external_ident_type_code' data column (purpose: 'external_ident_type_code')"
\echo "             within the same step should effectively be 'tax_ident' for this mapping."
"             within the same step should effectively be 'tax_ident' for this mapping."
SELECT
    id.slug AS definition_slug,
    isc.column_name AS source_column_name,
    isc.priority AS source_column_priority,
    im.id IS NOT NULL AS is_mapped,
    COALESCE(target_dc.column_name, 'N/A') AS target_data_column_name,
    COALESCE(target_dc.purpose::text, 'N/A') AS target_data_column_purpose,
    COALESCE(target_step.code, 'N/A') AS target_step_code
FROM public.import_definition id
JOIN public.import_source_column isc ON isc.definition_id = id.id
LEFT JOIN public.import_mapping im ON im.source_column_id = isc.id AND im.definition_id = id.id
LEFT JOIN public.import_data_column target_dc ON im.target_data_column_id = target_dc.id
LEFT JOIN public.import_step target_step ON target_dc.step_id = target_step.id
WHERE id.slug = 'legal_unit_job_provided'
  AND isc.column_name = 'tax_ident';
     definition_slug     | source_column_name | source_column_priority | is_mapped | target_data_column_name | target_data_column_purpose | target_step_code 
-------------------------+--------------------+------------------------+-----------+-------------------------+----------------------------+------------------
 legal_unit_job_provided | tax_ident          |                     35 | t         | tax_ident_raw           | source_input               | external_idents
(1 row)

\echo ""
""
\echo "2. Definition: establishment_for_lu_time_context, Source Column: tax_ident (for the establishment itself)"
"2. Definition: establishment_for_lu_time_context, Source Column: tax_ident (for the establishment itself)"
\echo "   -------------------------------------------------------------------------------------------------------"
"   -------------------------------------------------------------------------------------------------------"
\echo "   Expected: Similar to legal units, the 'tax_ident' source column for an establishment should be mapped"
"   Expected: Similar to legal units, the 'tax_ident' source column for an establishment should be mapped"
\echo "             to 'external_ident_value' (purpose: 'external_ident_value') in the 'external_idents' step."
"             to 'external_ident_value' (purpose: 'external_ident_value') in the 'external_idents' step."
SELECT
    id.slug AS definition_slug,
    isc.column_name AS source_column_name,
    isc.priority AS source_column_priority,
    im.id IS NOT NULL AS is_mapped,
    COALESCE(target_dc.column_name, 'N/A') AS target_data_column_name,
    COALESCE(target_dc.purpose::text, 'N/A') AS target_data_column_purpose,
    COALESCE(target_step.code, 'N/A') AS target_step_code
FROM public.import_definition id
JOIN public.import_source_column isc ON isc.definition_id = id.id
LEFT JOIN public.import_mapping im ON im.source_column_id = isc.id AND im.definition_id = id.id
LEFT JOIN public.import_data_column target_dc ON im.target_data_column_id = target_dc.id
LEFT JOIN public.import_step target_step ON target_dc.step_id = target_step.id
WHERE id.slug = 'establishment_for_lu_job_provided'
  AND isc.column_name = 'tax_ident';
          definition_slug          | source_column_name | source_column_priority | is_mapped | target_data_column_name | target_data_column_purpose | target_step_code 
-----------------------------------+--------------------+------------------------+-----------+-------------------------+----------------------------+------------------
 establishment_for_lu_job_provided | tax_ident          |                     36 | t         | tax_ident_raw           | source_input               | external_idents
(1 row)

\echo ""
""
\echo "3. Definition: establishment_for_lu_time_context, Source Column: legal_unit_tax_ident (for linking)"
"3. Definition: establishment_for_lu_time_context, Source Column: legal_unit_tax_ident (for linking)"
\echo "   ---------------------------------------------------------------------------------------------------"
"   ---------------------------------------------------------------------------------------------------"
\echo "   Expected: This 'legal_unit_tax_ident' source column (used to link an establishment to its legal unit)"
"   Expected: This 'legal_unit_tax_ident' source column (used to link an establishment to its legal unit)"
\echo "             should be mapped to the 'legal_unit_tax_ident' data column (purpose: 'source_input')"
"             should be mapped to the 'legal_unit_tax_ident' data column (purpose: 'source_input')"
\echo "             within the 'link_establishment_to_legal_unit' import step."
"             within the 'link_establishment_to_legal_unit' import step."
SELECT
    id.slug AS definition_slug,
    isc.column_name AS source_column_name,
    isc.priority AS source_column_priority,
    im.id IS NOT NULL AS is_mapped,
    COALESCE(target_dc.column_name, 'N/A') AS target_data_column_name,
    COALESCE(target_dc.purpose::text, 'N/A') AS target_data_column_purpose,
    COALESCE(target_step.code, 'N/A') AS target_step_code
FROM public.import_definition id
JOIN public.import_source_column isc ON isc.definition_id = id.id
LEFT JOIN public.import_mapping im ON im.source_column_id = isc.id AND im.definition_id = id.id
LEFT JOIN public.import_data_column target_dc ON im.target_data_column_id = target_dc.id
LEFT JOIN public.import_step target_step ON target_dc.step_id = target_step.id
WHERE id.slug = 'establishment_for_lu_job_provided'
  AND isc.column_name = 'legal_unit_tax_ident';
          definition_slug          |  source_column_name  | source_column_priority | is_mapped | target_data_column_name  | target_data_column_purpose |         target_step_code         
-----------------------------------+----------------------+------------------------+-----------+--------------------------+----------------------------+----------------------------------
 establishment_for_lu_job_provided | legal_unit_tax_ident |                     34 | t         | legal_unit_tax_ident_raw | source_input               | link_establishment_to_legal_unit
(1 row)

\echo ""
""
\echo "4. Test dynamic updates to 'external_idents' step data columns via external_ident_type changes"
"4. Test dynamic updates to 'external_idents' step data columns via external_ident_type changes"
\echo "   ------------------------------------------------------------------------------------------"
"   ------------------------------------------------------------------------------------------"
\echo ""
""
\echo "   4a. Archive 'tax_ident' and insert 'vat_ident' as a new active external_ident_type"
"   4a. Archive 'tax_ident' and insert 'vat_ident' as a new active external_ident_type"
-- Ensure user context allows modification if RLS/permissions are very strict, though admin should be fine.
-- CALL test.set_user_from_email('test.admin@statbus.org'); -- Already set at the beginning
-- Archive tax_ident
UPDATE public.external_ident_type SET archived = true WHERE code = 'tax_ident';
NOTICE:  Dropped index su_ei_stat_ident_idx
NOTICE:  Dropped index su_ei_tax_ident_idx
NOTICE:  Dropped index su_s_employees_idx
NOTICE:  Dropped index su_s_turnover_idx
NOTICE:  Dropped index su_ss_employees_count_idx
NOTICE:  Dropped index su_ss_employees_sum_idx
NOTICE:  Dropped index su_ss_turnover_count_idx
NOTICE:  Dropped index su_ss_turnover_sum_idx
NOTICE:  Created index su_ei_stat_ident for external_ident_type
NOTICE:  Created indices for stat_definition employees
NOTICE:  Created indices for stat_definition turnover
DO $$ BEGIN RAISE NOTICE 'Archived tax_ident'; END; $$;
NOTICE:  Archived tax_ident
-- Insert vat_ident (or ensure it's active with the correct priority if it somehow exists)
-- tax_ident was priority 35. stat_ident is 36. We can reuse 35 for vat_ident.
INSERT INTO public.external_ident_type (code, name, priority, description, archived)
VALUES ('vat_ident', 'VAT Identifier', 35, 'Value Added Tax Identifier (dynamic test)', false)
ON CONFLICT (code) DO UPDATE SET
    name = EXCLUDED.name,
    priority = EXCLUDED.priority,
    description = EXCLUDED.description,
    archived = EXCLUDED.archived;
NOTICE:  Dropped index su_ei_stat_ident_idx
NOTICE:  Dropped index su_s_employees_idx
NOTICE:  Dropped index su_s_turnover_idx
NOTICE:  Dropped index su_ss_employees_count_idx
NOTICE:  Dropped index su_ss_employees_sum_idx
NOTICE:  Dropped index su_ss_turnover_count_idx
NOTICE:  Dropped index su_ss_turnover_sum_idx
NOTICE:  Created index su_ei_stat_ident for external_ident_type
NOTICE:  Created index su_ei_vat_ident for external_ident_type
NOTICE:  Created indices for stat_definition employees
NOTICE:  Created indices for stat_definition turnover
NOTICE:  Dropped index su_ei_stat_ident_idx
NOTICE:  Dropped index su_ei_vat_ident_idx
NOTICE:  Dropped index su_s_employees_idx
NOTICE:  Dropped index su_s_turnover_idx
NOTICE:  Dropped index su_ss_employees_count_idx
NOTICE:  Dropped index su_ss_employees_sum_idx
NOTICE:  Dropped index su_ss_turnover_count_idx
NOTICE:  Dropped index su_ss_turnover_sum_idx
NOTICE:  Created index su_ei_stat_ident for external_ident_type
NOTICE:  Created index su_ei_vat_ident for external_ident_type
NOTICE:  Created indices for stat_definition employees
NOTICE:  Created indices for stat_definition turnover
DO $$ BEGIN RAISE NOTICE 'Inserted/Updated vat_ident'; END; $$;
NOTICE:  Inserted/Updated vat_ident
-- Display current active external_ident_types and all data columns for external_idents step
\echo "   Active external_ident_types after modification:"
"   Active external_ident_types after modification:"
SELECT code, name, priority, archived FROM public.external_ident_type WHERE archived = false ORDER BY priority;
    code    |          name          | priority | archived 
------------+------------------------+----------+----------
 stat_ident | Statistical Identifier |        2 | f
 vat_ident  | VAT Identifier         |       35 | f
(2 rows)

\echo ""
""
\echo "   4b. Verify 'import_data_column's for 'external_idents' step reflect these changes"
"   4b. Verify 'import_data_column's for 'external_idents' step reflect these changes"
\echo "       Expected: 'tax_ident' data column removed from 'external_idents' step, 'vat_ident' data column added."
"       Expected: 'tax_ident' data column removed from 'external_idents' step, 'vat_ident' data column added."
SELECT dc.column_name, dc.purpose, dc.column_type
FROM public.import_data_column dc
JOIN public.import_step s ON dc.step_id = s.id
WHERE s.code = 'external_idents' AND dc.purpose = 'source_input'
ORDER BY dc.column_name;
  column_name   |   purpose    | column_type 
----------------+--------------+-------------
 stat_ident_raw | source_input | TEXT
 vat_ident_raw  | source_input | TEXT
(2 rows)

\echo ""
""
\echo "   4c. Verify mapping for 'legal_unit_job_provided' and (now archived) 'tax_ident'"
"   4c. Verify mapping for 'legal_unit_job_provided' and (now archived) 'tax_ident'"
\echo "       Expected: The 'tax_ident' source column on the definition is removed because its external_ident_type was archived."
"       Expected: The 'tax_ident' source column on the definition is removed because its external_ident_type was archived."
\echo "                 Therefore, no mapping exists, and the query should return 0 rows."
"                 Therefore, no mapping exists, and the query should return 0 rows."
SELECT
    id.slug AS definition_slug,
    isc.column_name AS source_column_name,
    isc.priority AS source_column_priority,
    im.id IS NOT NULL AS is_mapped_to_external_idents_step_dc, -- This specific mapping should be gone
    COALESCE(target_dc.column_name, 'N/A') AS target_data_column_name,
    COALESCE(target_dc.purpose::text, 'N/A') AS target_data_column_purpose,
    COALESCE(target_step.code, 'N/A') AS target_step_code
FROM public.import_definition id
JOIN public.import_source_column isc ON isc.definition_id = id.id AND isc.column_name = 'tax_ident'
LEFT JOIN public.import_mapping im ON im.source_column_id = isc.id AND im.definition_id = id.id
LEFT JOIN public.import_data_column target_dc ON im.target_data_column_id = target_dc.id
LEFT JOIN public.import_step target_step ON target_dc.step_id = target_step.id AND target_step.code = 'external_idents' -- Crucial: only check mappings to data_columns within external_idents step
WHERE id.slug = 'legal_unit_job_provided';
 definition_slug | source_column_name | source_column_priority | is_mapped_to_external_idents_step_dc | target_data_column_name | target_data_column_purpose | target_step_code 
-----------------+--------------------+------------------------+--------------------------------------+-------------------------+----------------------------+------------------
(0 rows)

\echo ""
""
\echo "   4d. Verify mapping for 'legal_unit_job_provided' and new 'vat_ident'"
"   4d. Verify mapping for 'legal_unit_job_provided' and new 'vat_ident'"
\echo "       Expected: A 'vat_ident' source column is automatically created and mapped on the 'legal_unit_job_provided' definition"
"       Expected: A 'vat_ident' source column is automatically created and mapped on the 'legal_unit_job_provided' definition"
\echo "                 because 'vat_ident' became an active external_ident_type. (Query should return 1 row)"
"                 because 'vat_ident' became an active external_ident_type. (Query should return 1 row)"
SELECT
    id.slug AS definition_slug,
    isc.column_name AS source_column_name,
    isc.priority AS source_column_priority,
    im.id IS NOT NULL AS is_mapped,
    COALESCE(target_dc.column_name, 'N/A') AS target_data_column_name,
    COALESCE(target_dc.purpose::text, 'N/A') AS target_data_column_purpose,
    COALESCE(target_step.code, 'N/A') AS target_step_code
FROM public.import_definition id
JOIN public.import_source_column isc ON isc.definition_id = id.id AND isc.column_name = 'vat_ident' -- This join condition will find the auto-created source column
LEFT JOIN public.import_mapping im ON im.source_column_id = isc.id AND im.definition_id = id.id
LEFT JOIN public.import_data_column target_dc ON im.target_data_column_id = target_dc.id
LEFT JOIN public.import_step target_step ON target_dc.step_id = target_step.id
WHERE id.slug = 'legal_unit_job_provided';
     definition_slug     | source_column_name | source_column_priority | is_mapped | target_data_column_name | target_data_column_purpose | target_step_code 
-------------------------+--------------------+------------------------+-----------+-------------------------+----------------------------+------------------
 legal_unit_job_provided | vat_ident          |                     39 | t         | vat_ident_raw           | source_input               | external_idents
(1 row)

ROLLBACK;
