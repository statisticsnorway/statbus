BEGIN;
\i test/setup.sql
-- While the datestyle is set for the database, the pg_regress tool sets the MDY format
-- to ensure consistent date formatting, so we must manually override this
SET datestyle TO 'ISO, DMY';
\if :{?DEBUG}
SET client_min_messages TO debug1;
\else
SET client_min_messages TO NOTICE;
\endif
-- Create temporary function to execute queries as system user
CREATE OR REPLACE FUNCTION test.sudo_exec(
    sql text,
    OUT results jsonb
) RETURNS jsonb
SECURITY DEFINER LANGUAGE plpgsql AS $sudo_exec$
DECLARE
    result_rows jsonb;
BEGIN
    -- Check if the SQL starts with common DDL keywords
    IF sql ~* '^\s*(CREATE|DROP|ALTER|TRUNCATE|GRANT|REVOKE|ANALYZE)' THEN
        -- For DDL statements, execute directly
        EXECUTE sql;
        results := '[]'::jsonb;
    ELSE
        -- For DML/queries, wrap in a SELECT to capture results
        EXECUTE format('
            SELECT COALESCE(
                jsonb_agg(row_to_json(t)),
                ''[]''::jsonb
            )
            FROM (%s) t',
            sql
        ) INTO result_rows;
        results := result_rows;
    END IF;
END;
$sudo_exec$;
-- Grant execute to public since this is for testing
GRANT EXECUTE ON FUNCTION test.sudo_exec(text) TO PUBLIC;
\echo Add users for testing purposes
Add users for testing purposes
SELECT * FROM public.user_create('test.admin@statbus.org', 'admin_user'::statbus_role, 'Admin#123!');
         email          |  password  
------------------------+------------
 test.admin@statbus.org | Admin#123!
(1 row)

SELECT * FROM public.user_create('test.regular@statbus.org', 'regular_user'::statbus_role, 'Regular#123!');
          email           |   password   
--------------------------+--------------
 test.regular@statbus.org | Regular#123!
(1 row)

SELECT * FROM public.user_create('test.restricted@statbus.org', 'restricted_user'::statbus_role, 'Restricted#123!');
            email            |    password     
-----------------------------+-----------------
 test.restricted@statbus.org | Restricted#123!
(1 row)

\echo "Setting up Statbus using the web provided examples"
"Setting up Statbus using the web provided examples"
-- A Super User configures statbus.
CALL test.set_user_from_email('test.admin@statbus.org');
\echo "User selected the Activity Category Standard"
"User selected the Activity Category Standard"
INSERT INTO settings(activity_category_standard_id,only_one_setting)
SELECT id, true FROM activity_category_standard WHERE code = 'isic_v4'
ON CONFLICT (only_one_setting)
DO UPDATE SET
   activity_category_standard_id =(SELECT id FROM activity_category_standard WHERE code = 'isic_v4')
   WHERE settings.id = EXCLUDED.id;
;
\echo "User uploads the sample activity categories"
"User uploads the sample activity categories"
\copy public.activity_category_available_custom(path,name) FROM 'app/public/demo/activity_custom_isic_demo.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
\echo "User uploads the sample regions"
"User uploads the sample regions"
\copy public.region_upload(path, name) FROM 'app/public/demo/regions_demo.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
\echo "User uploads the sample legal forms"
"User uploads the sample legal forms"
\copy public.legal_form_custom_only(code,name) FROM 'app/public/demo/legal_forms_demo.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
\echo "User uploads the sample sectors"
"User uploads the sample sectors"
\copy public.sector_custom_only(path,name,description) FROM 'app/public/demo/sectors_demo.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
SAVEPOINT before_loading_units;
SELECT
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.establishment) AS establishment_count,
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.legal_unit) AS legal_unit_count,
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.enterprise) AS enterprise_count;
 establishment_count | legal_unit_count | enterprise_count 
---------------------+------------------+------------------
                   0 |                0 |                0
(1 row)

\echo "Same external ident for legal unit and establishment"
"Same external ident for legal unit and establishment"
-- Create Import Job for Legal Units (Block 1)
INSERT INTO public.import_job (definition_id, slug, description, note, edit_comment)
SELECT
    (SELECT id FROM public.import_definition WHERE slug = 'legal_unit_explicit_dates'), -- Corrected slug
    'import_31_lu_era_b1',
    'Import LU Era B1 (31_load_units_errors.sql)',
    'Import job for test/data/31_legal_units.csv (Block 1).',
    'Test data load (31_load_units_errors.sql)';
\echo "User uploads legal units (via import job: import_31_lu_era_b1)"
"User uploads legal units (via import job: import_31_lu_era_b1)"
\copy public.import_31_lu_era_b1_upload(valid_from, valid_to, tax_ident,stat_ident,name,birth_date,physical_region_code,physical_country_iso_2,primary_activity_category_code,legal_form_code,sector_code,employees,turnover,data_source_code) FROM 'test/data/31_legal_units.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
-- Create Import Job for Formal Establishments (Block 1 - Errors)
INSERT INTO public.import_job (definition_id, slug, description, note, edit_comment)
SELECT
    (SELECT id FROM public.import_definition WHERE slug = 'establishment_for_lu_explicit_dates'), -- Corrected slug
    'import_31_esflu_era_b1',
    'Import Formal ES Era B1 Errors (31_load_units_errors.sql)',
    'Import job for test/data/31_formal_establishments_errors.csv (Block 1).',
    'Test data load (31_load_units_errors.sql)';
\echo "User uploads formal establishments with same stat_ident as legal units (via import job: import_31_esflu_era_b1)"
"User uploads formal establishments with same stat_ident as legal units (via import job: import_31_esflu_era_b1)"
\copy public.import_31_esflu_era_b1_upload(valid_from, valid_to, tax_ident,stat_ident,name,physical_region_code,physical_country_iso_2,primary_activity_category_code,employees,turnover,legal_unit_tax_ident,data_source_code) FROM 'test/data/31_formal_establishments_errors.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
\echo Run worker processing for import jobs - Block 1
Run worker processing for import jobs - Block 1
CALL worker.process_tasks(p_queue => 'import');
SELECT queue, state, count(*) FROM worker.tasks AS t JOIN worker.command_registry AS c ON t.command = c.command GROUP BY queue,state ORDER BY queue,state;
    queue    |   state   | count 
-------------+-----------+-------
 analytics   | pending   |     7
 import      | completed |     8
 maintenance | pending   |     2
(3 rows)

\echo "Checking import job statuses for Block 1"
"Checking import job statuses for Block 1"
SELECT slug, state, total_rows, imported_rows, error IS NOT NULL AS has_error,
       (SELECT COUNT(*) FROM public.import_31_lu_era_b1_data dr WHERE dr.state = 'error') AS lu_error_rows,
       (SELECT COUNT(*) FROM public.import_31_esflu_era_b1_data dr WHERE dr.state = 'error') AS es_error_rows
FROM public.import_job
WHERE slug IN ('import_31_lu_era_b1', 'import_31_esflu_era_b1') ORDER BY slug;
          slug          |  state   | total_rows | imported_rows | has_error | lu_error_rows | es_error_rows 
------------------------+----------+------------+---------------+-----------+---------------+---------------
 import_31_esflu_era_b1 | finished |          2 |             2 | f         |             0 |             0
 import_31_lu_era_b1    | finished |          2 |             2 | f         |             0 |             0
(2 rows)

\echo "Error rows in import_31_esflu_era_b1_data (if any):"
"Error rows in import_31_esflu_era_b1_data (if any):"
SELECT row_id, state, error, tax_ident, stat_ident, name
FROM public.import_31_esflu_era_b1_data
WHERE error IS NOT NULL OR state = 'error'
ORDER BY row_id;
 row_id | state | error | tax_ident | stat_ident | name 
--------+-------+-------+-----------+------------+------
(0 rows)

\echo Run worker processing for analytics tasks - Block 1 (errors primarily tested on import queue)
Run worker processing for analytics tasks - Block 1 (errors primarily tested on import queue)
CALL worker.process_tasks(p_queue => 'analytics');
SELECT queue, state, count(*) FROM worker.tasks AS t JOIN worker.command_registry AS c ON t.command = c.command GROUP BY queue,state ORDER BY queue,state;
    queue    |   state   | count 
-------------+-----------+-------
 analytics   | completed |     9
 import      | completed |     8
 maintenance | pending   |     2
(3 rows)

ROLLBACK TO before_loading_units;
SELECT
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.establishment) AS establishment_count,
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.legal_unit) AS legal_unit_count,
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.enterprise) AS enterprise_count;
 establishment_count | legal_unit_count | enterprise_count 
---------------------+------------------+------------------
                   0 |                0 |                0
(1 row)

\echo "Same external ident for formal establishment and informal establishment"
"Same external ident for formal establishment and informal establishment"
-- Create Import Job for Legal Units (Block 2)
INSERT INTO public.import_job (definition_id, slug, description, note, edit_comment)
SELECT
    (SELECT id FROM public.import_definition WHERE slug = 'legal_unit_explicit_dates'), -- Corrected slug
    'import_31_lu_era_b2',
    'Import LU Era B2 (31_load_units_errors.sql)',
    'Import job for test/data/31_legal_units.csv (Block 2).',
    'Test data load (31_load_units_errors.sql)';
\echo "User uploads legal units (via import job: import_31_lu_era_b2)"
"User uploads legal units (via import job: import_31_lu_era_b2)"
\copy public.import_31_lu_era_b2_upload(valid_from, valid_to, tax_ident,stat_ident,name,birth_date,physical_region_code,physical_country_iso_2,primary_activity_category_code,legal_form_code,sector_code,employees,turnover,data_source_code) FROM 'test/data/31_legal_units.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
-- Create Import Job for Formal Establishments (Block 2)
INSERT INTO public.import_job (definition_id, slug, description, note, edit_comment)
SELECT
    (SELECT id FROM public.import_definition WHERE slug = 'establishment_for_lu_explicit_dates'), -- Corrected slug
    'import_31_esflu_era_b2',
    'Import Formal ES Era B2 (31_load_units_errors.sql)',
    'Import job for test/data/31_formal_establishments.csv (Block 2).',
    'Test data load (31_load_units_errors.sql)';
\echo "User uploads formal establishments (via import job: import_31_esflu_era_b2)"
"User uploads formal establishments (via import job: import_31_esflu_era_b2)"
\copy public.import_31_esflu_era_b2_upload(valid_from, valid_to, tax_ident,stat_ident,name,physical_region_code,physical_country_iso_2,primary_activity_category_code,employees,turnover,legal_unit_tax_ident,data_source_code) FROM 'test/data/31_formal_establishments.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
-- Create Import Job for Informal Establishments (Block 2 - Errors)
INSERT INTO public.import_job (definition_id, slug, description, note, edit_comment)
SELECT
    (SELECT id FROM public.import_definition WHERE slug = 'establishment_without_lu_explicit_dates'), -- Corrected slug
    'import_31_eswlu_era_b2_errors',
    'Import Informal ES Era B2 Errors (31_load_units_errors.sql)',
    'Import job for test/data/31_informal_establishments_errors.csv (Block 2).',
    'Test data load (31_load_units_errors.sql)';
\echo "User uploads informal establishments with same stat_idents as formal establishments (via import job: import_31_eswlu_era_b2_errors)"
"User uploads informal establishments with same stat_idents as formal establishments (via import job: import_31_eswlu_era_b2_errors)"
\copy public.import_31_eswlu_era_b2_errors_upload(valid_from, valid_to, tax_ident,stat_ident,name,physical_region_code,physical_country_iso_2,primary_activity_category_code,employees,turnover,data_source_code) FROM 'test/data/31_informal_establishments_errors.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
\echo Run worker processing for import jobs - Block 2
Run worker processing for import jobs - Block 2
CALL worker.process_tasks(p_queue => 'import');
SELECT queue, state, count(*) FROM worker.tasks AS t JOIN worker.command_registry AS c ON t.command = c.command GROUP BY queue,state ORDER BY queue,state;
    queue    |   state   | count 
-------------+-----------+-------
 analytics   | pending   |     7
 import      | completed |    12
 maintenance | pending   |     2
(3 rows)

SELECT
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.establishment) AS establishment_count,
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.legal_unit) AS legal_unit_count,
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.enterprise) AS enterprise_count;
 establishment_count | legal_unit_count | enterprise_count 
---------------------+------------------+------------------
                   2 |                2 |                2
(1 row)

\echo "Checking import job statuses for Block 2"
"Checking import job statuses for Block 2"
SELECT slug, state, total_rows, imported_rows, error IS NOT NULL AS has_error,
       (SELECT COUNT(*) FROM public.import_31_lu_era_b2_data dr WHERE dr.state = 'error') AS lu_error_rows,
       (SELECT COUNT(*) FROM public.import_31_esflu_era_b2_data dr WHERE dr.state = 'error') AS es_formal_error_rows,
       (SELECT COUNT(*) FROM public.import_31_eswlu_era_b2_errors_data dr WHERE dr.state = 'error') AS es_informal_error_rows
FROM public.import_job
WHERE slug IN ('import_31_lu_era_b2', 'import_31_esflu_era_b2', 'import_31_eswlu_era_b2_errors') ORDER BY slug;
             slug              |  state   | total_rows | imported_rows | has_error | lu_error_rows | es_formal_error_rows | es_informal_error_rows 
-------------------------------+----------+------------+---------------+-----------+---------------+----------------------+------------------------
 import_31_esflu_era_b2        | finished |          2 |             2 | f         |             0 |                    0 |                      2
 import_31_eswlu_era_b2_errors | finished |          2 |             0 | f         |             0 |                    0 |                      2
 import_31_lu_era_b2           | finished |          2 |             2 | f         |             0 |                    0 |                      2
(3 rows)

\echo "Error rows in import_31_eswlu_era_b2_errors_data (if any):"
"Error rows in import_31_eswlu_era_b2_errors_data (if any):"
SELECT row_id, state, error, tax_ident, stat_ident, name
FROM public.import_31_eswlu_era_b2_errors_data
WHERE error IS NOT NULL OR state = 'error'
ORDER BY row_id;
 row_id | state |                                             error                                              |  tax_ident  | stat_ident |             name             
--------+-------+------------------------------------------------------------------------------------------------+-------------+------------+------------------------------
\echo "User uploads informal establishments with same stat_idents as formal establishments"
"User uploads informal establishments with same stat_idents as formal establishments"
\copy public.import_establishment_era_without_legal_unit(valid_from, valid_to, tax_ident,stat_ident,name,physical_region_code,physical_country_iso_2,primary_activity_category_code,employees,turnover,data_source_code) FROM 'test/data/31_informal_establishments_errors.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
ERROR:  Identifier conflicts [{"code": "tax_ident", "problem": "unstable_identifier", "new_ident": "82212760144", "unit_type": "establishment", "current_ident": "92212760144"}] for row {"name": "THE NILE PEARL WATER", "landline": null, "tag_path": null, "turnover": "1200", "valid_to": "infinity", "employees": "1", "tax_ident": "82212760144", "birth_date": null, "death_date": null, "fax_number": null, "stat_ident": "2000", "valid_from": "2024-01-01", "sector_code": null, "status_code": null, "web_address": null, "phone_number": null, "email_address": null, "mobile_number": null, "unit_size_code": null, "postal_altitude": null, "postal_latitude": null, "postal_postcode": null, "data_source_code": "nlr", "postal_longitude": null, "postal_postplace": null, "physical_altitude": null, "physical_latitude": null, "physical_postcode": null, "physical_longitude": null, "physical_postplace": null, "postal_region_code": null, "postal_region_path": null, "legal_unit_tax_ident": null, "physical_region_code": "225613", "physical_region_path": null, "postal_address_part1": null, "postal_address_part2": null, "postal_address_part3": null, "postal_country_iso_2": null, "legal_unit_stat_ident": null, "physical_address_part1": null, "physical_address_part2": null, "physical_address_part3": null, "physical_country_iso_2": "UG", "primary_activity_category_code": "4752", "secondary_activity_category_code": null}
DETAIL:  Key constraint (type_id, establishment_id) is violated.
HINT:  Check for other units already using the same identifier
CONTEXT:  PL/pgSQL function admin.insert_external_idents(jsonb,external_ident[],integer,integer,integer) line 97 at RAISE
SQL statement "SELECT admin.insert_external_idents(
      new_jsonb,
      external_idents_to_add,
      p_legal_unit_id => null::INTEGER,
      p_establishment_id => inserted_establishment.id,
      p_edit_by_user_id => edit_by_user.id
      )"
PL/pgSQL function admin.import_establishment_era_upsert() line 272 at PERFORM
SQL statement "INSERT INTO public.import_establishment_era (
        valid_from,
        valid_to,
        tax_ident,
        stat_ident,
        name,
        birth_date,
        death_date,
        physical_address_part1,
        physical_address_part2,
        physical_address_part3,
        physical_postcode,
        physical_postplace,
        physical_latitude,
        physical_longitude,
        physical_altitude,
        physical_region_code,
        physical_region_path,
        physical_country_iso_2,
        postal_address_part1,
        postal_address_part2,
        postal_address_part3,
        postal_postcode,
        postal_postplace,
        postal_latitude,
        postal_longitude,
        postal_altitude,
        postal_region_code,
        postal_region_path,
        postal_country_iso_2,
        web_address,
        email_address,
        phone_number,
        landline,
        mobile_number,
        fax_number,
        primary_activity_category_code,
        secondary_activity_category_code,
        sector_code,
        unit_size_code,
        status_code,
        data_source_code,
        employees,
        turnover,
        tag_path
    ) VALUES (
        NEW.valid_from,
        NEW.valid_to,
        NEW.tax_ident,
        NEW.stat_ident,
        NEW.name,
        NEW.birth_date,
        NEW.death_date,
        NEW.physical_address_part1,
        NEW.physical_address_part2,
        NEW.physical_address_part3,
        NEW.physical_postcode,
        NEW.physical_postplace,
        NEW.physical_latitude,
        NEW.physical_longitude,
        NEW.physical_altitude,
        NEW.physical_region_code,
        NEW.physical_region_path,
        NEW.physical_country_iso_2,
        NEW.postal_address_part1,
        NEW.postal_address_part2,
        NEW.postal_address_part3,
        NEW.postal_postcode,
        NEW.postal_postplace,
        NEW.postal_latitude,
        NEW.postal_longitude,
        NEW.postal_altitude,
        NEW.postal_region_code,
        NEW.postal_region_path,
        NEW.postal_country_iso_2,
        NEW.web_address,
        NEW.email_address,
        NEW.phone_number,
        NEW.landline,
        NEW.mobile_number,
        NEW.fax_number,
        NEW.primary_activity_category_code,
        NEW.secondary_activity_category_code,
        NEW.sector_code,
        NEW.unit_size_code,
        NEW.status_code,
        NEW.data_source_code,
        NEW.employees,
        NEW.turnover,
        NEW.tag_path
        )"
PL/pgSQL function admin.import_establishment_era_without_legal_unit_upsert() line 3 at SQL statement
COPY import_establishment_era_without_legal_unit, line 2: "2024-01-01,infinity,82212760144,2000,THE NILE PEARL WATER,225613,UG,4752,1,1200,nlr"

\echo Run worker processing for analytics tasks - Block 2 (errors primarily tested on import queue)
Run worker processing for analytics tasks - Block 2 (errors primarily tested on import queue)
CALL worker.process_tasks(p_queue => 'analytics');
SELECT queue, state, count(*) FROM worker.tasks AS t JOIN worker.command_registry AS c ON t.command = c.command GROUP BY queue,state ORDER BY queue,state;
    queue    |   state   | count 
-------------+-----------+-------
 analytics   | completed |     9
 import      | completed |    12
 maintenance | pending   |     2
(3 rows)

ROLLBACK TO before_loading_units;
SELECT
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.establishment) AS establishment_count,
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.legal_unit) AS legal_unit_count,
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.enterprise) AS enterprise_count;
 establishment_count | legal_unit_count | enterprise_count 
---------------------+------------------+------------------
                   0 |                0 |                0
(1 row)

\echo "User uploads legal units with invalid latitude"
"User uploads legal units with invalid latitude"
-- Create Import Job for Legal Units (Block 3 - Coordinate Errors)
INSERT INTO public.import_job (definition_id, slug, description, note, edit_comment)
SELECT
    (SELECT id FROM public.import_definition WHERE slug = 'legal_unit_explicit_dates'), -- Corrected slug
    'import_31_lu_era_b3_coord_errors',
    'Import LU Era B3 Coord Errors (31_load_units_errors.sql)',
    'Import job for test/data/31_legal_units_with_coordinates_errors.csv (Block 3).',
    'Test data load (31_load_units_errors.sql)';
NOTICE:  identifier "import_31_lu_era_b3_coord_errors_upload_check_state_before_insert" will be truncated to "import_31_lu_era_b3_coord_errors_upload_check_state_before_inse"
NOTICE:  identifier "import_31_lu_era_b3_coord_errors_upload_update_state_after_insert" will be truncated to "import_31_lu_era_b3_coord_errors_upload_update_state_after_inse"
\copy public.import_31_lu_era_b3_coord_errors_upload(valid_from, valid_to, tax_ident,stat_ident,name,birth_date,physical_region_code,physical_country_iso_2,primary_activity_category_code,legal_form_code,sector_code,employees,turnover,data_source_code, physical_latitude, physical_longitude, physical_altitude, web_address, email_address, phone_number) FROM 'test/data/31_legal_units_with_coordinates_errors.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
\echo Run worker processing for import jobs - Block 3
Run worker processing for import jobs - Block 3
CALL worker.process_tasks(p_queue => 'import');
NOTICE:  Invalid physical_latitude for row {"name": "NILE PEARL WATER", "landline": null, "tag_path": null, "turnover": "9000000", "valid_to": "infinity", "employees": "2", "tax_ident": "2212760144", "birth_date": "01.10.2016", "death_date": null, "fax_number": null, "stat_ident": "1000", "valid_from": "2024-01-01", "sector_code": "6100", "status_code": null, "web_address": "nilepearlwater.ug", "phone_number": "123456789", "email_address": "contact@npw.ug", "mobile_number": null, "unit_size_code": null, "legal_form_code": "4", "postal_altitude": null, "postal_latitude": null, "postal_postcode": null, "data_source_code": "nlr", "postal_longitude": null, "postal_postplace": null, "physical_altitude": "1144", "physical_latitude": "3333333", "physical_postcode": null, "physical_longitude": "32.2984354", "physical_postplace": null, "postal_region_code": null, "postal_region_path": null, "physical_region_code": "225613", "physical_region_path": null, "postal_address_part1": null, "postal_address_part2": null, "postal_address_part3": null, "postal_country_iso_2": null, "physical_address_part1": null, "physical_address_part2": null, "physical_address_part3": null, "physical_country_iso_2": "UG", "primary_activity_category_code": "4752", "secondary_activity_category_code": null} because of numeric field overflow
ERROR:  Invalid data: {
    "row": {
        "name": "NILE PEARL WATER",
        "landline": null,
        "tag_path": null,
        "turnover": "9000000",
        "valid_to": "infinity",
        "employees": "2",
        "tax_ident": "2212760144",
        "birth_date": "01.10.2016",
        "death_date": null,
        "fax_number": null,
        "stat_ident": "1000",
        "valid_from": "2024-01-01",
        "sector_code": "6100",
        "status_code": null,
        "web_address": "nilepearlwater.ug",
        "phone_number": "123456789",
        "email_address": "contact@npw.ug",
        "mobile_number": null,
        "unit_size_code": null,
        "legal_form_code": "4",
        "postal_altitude": null,
        "postal_latitude": null,
        "postal_postcode": null,
        "data_source_code": "nlr",
        "postal_longitude": null,
        "postal_postplace": null,
        "physical_altitude": "1144",
        "physical_latitude": "3333333",
        "physical_postcode": null,
        "physical_longitude": "32.2984354",
        "physical_postplace": null,
        "postal_region_code": null,
        "postal_region_path": null,
        "physical_region_code": "225613",
        "physical_region_path": null,
        "postal_address_part1": null,
        "postal_address_part2": null,
        "postal_address_part3": null,
        "postal_country_iso_2": null,
        "physical_address_part1": null,
        "physical_address_part2": null,
        "physical_address_part3": null,
        "physical_country_iso_2": "UG",
        "primary_activity_category_code": "4752",
        "secondary_activity_category_code": null
    },
    "errors": {
        "physical_latitude": "3333333"
    }
}
CONTEXT:  PL/pgSQL function admin.validate_itude_fields(location_type,jsonb) line 24 at RAISE
SQL statement "SELECT latitude
         , longitude
         , altitude
                                                                                                                                               FROM admin.validate_itude_fields('physical'::public.location_type, new_jsonb) AS r"
PL/pgSQL function admin.import_legal_unit_era_upsert() line 140 at SQL statement
COPY import_legal_unit_era, line 2: "2024-01-01,infinity,2212760144,1000,NILE PEARL WATER,01.10.2016,225613,UG,4752,4,6100,2,9000000,nlr,..."
ROLLBACK;
