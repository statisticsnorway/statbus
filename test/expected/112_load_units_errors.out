BEGIN;
\i test/setup.sql
-- While the datestyle is set for the database, the pg_regress tool sets the MDY format
-- to ensure consistent date formatting, so we must manually override this
SET datestyle TO 'ISO, DMY';
\if :{?DEBUG}
SET client_min_messages TO debug1;
\else
SET client_min_messages TO NOTICE;
\endif
-- Create temporary function to execute queries as system user
CREATE OR REPLACE FUNCTION test.sudo_exec(
    sql text,
    OUT results jsonb
) RETURNS jsonb
SECURITY DEFINER LANGUAGE plpgsql AS $sudo_exec$
DECLARE
    result_rows jsonb;
BEGIN
    -- Check if the SQL starts with common DDL keywords
    IF sql ~* '^\s*(CREATE|DROP|ALTER|TRUNCATE|GRANT|REVOKE|ANALYZE)' THEN
        -- For DDL statements, execute directly
        EXECUTE sql;
        results := '[]'::jsonb;
    ELSE
        -- For DML/queries, wrap in a SELECT to capture results
        EXECUTE format('
            SELECT COALESCE(
                jsonb_agg(row_to_json(t)),
                ''[]''::jsonb
            )
            FROM (%s) t',
            sql
        ) INTO result_rows;
        results := result_rows;
    END IF;
END;
$sudo_exec$;
-- Grant execute to public since this is for testing
GRANT EXECUTE ON FUNCTION test.sudo_exec(text) TO PUBLIC;
\echo Add users for testing purposes
Add users for testing purposes
SELECT * FROM public.user_create('test.admin@statbus.org', 'admin_user'::statbus_role, 'Admin#123!');
         email          |  password  
------------------------+------------
 test.admin@statbus.org | Admin#123!
(1 row)

SELECT * FROM public.user_create('test.regular@statbus.org', 'regular_user'::statbus_role, 'Regular#123!');
          email           |   password   
--------------------------+--------------
 test.regular@statbus.org | Regular#123!
(1 row)

SELECT * FROM public.user_create('test.restricted@statbus.org', 'restricted_user'::statbus_role, 'Restricted#123!');
            email            |    password     
-----------------------------+-----------------
 test.restricted@statbus.org | Restricted#123!
(1 row)

\echo "Setting up Statbus using the web provided examples"
"Setting up Statbus using the web provided examples"
-- A Super User configures statbus.
CALL test.set_user_from_email('test.admin@statbus.org');
\echo "User selected the Activity Category Standard"
"User selected the Activity Category Standard"
INSERT INTO settings(activity_category_standard_id,only_one_setting)
SELECT id, true FROM activity_category_standard WHERE code = 'isic_v4'
ON CONFLICT (only_one_setting)
DO UPDATE SET
   activity_category_standard_id =(SELECT id FROM activity_category_standard WHERE code = 'isic_v4')
   WHERE settings.id = EXCLUDED.id;
;
\echo "User uploads the sample activity categories"
"User uploads the sample activity categories"
\copy public.activity_category_available_custom(path,name) FROM 'app/public/demo/activity_custom_isic_demo.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
\echo "User uploads the sample regions"
"User uploads the sample regions"
\copy public.region_upload(path, name) FROM 'app/public/demo/regions_demo.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
\echo "User uploads the sample legal forms"
"User uploads the sample legal forms"
\copy public.legal_form_custom_only(code,name) FROM 'app/public/demo/legal_forms_demo.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
\echo "User uploads the sample sectors"
"User uploads the sample sectors"
\copy public.sector_custom_only(path,name,description) FROM 'app/public/demo/sectors_demo.csv' WITH (FORMAT csv, DELIMITER ',', QUOTE '"', HEADER true);
SAVEPOINT before_loading_units;
SELECT
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.establishment) AS establishment_count,
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.legal_unit) AS legal_unit_count,
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.enterprise) AS enterprise_count;
 establishment_count | legal_unit_count | enterprise_count 
---------------------+------------------+------------------
                   0 |                0 |                0
(1 row)

\echo "Same external ident for legal unit and establishment"
"Same external ident for legal unit and establishment"
-- Create Import Job for Legal Units (Block 1)
INSERT INTO public.import_job (definition_id, slug, description, note, edit_comment)
SELECT
    (SELECT id FROM public.import_definition WHERE slug = 'legal_unit_source_dates'), -- Corrected slug
    'import_31_lu_era_b1',
    'Import LU Era B1 (31_load_units_errors.sql)',
    'Import job for test/data/31_legal_units.csv (Block 1).',
    'Test data load (31_load_units_errors.sql)';
\echo "User uploads legal units (via import job: import_31_lu_era_b1)"
"User uploads legal units (via import job: import_31_lu_era_b1)"
INSERT INTO public.import_31_lu_era_b1_upload(valid_from, valid_to, tax_ident,stat_ident,name,birth_date,physical_region_code,physical_country_iso_2,primary_activity_category_code,legal_form_code,sector_code,employees,turnover,data_source_code) VALUES
('2024-01-01','infinity','2212760144','1000','NILE PEARL WATER','01.10.2016','225613','UG','4752','4','6100',2,9000000,'nlr'),
('2024-01-01','infinity','2812760140','1001','EQUATOR GLOBE SOLUTIONS','01.10.2016','225602','UG','5610','1','6100',2,2400000,'nlr');
-- Create Import Job for Formal Establishments (Block 1 - Errors)
INSERT INTO public.import_job (definition_id, slug, description, note, edit_comment)
SELECT
    (SELECT id FROM public.import_definition WHERE slug = 'establishment_for_lu_source_dates'), -- Corrected slug
    'import_31_esflu_era_b1',
    'Import Formal ES Era B1 Errors (31_load_units_errors.sql)',
    'Import job for test/data/31_formal_establishments_errors.csv (Block 1).',
    'Test data load (31_load_units_errors.sql)';
\echo "User uploads formal establishments with same stat_ident as legal units (via import job: import_31_esflu_era_b1)"
"User uploads formal establishments with same stat_ident as legal units (via import job: import_31_esflu_era_b1)"
INSERT INTO public.import_31_esflu_era_b1_upload(valid_from, valid_to, tax_ident,stat_ident,name,physical_region_code,physical_country_iso_2,primary_activity_category_code,employees,turnover,legal_unit_tax_ident,data_source_code) VALUES
('2024-01-01','infinity','92212760144','1000','NILE PEARL WATER','225613','UG','4752',0,0,'2212760144','nlr'),
('2024-01-01','infinity','92812760140','1001','EQUATOR GLOBE SOLUTIONS','225602','UG','5610',0,0,'2812760140','nlr');
\echo Run worker processing for import jobs - Block 1
Run worker processing for import jobs - Block 1
CALL worker.process_tasks(p_queue => 'import');
SELECT queue, state, count(*) FROM worker.tasks AS t JOIN worker.command_registry AS c ON t.command = c.command WHERE c.queue != 'maintenance' GROUP BY queue,state ORDER BY queue,state;
   queue   |   state   | count 
-----------+-----------+-------
 analytics | pending   |     5
 import    | completed |    57
(2 rows)

\echo "Checking import job statuses for Block 1"
"Checking import job statuses for Block 1"
SELECT slug, state, total_rows, imported_rows, error IS NOT NULL AS has_error,
       (SELECT COUNT(*) FROM public.import_31_lu_era_b1_data dr WHERE dr.state = 'error') AS lu_error_rows,
       (SELECT COUNT(*) FROM public.import_31_esflu_era_b1_data dr WHERE dr.state = 'error') AS es_error_rows
FROM public.import_job
WHERE slug IN ('import_31_lu_era_b1', 'import_31_esflu_era_b1') ORDER BY slug;
          slug          |  state   | total_rows | imported_rows | has_error | lu_error_rows | es_error_rows 
------------------------+----------+------------+---------------+-----------+---------------+---------------
 import_31_esflu_era_b1 | finished |          2 |             0 | f         |             0 |             2
 import_31_lu_era_b1    | finished |          2 |             2 | f         |             0 |             2
(2 rows)

\echo "Error rows in import_31_esflu_era_b1_data (if any):"
"Error rows in import_31_esflu_era_b1_data (if any):"
SELECT row_id, state, errors, tax_ident, stat_ident, name, merge_status
FROM public.import_31_esflu_era_b1_data
WHERE (errors IS NOT NULL AND errors IS DISTINCT FROM '{}'::JSONB) OR state = 'error'
ORDER BY row_id;
 row_id | state |                                                                                                  errors                                                                                                  |  tax_ident  | stat_ident |          name           | merge_status 
--------+-------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------+------------+-------------------------+--------------
      1 | error | {"tax_ident": "Identifier tax_ident value '92212760144' from input attempts to change existing value '2212760144'", "stat_ident": "Identifier already used by a Legal Unit: {\"stat_ident\": \"1000\"}"} | 92212760144 | 1000       | NILE PEARL WATER        | {}
      2 | error | {"tax_ident": "Identifier tax_ident value '92812760140' from input attempts to change existing value '2812760140'", "stat_ident": "Identifier already used by a Legal Unit: {\"stat_ident\": \"1001\"}"} | 92812760140 | 1001       | EQUATOR GLOBE SOLUTIONS | {}
(2 rows)

\echo Run worker processing for analytics tasks - Block 1 (errors primarily tested on import queue)
Run worker processing for analytics tasks - Block 1 (errors primarily tested on import queue)
CALL worker.process_tasks(p_queue => 'analytics');
SELECT queue, state, count(*) FROM worker.tasks AS t JOIN worker.command_registry AS c ON t.command = c.command WHERE c.queue != 'maintenance' GROUP BY queue,state ORDER BY queue,state;
   queue   |   state   | count 
-----------+-----------+-------
 analytics | completed |     7
 import    | completed |    57
(2 rows)

ROLLBACK TO before_loading_units;
SELECT
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.establishment) AS establishment_count,
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.legal_unit) AS legal_unit_count,
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.enterprise) AS enterprise_count;
 establishment_count | legal_unit_count | enterprise_count 
---------------------+------------------+------------------
                   0 |                0 |                0
(1 row)

\echo "Same external ident for formal establishment and informal establishment"
"Same external ident for formal establishment and informal establishment"
-- Create Import Job for Legal Units (Block 2)
INSERT INTO public.import_job (definition_id, slug, description, note, edit_comment)
SELECT
    (SELECT id FROM public.import_definition WHERE slug = 'legal_unit_source_dates'), -- Corrected slug
    'import_31_lu_era_b2',
    'Import LU Era B2 (31_load_units_errors.sql)',
    'Import job for test/data/31_legal_units.csv (Block 2).',
    'Test data load (31_load_units_errors.sql)';
\echo "User uploads legal units (via import job: import_31_lu_era_b2)"
"User uploads legal units (via import job: import_31_lu_era_b2)"
INSERT INTO public.import_31_lu_era_b2_upload(valid_from, valid_to, tax_ident,stat_ident,name,birth_date,physical_region_code,physical_country_iso_2,primary_activity_category_code,legal_form_code,sector_code,employees,turnover,data_source_code) VALUES
('2024-01-01','infinity','2212760144','1000','NILE PEARL WATER','01.10.2016','225613','UG','4752','4','6100',2,9000000,'nlr'),
('2024-01-01','infinity','2812760140','1001','EQUATOR GLOBE SOLUTIONS','01.10.2016','225602','UG','5610','1','6100',2,2400000,'nlr');
-- Create Import Job for Formal Establishments (Block 2)
INSERT INTO public.import_job (definition_id, slug, description, note, edit_comment)
SELECT
    (SELECT id FROM public.import_definition WHERE slug = 'establishment_for_lu_source_dates'), -- Corrected slug
    'import_31_esflu_era_b2',
    'Import Formal ES Era B2 (31_load_units_errors.sql)',
    'Import job for test/data/31_formal_establishments.csv (Block 2).',
    'Test data load (31_load_units_errors.sql)';
\echo "User uploads formal establishments (via import job: import_31_esflu_era_b2)"
"User uploads formal establishments (via import job: import_31_esflu_era_b2)"
INSERT INTO public.import_31_esflu_era_b2_upload(valid_from, valid_to, tax_ident,stat_ident,name,physical_region_code,physical_country_iso_2,primary_activity_category_code,employees,turnover,legal_unit_tax_ident,data_source_code) VALUES
('2024-01-01','infinity','92212760144','2000','NILE PEARL WATER','225613','UG','4752',0,0,'2212760144','nlr'),
('2024-01-01','infinity','92812760140','2001','EQUATOR GLOBE SOLUTIONS','225602','UG','5610',0,0,'2812760140','nlr');
-- Create Import Job for Informal Establishments (Block 2 - Errors)
INSERT INTO public.import_job (definition_id, slug, description, note, edit_comment)
SELECT
    (SELECT id FROM public.import_definition WHERE slug = 'establishment_without_lu_source_dates'), -- Corrected slug
    'import_31_eswlu_era_b2_errors',
    'Import Informal ES Era B2 Errors (31_load_units_errors.sql)',
    'Import job for test/data/31_informal_establishments_errors.csv (Block 2).',
    'Test data load (31_load_units_errors.sql)';
\echo "User uploads informal establishments with same stat_idents as formal establishments (via import job: import_31_eswlu_era_b2_errors)"
"User uploads informal establishments with same stat_idents as formal establishments (via import job: import_31_eswlu_era_b2_errors)"
INSERT INTO public.import_31_eswlu_era_b2_errors_upload(valid_from, valid_to, tax_ident,stat_ident,name,physical_region_code,physical_country_iso_2,primary_activity_category_code,employees,turnover,data_source_code) VALUES
('2024-01-01','infinity','82212760144','2000','THE NILE PEARL WATER','225613','UG','4752',1,1200,'nlr'),
('2024-01-01','infinity','82812760140','2001','THE  EQUATOR GLOBE SOLUTIONS','225602','UG','5610',2,4400,'nlr');
\echo Run worker processing for import jobs - Block 2
Run worker processing for import jobs - Block 2
CALL worker.process_tasks(p_queue => 'import');
SELECT queue, state, count(*) FROM worker.tasks AS t JOIN worker.command_registry AS c ON t.command = c.command WHERE c.queue != 'maintenance' GROUP BY queue,state ORDER BY queue,state;
   queue   |   state   | count 
-----------+-----------+-------
 analytics | pending   |     6
 import    | completed |   104
(2 rows)

SELECT
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.establishment) AS establishment_count,
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.legal_unit) AS legal_unit_count,
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.enterprise) AS enterprise_count;
 establishment_count | legal_unit_count | enterprise_count 
---------------------+------------------+------------------
                   2 |                2 |                2
(1 row)

\echo "Checking import job statuses for Block 2"
"Checking import job statuses for Block 2"
SELECT slug, state, total_rows, imported_rows, error IS NOT NULL AS has_error,
       (SELECT COUNT(*) FROM public.import_31_lu_era_b2_data dr WHERE dr.state = 'error') AS lu_error_rows,
       (SELECT COUNT(*) FROM public.import_31_esflu_era_b2_data dr WHERE dr.state = 'error') AS es_formal_error_rows,
       (SELECT COUNT(*) FROM public.import_31_eswlu_era_b2_errors_data dr WHERE dr.state = 'error') AS es_informal_error_rows
FROM public.import_job
WHERE slug IN ('import_31_lu_era_b2', 'import_31_esflu_era_b2', 'import_31_eswlu_era_b2_errors') ORDER BY slug;
             slug              |  state   | total_rows | imported_rows | has_error | lu_error_rows | es_formal_error_rows | es_informal_error_rows 
-------------------------------+----------+------------+---------------+-----------+---------------+----------------------+------------------------
 import_31_esflu_era_b2        | finished |          2 |             2 | f         |             0 |                    0 |                      2
 import_31_eswlu_era_b2_errors | finished |          2 |             0 | f         |             0 |                    0 |                      2
 import_31_lu_era_b2           | finished |          2 |             2 | f         |             0 |                    0 |                      2
(3 rows)

\echo "Error rows in import_31_eswlu_era_b2_errors_data (if any):"
"Error rows in import_31_eswlu_era_b2_errors_data (if any):"
SELECT row_id, state, errors, tax_ident, stat_ident, name, merge_status
FROM public.import_31_eswlu_era_b2_errors_data
WHERE (errors IS NOT NULL AND errors IS DISTINCT FROM '{}'::JSONB) OR state = 'error'
ORDER BY row_id;
 row_id | state |                                                                                                       errors                                                                                                        |  tax_ident  | stat_ident |             name             | merge_status 
--------+-------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------+------------+------------------------------+--------------
      1 | error | {"tax_ident": "Identifier tax_ident value '82212760144' from input attempts to change existing value '92212760144'", "stat_ident": "Identifier already used by a Formal Establishment: {\"stat_ident\": \"2000\"}"} | 82212760144 | 2000       | THE NILE PEARL WATER         | {}
      2 | error | {"tax_ident": "Identifier tax_ident value '82812760140' from input attempts to change existing value '92812760140'", "stat_ident": "Identifier already used by a Formal Establishment: {\"stat_ident\": \"2001\"}"} | 82812760140 | 2001       | THE  EQUATOR GLOBE SOLUTIONS | {}
(2 rows)

\echo Run worker processing for analytics tasks - Block 2 (errors primarily tested on import queue)
Run worker processing for analytics tasks - Block 2 (errors primarily tested on import queue)
CALL worker.process_tasks(p_queue => 'analytics');
SELECT queue, state, count(*) FROM worker.tasks AS t JOIN worker.command_registry AS c ON t.command = c.command WHERE c.queue != 'maintenance' GROUP BY queue,state ORDER BY queue,state;
   queue   |   state   | count 
-----------+-----------+-------
 analytics | completed |     8
 import    | completed |   104
(2 rows)

ROLLBACK TO before_loading_units;
SELECT
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.establishment) AS establishment_count,
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.legal_unit) AS legal_unit_count,
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.enterprise) AS enterprise_count;
 establishment_count | legal_unit_count | enterprise_count 
---------------------+------------------+------------------
                   0 |                0 |                0
(1 row)

\echo "User uploads legal units with invalid latitude"
"User uploads legal units with invalid latitude"
-- Create Import Job for Legal Units (Block 3 - Coordinate Errors)
INSERT INTO public.import_job (definition_id, slug, description, note, edit_comment)
SELECT
    (SELECT id FROM public.import_definition WHERE slug = 'legal_unit_source_dates'), -- Corrected slug
    'import_31_lu_era_b3_coord_errors',
    'Import LU Era B3 Various Coord Errors (31_load_units_errors.sql)',
    'Import job with various physical coordinate errors for Legal Units (Block 3).',
    'Test data load (31_load_units_errors.sql)';
NOTICE:  identifier "import_31_lu_era_b3_coord_errors_upload_check_state_before_insert" will be truncated to "import_31_lu_era_b3_coord_errors_upload_check_state_before_inse"
NOTICE:  identifier "import_31_lu_era_b3_coord_errors_upload_update_state_after_insert" will be truncated to "import_31_lu_era_b3_coord_errors_upload_update_state_after_inse"
INSERT INTO public.import_31_lu_era_b3_coord_errors_upload(valid_from, valid_to, tax_ident,stat_ident,name,birth_date,physical_region_code,physical_country_iso_2,primary_activity_category_code,legal_form_code,sector_code,employees,turnover,data_source_code, physical_latitude, physical_longitude, physical_altitude, web_address, email_address, phone_number) VALUES
-- Original: Latitude out of range (cast error)
('2024-01-01','infinity','2212760144','1000','NILE PEARL WATER','01.10.2016','225613','UG','4752','4','6100',2,9000000,'nlr','3333333','32.2984354','1144','nilepearlwater.ug','contact@npw.ug','123456789'),
-- Original: Valid coordinates
('2024-01-01','infinity','2812760140','1001','EQUATOR GLOBE SOLUTIONS','01.10.2016','225602','UG','5610','1','6100',2,2400000,'nlr','1.234567','32.442243','1172','egs.ug','contact@egs.ug','987654321'),
-- New: Longitude out of range
('2024-01-01','infinity','3000000003','3003','Longitude Range Test LU','01.01.2024','225613','UG','0111','1','1100',1,100000,'test','10.0','190.123456','100',NULL,NULL,NULL),
-- New: Altitude negative
('2024-01-01','infinity','3000000004','3004','Altitude Negative Test LU','01.01.2024','225613','UG','0111','1','1100',1,100000,'test','10.0','30.0','-50.5',NULL,NULL,NULL),
-- New: Latitude invalid text
('2024-01-01','infinity','3000000005','3005','Latitude Text Test LU','01.01.2024','225613','UG','0111','1','1100',1,100000,'test','abc','30.0','100',NULL,NULL,NULL),
-- New: Longitude invalid text
('2024-01-01','infinity','3000000006','3006','Longitude Text Test LU','01.01.2024','225613','UG','0111','1','1100',1,100000,'test','10.0','def','100',NULL,NULL,NULL),
-- New: Altitude invalid text
('2024-01-01','infinity','3000000007','3007','Altitude Text Test LU','01.01.2024','225613','UG','0111','1','1100',1,100000,'test','10.0','30.0','ghi',NULL,NULL,NULL);
\echo Run worker processing for import jobs - Block 3
Run worker processing for import jobs - Block 3
CALL worker.process_tasks(p_queue => 'import');
SELECT queue, state, count(*) FROM worker.tasks AS t JOIN worker.command_registry AS c ON t.command = c.command WHERE c.queue != 'maintenance' GROUP BY queue,state ORDER BY queue,state;
   queue   |   state   | count 
-----------+-----------+-------
 analytics | pending   |     6
 import    | completed |    47
(2 rows)

\echo "Checking import job status for Block 3 (import_31_lu_era_b3_coord_errors)"
"Checking import job status for Block 3 (import_31_lu_era_b3_coord_errors)"
SELECT slug, state, total_rows, imported_rows, error IS NOT NULL AS has_error,
       (SELECT COUNT(*) FROM public.import_31_lu_era_b3_coord_errors_data dr WHERE dr.state = 'error') AS error_rows
FROM public.import_job
WHERE slug = 'import_31_lu_era_b3_coord_errors'
ORDER BY slug;
               slug               |  state   | total_rows | imported_rows | has_error | error_rows 
----------------------------------+----------+------------+---------------+-----------+------------
 import_31_lu_era_b3_coord_errors | finished |          7 |             1 | f         |          6
(1 row)

\echo "Error rows in import_31_lu_era_b3_coord_errors_data (if any):"
"Error rows in import_31_lu_era_b3_coord_errors_data (if any):"
SELECT row_id, state, errors, tax_ident, name, physical_latitude, merge_status
FROM public.import_31_lu_era_b3_coord_errors_data
WHERE (errors IS NOT NULL AND errors IS DISTINCT FROM '{}'::JSONB) OR state = 'error'
ORDER BY row_id;
 row_id | state |                                                       errors                                                       | tax_ident  |           name            | physical_latitude | merge_status 
--------+-------+--------------------------------------------------------------------------------------------------------------------+------------+---------------------------+-------------------+--------------
      1 | error | {"physical_latitude": "Value '3333333' is out of range for type NUMERIC(9,6). SQLSTATE: 22003"}                    | 2212760144 | NILE PEARL WATER          | 3333333           | {}
      3 | error | {"physical_longitude": "Value 190.123456 out of range. Expected -180 to 180."}                                     | 3000000003 | Longitude Range Test LU   | 10.0              | {}
      4 | error | {"physical_altitude": "Value -50.5 cannot be negative. Expected >= 0."}                                            | 3000000004 | Altitude Negative Test LU | 10.0              | {}
      5 | error | {"physical_latitude": "Value 'abc' is not a valid numeric representation for type NUMERIC(9,6). SQLSTATE: 22P02"}  | 3000000005 | Latitude Text Test LU     | abc               | {}
      6 | error | {"physical_longitude": "Value 'def' is not a valid numeric representation for type NUMERIC(9,6). SQLSTATE: 22P02"} | 3000000006 | Longitude Text Test LU    | 10.0              | {}
      7 | error | {"physical_altitude": "Value 'ghi' is not a valid numeric representation for type NUMERIC(6,1). SQLSTATE: 22P02"}  | 3000000007 | Altitude Text Test LU     | 10.0              | {}
(6 rows)

ROLLBACK TO before_loading_units;
SELECT
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.establishment) AS establishment_count,
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.legal_unit) AS legal_unit_count,
    (SELECT COUNT(DISTINCT id) AS distinct_unit_count FROM public.enterprise) AS enterprise_count;
 establishment_count | legal_unit_count | enterprise_count 
---------------------+------------------+------------------
                   0 |                0 |                0
(1 row)

\echo "User uploads legal units with postal coordinates (error condition)"
"User uploads legal units with postal coordinates (error condition)"
-- Create Import Job for Legal Units (Block 4 - Postal Coordinate Errors)
INSERT INTO public.import_job (definition_id, slug, description, note, edit_comment)
SELECT
    (SELECT id FROM public.import_definition WHERE slug = 'legal_unit_source_dates'),
    'import_31_lu_postal_coord_errors',
    'Import LU Era B4 Postal Coord Errors (31_load_units_errors.sql)',
    'Import job with postal coordinate errors for Legal Units (Block 4).',
    'Test data load (31_load_units_errors.sql)';
NOTICE:  identifier "import_31_lu_postal_coord_errors_upload_check_state_before_insert" will be truncated to "import_31_lu_postal_coord_errors_upload_check_state_before_inse"
NOTICE:  identifier "import_31_lu_postal_coord_errors_upload_update_state_after_insert" will be truncated to "import_31_lu_postal_coord_errors_upload_update_state_after_inse"
INSERT INTO public.import_31_lu_postal_coord_errors_upload(
    valid_from, valid_to, tax_ident, stat_ident, name, birth_date, data_source_code,
    postal_address_part1, postal_country_iso_2, postal_latitude, postal_longitude, postal_altitude
) VALUES
('2024-01-01','infinity','4000000001','4001','Postal Coord Test LU 1','01.01.2024','test', 'PO Box 123', 'UG', '1.0', '32.0', '1100'),
('2024-01-01','infinity','4000000002','4002','Postal Coord Test LU 2 (No Coords)','01.01.2024','test', 'PO Box 456', 'UG', NULL, NULL, NULL);
ERROR:  column "postal_latitude" of relation "import_31_lu_postal_coord_errors_upload" does not exist
LINE 3:     postal_address_part1, postal_country_iso_2, postal_latit...
                                                        ^
ROLLBACK;
