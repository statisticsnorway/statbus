# docker-compose.yml for PostgreSQL database
services:
  db:
    container_name: ${COMPOSE_INSTANCE_NAME:?COMPOSE_INSTANCE_NAME must be set in the generated .env}-db
    build:
      context: .
      dockerfile: Dockerfile
    image: statbus_postgres:latest
    healthcheck:
      test: pg_isready -U postgres -h localhost
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      POSTGRES_ADMIN_DB: ${POSTGRES_ADMIN_DB:-postgres}
      POSTGRES_ADMIN_USER: ${POSTGRES_ADMIN_USER:-postgres}
      POSTGRES_ADMIN_PASSWORD: ${POSTGRES_ADMIN_PASSWORD:?POSTGRES_ADMIN_PASSWORD must be set in the generated .env}
      POSTGRES_APP_DB: ${POSTGRES_APP_DB:-statbus_${DEPLOYMENT_SLOT_CODE:?DEPLOYMENT_SLOT_CODE must be set in the generated .env}}
      POSTGRES_APP_USER: ${POSTGRES_APP_USER:-statbus_${DEPLOYMENT_SLOT_CODE:?DEPLOYMENT_SLOT_CODE must be set in the generated .env}}
      POSTGRES_APP_PASSWORD: ${POSTGRES_APP_PASSWORD:?POSTGRES_APP_PASSWORD must be set in the generated .env}
      POSTGRES_NOTIFY_USER: ${POSTGRES_NOTIFY_USER:?POSTGRES_NOTIFY_USER must be set in the generated .env}
      POSTGRES_NOTIFY_PASSWORD: ${POSTGRES_NOTIFY_PASSWORD:?POSTGRES_NOTIFY_PASSWORD must be set in the generated .env}
      POSTGRES_AUTHENTICATOR_PASSWORD: ${POSTGRES_AUTHENTICATOR_PASSWORD:?POSTGRES_AUTHENTICATOR_PASSWORD must be set in the generated .env}
      POSTGRES_PASSWORD: ${POSTGRES_ADMIN_PASSWORD:?POSTGRES_ADMIN_PASSWORD must be set in the generated .env}
      JWT_SECRET: ${JWT_SECRET:?JWT_SECRET must be set in the generated .env}
      JWT_EXP: ${ACCESS_JWT_EXPIRY:?ACCESS_JWT_EXPIRY must be set in the generated .env}
      DEPLOYMENT_SLOT_CODE: ${DEPLOYMENT_SLOT_CODE:?DEPLOYMENT_SLOT_CODE must be set in the generated .env}
      DEBUG: ${DEBUG:?DEBUG must be set in the generated .env}
    ports:
      - "127.0.0.1:${DB_PUBLIC_LOCALHOST_PORT:-5432}:5432"
    volumes:
      - ./volumes/db/data:/var/lib/postgresql/data:Z
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
      - ./start-postgres.sh:/usr/local/bin/start-postgres.sh:ro # Mount the new script
      # Make all files available for running tests and writing test results or output files from psql.
      - ..:/statbus

    profiles:
      - "all"
      - "all_except_app"
    # Prevent the database from using too much memory
    shm_size: 4g
    mem_limit: 4G
    mem_reservation: 2G
    entrypoint: /usr/local/bin/start-postgres.sh # Override entrypoint to use our script first
    # The original CMD ["postgres"] from Dockerfile is implicitly used by docker-entrypoint.sh
    # if no command is specified here after the entrypoint. Our start-postgres.sh
    # explicitly calls `docker-entrypoint.sh postgres ...` so this is fine.

volumes:
  # Named volumes are kept for backward compatibility
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/db/data
