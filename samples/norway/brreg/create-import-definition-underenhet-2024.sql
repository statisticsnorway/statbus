-- Create import definition for BRREG Underenhet (establishment for legal unit) using 2024 columns
-- This version uses the new import system with steps and helper functions.

DO $$
DECLARE
    def_id INT;
    -- Define the steps needed for an establishment linked to a legal unit import with explicit dates
    es_steps TEXT[] := ARRAY[
        'external_idents', 'link_establishment_to_legal_unit', 'valid_time_from_source', 'status', 'establishment',
        'physical_location', 'postal_location', 'primary_activity', 'secondary_activity',
        'contact', 'statistical_variables', 'tags', 'edit_info', 'metadata'
    ];
    map_rec RECORD;
    v_source_col_id INT;
    v_data_col_id INT;
BEGIN
    -- 1. Create the definition record (initially invalid)
    INSERT INTO public.import_definition (slug, name, note, strategy, mode, valid)
    VALUES ('brreg_underenhet_2024', 'Import of BRREG Underenhet using 2024 columns', 'Easy upload of the CSV file found at brreg.', 'insert_or_replace', 'establishment_formal', false)
    RETURNING id INTO def_id;

    -- 2. Link the required steps to the definition
    PERFORM import.link_steps_to_definition(def_id, es_steps);

    -- 3. Data columns are defined per step and generated by lifecycle callbacks.
    --    The call to admin.create_data_columns_for_definition(def_id) is removed.

    -- 4. Define source columns and mappings declaratively
    -- Create a temporary table to hold the mapping list
    CREATE TEMP TABLE temp_mapping_list (
        priority INT,
        source_name TEXT,
        target_name TEXT
    ) ON COMMIT DROP;

    -- Populate the temporary table
    INSERT INTO temp_mapping_list (priority, source_name, target_name)
    SELECT ROW_NUMBER() OVER () as priority, source_name, target_name
    FROM (VALUES
            ('organisasjonsnummer', 'tax_ident'),
            ('navn', 'name'),
            ('organisasjonsform.kode', NULL), -- Ignored
            ('organisasjonsform.beskrivelse', NULL), -- Ignored
            ('naeringskode1.kode', 'primary_activity_category_code'),
            ('naeringskode1.beskrivelse', NULL), -- Ignored
            ('naeringskode2.kode', 'secondary_activity_category_code'),
            ('naeringskode2.beskrivelse', NULL), -- Ignored
            ('naeringskode3.kode', NULL), -- Ignored
            ('naeringskode3.beskrivelse', NULL), -- Ignored
            ('hjelpeenhetskode.kode', NULL), -- Ignored
            ('hjelpeenhetskode.beskrivelse', NULL), -- Ignored
            ('harRegistrertAntallAnsatte', NULL), -- Ignored
            ('antallAnsatte', 'employees'),
            ('hjemmeside', 'web_address'),
            ('postadresse.adresse', 'postal_address_part1'),
            ('postadresse.poststed', 'postal_postplace'),
            ('postadresse.postnummer', 'postal_postcode'),
            ('postadresse.kommune', NULL), -- Ignored
            ('postadresse.kommunenummer', 'postal_region_code'),
            ('postadresse.land', NULL), -- Ignored
            ('postadresse.landkode', 'postal_country_iso_2'),
            ('beliggenhetsadresse.adresse', 'physical_address_part1'),
            ('beliggenhetsadresse.poststed', 'physical_postplace'),
            ('beliggenhetsadresse.postnummer', 'physical_postcode'),
            ('beliggenhetsadresse.kommune', NULL), -- Ignored
            ('beliggenhetsadresse.kommunenummer', 'physical_region_code'),
            ('beliggenhetsadresse.land', NULL), -- Ignored
            ('beliggenhetsadresse.landkode', 'physical_country_iso_2'),
            ('registreringsdatoIEnhetsregisteret', NULL), -- Ignored
            ('frivilligMvaRegistrertBeskrivelser', NULL), -- Ignored
            ('registrertIMvaregisteret', NULL), -- Ignored
            ('oppstartsdato', 'birth_date'),
            ('datoEierskifte', NULL), -- Ignored
            ('overordnetEnhet', 'legal_unit_tax_ident'), -- Map to the dynamic column
            ('nedleggelsesdato', 'death_date')
        ) AS v(source_name, target_name);

    -- Loop through the temporary mapping list table
    FOR map_rec IN SELECT * FROM temp_mapping_list ORDER BY priority LOOP
        -- Insert the source column
        INSERT INTO public.import_source_column (definition_id, column_name, priority)
        VALUES (def_id, map_rec.source_name, map_rec.priority)
        RETURNING id INTO v_source_col_id;

        -- If a target is specified, create the mapping
        IF map_rec.target_name IS NOT NULL THEN
            -- Find the corresponding data column ID by joining through the steps linked to this definition
            SELECT dc.id INTO v_data_col_id
            FROM public.import_definition_step ds
            JOIN public.import_data_column dc ON ds.step_id = dc.step_id
            WHERE ds.definition_id = def_id
              AND dc.column_name = map_rec.target_name
              AND dc.purpose = 'source_input';

            IF v_data_col_id IS NOT NULL THEN
                -- Insert the mapping
                INSERT INTO public.import_mapping (definition_id, source_column_id, target_data_column_id)
                VALUES (def_id, v_source_col_id, v_data_col_id)
                ON CONFLICT DO NOTHING; -- Should not happen with unique target constraint
            ELSE
                 -- Fail Fast: If a mapping is defined but the target data column doesn't exist for this definition's steps, it's an error.
                RAISE EXCEPTION '[Definition %] Could not find target data column % (purpose=source_input) for source column % among linked steps.', def_id, map_rec.target_name, map_rec.source_name;
            END IF;
        END IF;
    END LOOP;

    -- 4c. Add mappings for default values (valid_from, valid_to) if needed by steps
    -- These source columns don't exist, so source_column_id is NULL
    DECLARE
        v_valid_time_step_id INT;
    BEGIN
        SELECT id INTO v_valid_time_step_id FROM public.import_step WHERE code = 'valid_time_from_source'; -- Changed name to code

        INSERT INTO public.import_mapping (definition_id, source_expression, target_data_column_id)
        SELECT def_id, 'default'::public.import_source_expression, dc.id
        FROM public.import_data_column dc
        WHERE dc.step_id = v_valid_time_step_id -- Use step_id
          AND dc.column_name IN ('valid_from', 'valid_to')
          AND dc.purpose = 'source_input'
        ON CONFLICT DO NOTHING;
    END;

    -- 5. Set the 'tax_ident' data column as uniquely identifying for the prepare step UPSERT
    DECLARE
        v_idents_step_id INT;
    BEGIN
        SELECT id INTO v_idents_step_id FROM public.import_step WHERE name = 'external_idents';
        UPDATE public.import_data_column
        SET is_uniquely_identifying = true
        WHERE step_id = v_idents_step_id -- Use step_id
          AND column_name = 'tax_ident'
          AND purpose = 'source_input';
    END; -- End of the inner BEGIN/END block

    DROP TABLE temp_mapping_list;
    
END $$; -- End of the main DO block

-- Display the created definition details
SELECT d.slug,
       d.name,
       d.note,
       ds.code as data_source,
       d.time_context_ident,
       d.strategy,
       d.valid,
       d.validation_error
FROM public.import_definition d
LEFT JOIN public.data_source ds ON ds.id = d.data_source_id
WHERE d.slug = 'brreg_underenhet_2024';

-- Set the definition to valid (can now be used to create jobs)
UPDATE public.import_definition
SET valid = true, validation_error = NULL
WHERE slug = 'brreg_underenhet_2024';
