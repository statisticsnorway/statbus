// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using nscreg.Data;

#nullable disable

namespace nscreg.Data.Migrations
{
    [DbContext(typeof(NSCRegDbContext))]
    [Migration("20230928090323_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityCategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("ActivityType")
                        .HasColumnType("integer");

                    b.Property<int?>("ActivityYear")
                        .HasColumnType("integer");

                    b.Property<int?>("Employees")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("IdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Turnover")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ActivityCategoryId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("nscreg.Data.Entities.ActivityCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActivityCategoryLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int?>("DicParentId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameLanguage1")
                        .HasColumnType("text");

                    b.Property<string>("NameLanguage2")
                        .HasColumnType("text");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("VersionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("ActivityCategories");
                });

            modelBuilder.Entity("nscreg.Data.Entities.ActivityCategoryUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("ActivityCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "ActivityCategoryId");

                    b.HasIndex("ActivityCategoryId");

                    b.ToTable("ActivityCategoryUsers");
                });

            modelBuilder.Entity("nscreg.Data.Entities.ActivityLegalUnit", b =>
                {
                    b.Property<int>("UnitId")
                        .HasColumnType("integer");

                    b.Property<int>("ActivityId")
                        .HasColumnType("integer");

                    b.Property<int?>("EnterpriseUnitRegId")
                        .HasColumnType("integer");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("LocalUnitRegId")
                        .HasColumnType("integer");

                    b.HasKey("UnitId", "ActivityId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("EnterpriseUnitRegId");

                    b.HasIndex("HistoryId");

                    b.HasIndex("LocalUnitRegId");

                    b.HasIndex("UnitId");

                    b.ToTable("ActivityLegalUnits");
                });

            modelBuilder.Entity("nscreg.Data.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressPart1")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("AddressPart2")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("AddressPart3")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex("AddressPart1", "AddressPart2", "AddressPart3", "RegionId", "Latitude", "Longitude");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("nscreg.Data.Entities.AnalysisLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnalysisQueueId")
                        .HasColumnType("integer");

                    b.Property<int>("AnalyzedUnitId")
                        .HasColumnType("integer");

                    b.Property<int>("AnalyzedUnitType")
                        .HasColumnType("integer");

                    b.Property<string>("ErrorValues")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("IssuedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ResolvedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SummaryMessages")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisQueueId", "AnalyzedUnitId");

                    b.ToTable("AnalysisLogs");
                });

            modelBuilder.Entity("nscreg.Data.Entities.AnalysisQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ServerEndPeriod")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ServerStartPeriod")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("UserEndPeriod")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UserStartPeriod")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AnalysisQueues");
                });

            modelBuilder.Entity("nscreg.Data.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("IsoCode")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameLanguage1")
                        .HasColumnType("text");

                    b.Property<string>("NameLanguage2")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("nscreg.Data.Entities.CountryForUnit", b =>
                {
                    b.Property<int?>("EnterpriseUnitId")
                        .HasColumnType("integer");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<int?>("EnterpriseGroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("LegalUnitId")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<int?>("LocalUnitId")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.HasKey("EnterpriseUnitId", "CountryId");

                    b.HasIndex("CountryId");

                    b.HasIndex("EnterpriseGroupId");

                    b.HasIndex("LegalUnitId");

                    b.HasIndex("LocalUnitId");

                    b.ToTable("CountryStatisticalUnits");
                });

            modelBuilder.Entity("nscreg.Data.Entities.CustomAnalysisCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Query")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("TargetUnitTypes")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.HasKey("Id");

                    b.ToTable("CustomAnalysisChecks");
                });

            modelBuilder.Entity("nscreg.Data.Entities.DataSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AllowedOperations")
                        .HasColumnType("integer");

                    b.Property<string>("AttributesToCheck")
                        .HasColumnType("text");

                    b.Property<string>("CsvDelimiter")
                        .HasColumnType("text");

                    b.Property<int>("CsvSkipCount")
                        .HasColumnType("integer");

                    b.Property<int>("DataSourceUploadType")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OriginalCsvAttributes")
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("Restrictions")
                        .HasColumnType("text");

                    b.Property<int>("StatUnitType")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("VariablesMapping")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("DataSourceUploads", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.DataSourceClassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameLanguage1")
                        .HasColumnType("text");

                    b.Property<string>("NameLanguage2")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("DataSourceClassifications");
                });

            modelBuilder.Entity("nscreg.Data.Entities.DataSourceQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DataSourceFileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DataSourceId")
                        .HasColumnType("integer");

                    b.Property<string>("DataSourcePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("EndImportDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("SkipLinesCount")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("StartImportDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DataSourceId");

                    b.HasIndex("UserId");

                    b.ToTable("DataSourceQueues");
                });

            modelBuilder.Entity("nscreg.Data.Entities.DataUploadingLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DataSourceQueueId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("EndImportDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Errors")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("SerializedRawUnit")
                        .HasColumnType("text");

                    b.Property<string>("SerializedUnit")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("StartImportDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StatUnitName")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Summary")
                        .HasColumnType("text");

                    b.Property<string>("TargetStatId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DataSourceQueueId");

                    b.ToTable("DataUploadingLogs");
                });

            modelBuilder.Entity("nscreg.Data.Entities.DictionaryVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("VersionId")
                        .HasColumnType("integer");

                    b.Property<string>("VersionName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DictionaryVersions");
                });

            modelBuilder.Entity("nscreg.Data.Entities.EnterpriseGroup", b =>
                {
                    b.Property<int>("RegId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RegId"));

                    b.Property<int?>("ActualAddressId")
                        .HasColumnType("integer");

                    b.Property<int?>("AddressId")
                        .HasColumnType("integer");

                    b.Property<int>("ChangeReason")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("ContactPerson")
                        .HasColumnType("text");

                    b.Property<string>("DataSource")
                        .HasColumnType("text");

                    b.Property<int?>("DataSourceClassificationId")
                        .HasColumnType("integer");

                    b.Property<string>("EditComment")
                        .HasColumnType("text");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("text");

                    b.Property<int?>("Employees")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("EmployeesDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("EmployeesYear")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("EndPeriod")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("EntGroupTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ExternalIdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExternalIdType")
                        .HasColumnType("text");

                    b.Property<int?>("ForeignParticipationId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LiqDateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("LiqDateStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LiqReason")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int?>("NumOfPeopleEmp")
                        .HasColumnType("integer");

                    b.Property<int?>("PostalAddressId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("RegIdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("RegistrationReasonId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("ReorgDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReorgReferences")
                        .HasColumnType("text");

                    b.Property<string>("ReorgTypeCode")
                        .HasColumnType("text");

                    b.Property<int?>("ReorgTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.Property<int?>("SizeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("StartPeriod")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StatId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("StatIdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("StatusDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SuspensionEnd")
                        .HasColumnType("text");

                    b.Property<string>("SuspensionStart")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("TaxRegDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TaxRegId")
                        .HasColumnType("text");

                    b.Property<string>("TelephoneNo")
                        .HasColumnType("text");

                    b.Property<decimal?>("Turnover")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("TurnoverDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("TurnoverYear")
                        .HasColumnType("integer");

                    b.Property<int?>("UnitStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WebAddress")
                        .HasColumnType("text");

                    b.HasKey("RegId");

                    b.HasIndex("ActualAddressId");

                    b.HasIndex("AddressId");

                    b.HasIndex("DataSourceClassificationId");

                    b.HasIndex("EntGroupTypeId");

                    b.HasIndex("ForeignParticipationId");

                    b.HasIndex("Name");

                    b.HasIndex("PostalAddressId");

                    b.HasIndex("RegistrationReasonId");

                    b.HasIndex("ReorgTypeId");

                    b.HasIndex("SizeId");

                    b.HasIndex("StartPeriod");

                    b.HasIndex("UnitStatusId");

                    b.ToTable("EnterpriseGroups", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.EnterpriseGroupRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameLanguage1")
                        .HasColumnType("text");

                    b.Property<string>("NameLanguage2")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("EnterpriseGroupRoles");
                });

            modelBuilder.Entity("nscreg.Data.Entities.EnterpriseGroupType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameLanguage1")
                        .HasColumnType("text");

                    b.Property<string>("NameLanguage2")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("EnterpriseGroupTypes");
                });

            modelBuilder.Entity("nscreg.Data.Entities.EnterpriseUnit", b =>
                {
                    b.Property<int>("RegId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RegId"));

                    b.Property<int?>("ActualAddressId")
                        .HasColumnType("integer");

                    b.Property<int?>("AddressId")
                        .HasColumnType("integer");

                    b.Property<int>("ChangeReason")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<bool?>("Classified")
                        .HasColumnType("boolean");

                    b.Property<bool>("Commercial")
                        .HasColumnType("boolean");

                    b.Property<string>("DataSource")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("DataSourceClassificationId")
                        .HasColumnType("integer");

                    b.Property<string>("EditComment")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("Employees")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("EmployeesDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("EmployeesYear")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("EndPeriod")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EntGroupIdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("EntGroupRoleId")
                        .HasColumnType("integer");

                    b.Property<int?>("EnterpriseGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("ExternalIdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExternalIdType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ForeignCapitalCurrency")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ForeignCapitalCurrency");

                    b.Property<string>("ForeignCapitalShare")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ForeignCapitalShare");

                    b.Property<int?>("ForeignParticipationId")
                        .HasColumnType("integer");

                    b.Property<bool>("FreeEconZone")
                        .HasColumnType("boolean");

                    b.Property<int?>("InstSectorCodeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("LegalFormId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("LiqDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LiqReason")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("MunCapitalShare")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("MunCapitalShare");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int?>("NumOfPeopleEmp")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentOrgLink")
                        .HasColumnType("integer");

                    b.Property<int?>("PostalAddressId")
                        .HasColumnType("integer");

                    b.Property<string>("PrivCapitalShare")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("PrivCapitalShare");

                    b.Property<string>("RefNo")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTimeOffset>("RegIdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("RegistrationReasonId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("ReorgDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ReorgReferences")
                        .HasColumnType("integer");

                    b.Property<string>("ReorgTypeCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("ReorgTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("ShortName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("SizeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("StartPeriod")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StatId")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<DateTimeOffset?>("StatIdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StateCapitalShare")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("StateCapitalShare");

                    b.Property<DateTimeOffset?>("StatusDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("SuspensionEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("SuspensionStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("TaxRegDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TaxRegId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TelephoneNo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TotalCapital")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("TotalCapital");

                    b.Property<decimal?>("Turnover")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("TurnoverDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("TurnoverYear")
                        .HasColumnType("integer");

                    b.Property<int?>("UnitStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("WebAddress")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("RegId");

                    b.HasIndex("ActualAddressId");

                    b.HasIndex("AddressId");

                    b.HasIndex("DataSourceClassificationId");

                    b.HasIndex("EntGroupRoleId");

                    b.HasIndex("EnterpriseGroupId");

                    b.HasIndex("ForeignParticipationId");

                    b.HasIndex("InstSectorCodeId");

                    b.HasIndex("LegalFormId");

                    b.HasIndex("Name");

                    b.HasIndex("PostalAddressId");

                    b.HasIndex("RegistrationReasonId");

                    b.HasIndex("ReorgTypeId");

                    b.HasIndex("SizeId");

                    b.HasIndex("StartPeriod");

                    b.HasIndex("StatId");

                    b.HasIndex("UnitStatusId");

                    b.HasIndex("ShortName", "RegId", "StatId", "TaxRegId");

                    b.ToTable("EnterpriseUnits");
                });

            modelBuilder.Entity("nscreg.Data.Entities.ForeignParticipation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameLanguage1")
                        .HasColumnType("text");

                    b.Property<string>("NameLanguage2")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("ForeignParticipations");
                });

            modelBuilder.Entity("nscreg.Data.Entities.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int[]>("ActivityCategoryIds")
                        .HasColumnType("integer[]");

                    b.Property<int?>("AddressId")
                        .HasColumnType("integer");

                    b.Property<int>("ChangeReason")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<bool?>("Classified")
                        .HasColumnType("boolean");

                    b.Property<string>("DataSource")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("DataSourceClassificationId")
                        .HasColumnType("integer");

                    b.Property<string>("EditComment")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("Employees")
                        .HasColumnType("integer");

                    b.Property<int?>("EnterpriseGroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("EnterpriseUnitId")
                        .HasColumnType("integer");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ExternalIdType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("FreeEconZone")
                        .HasColumnType("boolean");

                    b.Property<int?>("LegalFormId")
                        .HasColumnType("integer");

                    b.Property<int?>("LegalUnitId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("LiqDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LiqReason")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("LocalUnitId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<int?>("NumOfPeopleEmp")
                        .HasColumnType("integer");

                    b.Property<int[]>("RegionIds")
                        .HasColumnType("integer[]");

                    b.Property<int?>("ReorgTypeId")
                        .HasColumnType("integer");

                    b.Property<int[]>("SectorCodeIds")
                        .HasColumnType("integer[]");

                    b.Property<string>("ShortName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("SizeId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("StartOn")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("StopOn")
                        .HasColumnType("date");

                    b.Property<string>("TaxRegId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TelephoneNo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("Turnover")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UnitStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("WebAddress")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("Name");

                    b.ToTable("History");
                });

            modelBuilder.Entity("nscreg.Data.Entities.LegalForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameLanguage1")
                        .HasColumnType("text");

                    b.Property<string>("NameLanguage2")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("LegalForms");
                });

            modelBuilder.Entity("nscreg.Data.Entities.LegalUnit", b =>
                {
                    b.Property<int>("RegId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RegId"));

                    b.Property<int?>("ActualAddressId")
                        .HasColumnType("integer");

                    b.Property<int?>("AddressId")
                        .HasColumnType("integer");

                    b.Property<int>("ChangeReason")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<bool?>("Classified")
                        .HasColumnType("boolean");

                    b.Property<string>("DataSource")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("DataSourceClassificationId")
                        .HasColumnType("integer");

                    b.Property<string>("EditComment")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("Employees")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("EmployeesDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("EmployeesYear")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("EndPeriod")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EntRegIdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("EnterpriseUnitRegId")
                        .HasColumnType("integer");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("ExternalIdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExternalIdType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ForeignCapitalCurrency")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ForeignCapitalCurrency");

                    b.Property<string>("ForeignCapitalShare")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ForeignCapitalShare");

                    b.Property<int?>("ForeignParticipationId")
                        .HasColumnType("integer");

                    b.Property<bool>("FreeEconZone")
                        .HasColumnType("boolean");

                    b.Property<int?>("InstSectorCodeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("LegalFormId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("LiqDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LiqReason")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool?>("Market")
                        .HasColumnType("boolean");

                    b.Property<string>("MunCapitalShare")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("MunCapitalShare");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int?>("NumOfPeopleEmp")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentOrgLink")
                        .HasColumnType("integer");

                    b.Property<int?>("PostalAddressId")
                        .HasColumnType("integer");

                    b.Property<string>("PrivCapitalShare")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("PrivCapitalShare");

                    b.Property<string>("RefNo")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTimeOffset>("RegIdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("RegistrationReasonId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("ReorgDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ReorgReferences")
                        .HasColumnType("integer");

                    b.Property<string>("ReorgTypeCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("ReorgTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("ShortName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("SizeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("StartPeriod")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StatId")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<DateTimeOffset?>("StatIdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StateCapitalShare")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("StateCapitalShare");

                    b.Property<DateTimeOffset?>("StatusDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("SuspensionEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("SuspensionStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("TaxRegDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TaxRegId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TelephoneNo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TotalCapital")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("TotalCapital");

                    b.Property<decimal?>("Turnover")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("TurnoverDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("TurnoverYear")
                        .HasColumnType("integer");

                    b.Property<int?>("UnitStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("WebAddress")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("RegId");

                    b.HasIndex("ActualAddressId");

                    b.HasIndex("AddressId");

                    b.HasIndex("DataSourceClassificationId");

                    b.HasIndex("EnterpriseUnitRegId");

                    b.HasIndex("ForeignParticipationId");

                    b.HasIndex("InstSectorCodeId");

                    b.HasIndex("LegalFormId");

                    b.HasIndex("Name");

                    b.HasIndex("PostalAddressId");

                    b.HasIndex("RegistrationReasonId");

                    b.HasIndex("ReorgTypeId");

                    b.HasIndex("SizeId");

                    b.HasIndex("StartPeriod");

                    b.HasIndex("StatId");

                    b.HasIndex("UnitStatusId");

                    b.HasIndex("ShortName", "RegId", "StatId", "TaxRegId");

                    b.ToTable("LegalUnits");
                });

            modelBuilder.Entity("nscreg.Data.Entities.LocalUnit", b =>
                {
                    b.Property<int>("RegId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RegId"));

                    b.Property<int?>("ActualAddressId")
                        .HasColumnType("integer");

                    b.Property<int?>("AddressId")
                        .HasColumnType("integer");

                    b.Property<int>("ChangeReason")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<bool?>("Classified")
                        .HasColumnType("boolean");

                    b.Property<string>("DataSource")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("DataSourceClassificationId")
                        .HasColumnType("integer");

                    b.Property<string>("EditComment")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("Employees")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("EmployeesDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("EmployeesYear")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("EndPeriod")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("ExternalIdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExternalIdType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("ForeignParticipationId")
                        .HasColumnType("integer");

                    b.Property<bool>("FreeEconZone")
                        .HasColumnType("boolean");

                    b.Property<int?>("InstSectorCodeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("LegalFormId")
                        .HasColumnType("integer");

                    b.Property<int?>("LegalUnitId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("LegalUnitIdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("LiqDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LiqReason")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int?>("NumOfPeopleEmp")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentOrgLink")
                        .HasColumnType("integer");

                    b.Property<int?>("PostalAddressId")
                        .HasColumnType("integer");

                    b.Property<string>("RefNo")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTimeOffset>("RegIdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("RegistrationReasonId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("ReorgDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ReorgReferences")
                        .HasColumnType("integer");

                    b.Property<string>("ReorgTypeCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("ReorgTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("ShortName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("SizeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("StartPeriod")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StatId")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<DateTimeOffset?>("StatIdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StatusDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("SuspensionEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("SuspensionStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("TaxRegDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TaxRegId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TelephoneNo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("Turnover")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("TurnoverDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("TurnoverYear")
                        .HasColumnType("integer");

                    b.Property<int?>("UnitStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("WebAddress")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("RegId");

                    b.HasIndex("ActualAddressId");

                    b.HasIndex("AddressId");

                    b.HasIndex("DataSourceClassificationId");

                    b.HasIndex("ForeignParticipationId");

                    b.HasIndex("InstSectorCodeId");

                    b.HasIndex("LegalFormId");

                    b.HasIndex("LegalUnitId");

                    b.HasIndex("Name");

                    b.HasIndex("PostalAddressId");

                    b.HasIndex("RegistrationReasonId");

                    b.HasIndex("ReorgTypeId");

                    b.HasIndex("SizeId");

                    b.HasIndex("StartPeriod");

                    b.HasIndex("StatId");

                    b.HasIndex("UnitStatusId");

                    b.HasIndex("ShortName", "RegId", "StatId", "TaxRegId");

                    b.ToTable("LocalUnits");
                });

            modelBuilder.Entity("nscreg.Data.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("GivenName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTimeOffset>("IdDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("PersonalId")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber1")
                        .HasColumnType("text");

                    b.Property<byte?>("Sex")
                        .HasColumnType("smallint");

                    b.Property<string>("Surname")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("GivenName", "Surname");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("nscreg.Data.Entities.PersonForUnit", b =>
                {
                    b.Property<int?>("EnterpriseUnitId")
                        .HasColumnType("integer");

                    b.Property<int?>("PersonId")
                        .HasColumnType("integer");

                    b.Property<int?>("EnterpriseGroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("LegalUnitId")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<int?>("LocalUnitId")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<int?>("PersonTypeId")
                        .HasColumnType("integer");

                    b.HasKey("EnterpriseUnitId", "PersonId");

                    b.HasIndex("EnterpriseGroupId");

                    b.HasIndex("EnterpriseUnitId");

                    b.HasIndex("HistoryId");

                    b.HasIndex("LegalUnitId");

                    b.HasIndex("LocalUnitId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PersonTypeId", "LocalUnitId", "LegalUnitId", "EnterpriseUnitId", "PersonId")
                        .IsUnique();

                    b.ToTable("PersonStatisticalUnits");
                });

            modelBuilder.Entity("nscreg.Data.Entities.PersonType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameLanguage1")
                        .HasColumnType("text");

                    b.Property<string>("NameLanguage2")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PersonTypes");
                });

            modelBuilder.Entity("nscreg.Data.Entities.PostalIndex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameLanguage1")
                        .HasColumnType("text");

                    b.Property<string>("NameLanguage2")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PostalIndices");
                });

            modelBuilder.Entity("nscreg.Data.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminstrativeCenter")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullPath")
                        .HasColumnType("text");

                    b.Property<string>("FullPathLanguage1")
                        .HasColumnType("text");

                    b.Property<string>("FullPathLanguage2")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameLanguage1")
                        .HasColumnType("text");

                    b.Property<string>("NameLanguage2")
                        .HasColumnType("text");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int?>("RegionLevel")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("nscreg.Data.Entities.RegistrationReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameLanguage1")
                        .HasColumnType("text");

                    b.Property<string>("NameLanguage2")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("RegistrationReasons");
                });

            modelBuilder.Entity("nscreg.Data.Entities.ReorgType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameLanguage1")
                        .HasColumnType("text");

                    b.Property<string>("NameLanguage2")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("ReorgTypes");
                });

            modelBuilder.Entity("nscreg.Data.Entities.ReportTree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ParentNodeId")
                        .HasColumnType("integer");

                    b.Property<int?>("ReportId")
                        .HasColumnType("integer");

                    b.Property<string>("ReportUrl")
                        .HasColumnType("text");

                    b.Property<string>("ResourceGroup")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ReportTree");
                });

            modelBuilder.Entity("nscreg.Data.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AccessToSystemFunctions")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("SqlWalletUser")
                        .HasColumnType("text");

                    b.Property<string>("StandardDataAccess")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.SampleFrame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("EditingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("GeneratedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Predicate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SampleFrames");
                });

            modelBuilder.Entity("nscreg.Data.Entities.SectorCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameLanguage1")
                        .HasColumnType("text");

                    b.Property<string>("NameLanguage2")
                        .HasColumnType("text");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("SectorCodes");
                });

            modelBuilder.Entity("nscreg.Data.Entities.StatUnitEnterprise_2021", b =>
                {
                    b.Property<string>("StatId")
                        .HasColumnType("text");

                    b.Property<string>("ActCat_2dig_code")
                        .HasColumnType("text");

                    b.Property<string>("ActCat_2dig_desc")
                        .HasColumnType("text");

                    b.Property<string>("ActCat_3dig_code")
                        .HasColumnType("text");

                    b.Property<string>("ActCat_3dig_desc")
                        .HasColumnType("text");

                    b.Property<string>("ActCat_section_code")
                        .HasColumnType("text");

                    b.Property<string>("ActCat_section_desc")
                        .HasColumnType("text");

                    b.Property<int?>("Employees")
                        .HasColumnType("integer");

                    b.Property<string>("InstSectorCode_level1")
                        .HasColumnType("text");

                    b.Property<string>("InstSectorCode_level1_desc")
                        .HasColumnType("text");

                    b.Property<string>("InstSectorCode_level2")
                        .HasColumnType("text");

                    b.Property<string>("InstSectorCode_level2_desc")
                        .HasColumnType("text");

                    b.Property<string>("LegalForm_code")
                        .HasColumnType("text");

                    b.Property<string>("LegalForm_desc")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("LiqDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("NumOfPeopleEmp")
                        .HasColumnType("integer");

                    b.Property<int?>("Oblast")
                        .HasColumnType("integer");

                    b.Property<int?>("Rayon")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("Sex")
                        .HasColumnType("boolean");

                    b.Property<int?>("SizeCode")
                        .HasColumnType("integer");

                    b.Property<string>("SizeDesc")
                        .HasColumnType("text");

                    b.Property<string>("StatusCode")
                        .HasColumnType("text");

                    b.Property<string>("StatusDesc")
                        .HasColumnType("text");

                    b.Property<decimal?>("Turnover")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("StatId");

                    b.ToTable((string)null);

                    b.ToView("V_StatUnitEnterprise_2021", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.StatUnitLocal_2021", b =>
                {
                    b.Property<string>("StatId")
                        .HasColumnType("text");

                    b.Property<string>("ActCat_2dig_code")
                        .HasColumnType("text");

                    b.Property<string>("ActCat_2dig_desc")
                        .HasColumnType("text");

                    b.Property<string>("ActCat_3dig_code")
                        .HasColumnType("text");

                    b.Property<string>("ActCat_3dig_desc")
                        .HasColumnType("text");

                    b.Property<string>("ActCat_section_code")
                        .HasColumnType("text");

                    b.Property<string>("ActCat_section_desc")
                        .HasColumnType("text");

                    b.Property<int?>("Employees")
                        .HasColumnType("integer");

                    b.Property<string>("InstSectorCode_level1")
                        .HasColumnType("text");

                    b.Property<string>("InstSectorCode_level1_desc")
                        .HasColumnType("text");

                    b.Property<string>("InstSectorCode_level2")
                        .HasColumnType("text");

                    b.Property<string>("InstSectorCode_level2_desc")
                        .HasColumnType("text");

                    b.Property<string>("LegalForm_code")
                        .HasColumnType("text");

                    b.Property<string>("LegalForm_desc")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("LiqDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("NumOfPeopleEmp")
                        .HasColumnType("integer");

                    b.Property<int?>("Oblast")
                        .HasColumnType("integer");

                    b.Property<int?>("Rayon")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("Sex")
                        .HasColumnType("boolean");

                    b.Property<int?>("SizeCode")
                        .HasColumnType("integer");

                    b.Property<string>("SizeDesc")
                        .HasColumnType("text");

                    b.Property<string>("StatusCode")
                        .HasColumnType("text");

                    b.Property<string>("StatusDesc")
                        .HasColumnType("text");

                    b.Property<decimal?>("Turnover")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("StatId");

                    b.ToTable((string)null);

                    b.ToView("V_StatUnitLocal_2021", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.StatUnitSearchView", b =>
                {
                    b.Property<int>("RegId")
                        .HasColumnType("integer");

                    b.Property<int?>("ActualAddressId")
                        .HasColumnType("integer");

                    b.Property<string>("ActualAddressPart1")
                        .HasColumnType("text");

                    b.Property<string>("ActualAddressPart2")
                        .HasColumnType("text");

                    b.Property<string>("ActualAddressPart3")
                        .HasColumnType("text");

                    b.Property<int?>("ActualAddressRegionId")
                        .HasColumnType("integer");

                    b.Property<int?>("AddressId")
                        .HasColumnType("integer");

                    b.Property<string>("AddressPart1")
                        .HasColumnType("text");

                    b.Property<string>("AddressPart2")
                        .HasColumnType("text");

                    b.Property<string>("AddressPart3")
                        .HasColumnType("text");

                    b.Property<int>("ChangeReason")
                        .HasColumnType("integer");

                    b.Property<int?>("DataSourceClassificationId")
                        .HasColumnType("integer");

                    b.Property<int?>("Employees")
                        .HasColumnType("integer");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("LegalFormId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("LiqDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LiqReason")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("RegionId")
                        .HasColumnType("integer");

                    b.Property<int?>("SectorCodeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("StartPeriod")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StatId")
                        .HasColumnType("text");

                    b.Property<string>("TaxRegId")
                        .HasColumnType("text");

                    b.Property<decimal?>("Turnover")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UnitType")
                        .HasColumnType("integer");

                    b.HasKey("RegId");

                    b.ToTable((string)null);

                    b.ToView("V_StatUnitSearch", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.UnitSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameLanguage1")
                        .HasColumnType("text");

                    b.Property<string>("NameLanguage2")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("UnitSizes");
                });

            modelBuilder.Entity("nscreg.Data.Entities.UnitStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameLanguage1")
                        .HasColumnType("text");

                    b.Property<string>("NameLanguage2")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("UnitStatuses");
                });

            modelBuilder.Entity("nscreg.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DataAccess")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("SuspensionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.UserRegion", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RegionId");

                    b.HasIndex("RegionId");

                    b.ToTable("UserRegions");
                });

            modelBuilder.Entity("nscreg.Data.Entities.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("nscreg.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("nscreg.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("nscreg.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("nscreg.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("nscreg.Data.Entities.Activity", b =>
                {
                    b.HasOne("nscreg.Data.Entities.ActivityCategory", "ActivityCategory")
                        .WithMany()
                        .HasForeignKey("ActivityCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("nscreg.Data.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityCategory");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("nscreg.Data.Entities.ActivityCategory", b =>
                {
                    b.HasOne("nscreg.Data.Entities.ActivityCategory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("nscreg.Data.Entities.ActivityCategoryUser", b =>
                {
                    b.HasOne("nscreg.Data.Entities.ActivityCategory", "ActivityCategory")
                        .WithMany("ActivityCategoryUsers")
                        .HasForeignKey("ActivityCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("nscreg.Data.Entities.User", "User")
                        .WithMany("ActivityCategoryUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("nscreg.Data.Entities.ActivityLegalUnit", b =>
                {
                    b.HasOne("nscreg.Data.Entities.Activity", "Activity")
                        .WithMany("ActivitiesUnits")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("nscreg.Data.Entities.EnterpriseUnit", null)
                        .WithMany("ActivitiesUnits")
                        .HasForeignKey("EnterpriseUnitRegId");

                    b.HasOne("nscreg.Data.Entities.History", null)
                        .WithMany("ActivitiesForLegalUnit")
                        .HasForeignKey("HistoryId");

                    b.HasOne("nscreg.Data.Entities.LocalUnit", null)
                        .WithMany("ActivitiesUnits")
                        .HasForeignKey("LocalUnitRegId");

                    b.HasOne("nscreg.Data.Entities.LegalUnit", "Unit")
                        .WithMany("ActivitiesUnits")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("nscreg.Data.Entities.Address", b =>
                {
                    b.HasOne("nscreg.Data.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("nscreg.Data.Entities.AnalysisLog", b =>
                {
                    b.HasOne("nscreg.Data.Entities.AnalysisQueue", "AnalysisQueue")
                        .WithMany("AnalysisLogs")
                        .HasForeignKey("AnalysisQueueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnalysisQueue");
                });

            modelBuilder.Entity("nscreg.Data.Entities.AnalysisQueue", b =>
                {
                    b.HasOne("nscreg.Data.Entities.User", "User")
                        .WithMany("AnalysisQueues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("nscreg.Data.Entities.CountryForUnit", b =>
                {
                    b.HasOne("nscreg.Data.Entities.Country", "Country")
                        .WithMany("CountriesUnits")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("nscreg.Data.Entities.EnterpriseGroup", "EnterpriseGroup")
                        .WithMany()
                        .HasForeignKey("EnterpriseGroupId");

                    b.HasOne("nscreg.Data.Entities.EnterpriseUnit", "EnterpriseUnit")
                        .WithMany("ForeignParticipationCountriesUnits")
                        .HasForeignKey("EnterpriseUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("nscreg.Data.Entities.LegalUnit", "LegalUnit")
                        .WithMany("ForeignParticipationCountriesUnits")
                        .HasForeignKey("LegalUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("nscreg.Data.Entities.LocalUnit", "LocalUnit")
                        .WithMany("ForeignParticipationCountriesUnits")
                        .HasForeignKey("LocalUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("EnterpriseGroup");

                    b.Navigation("EnterpriseUnit");

                    b.Navigation("LegalUnit");

                    b.Navigation("LocalUnit");
                });

            modelBuilder.Entity("nscreg.Data.Entities.DataSource", b =>
                {
                    b.HasOne("nscreg.Data.Entities.User", "User")
                        .WithMany("DataSources")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("nscreg.Data.Entities.DataSourceQueue", b =>
                {
                    b.HasOne("nscreg.Data.Entities.DataSource", "DataSource")
                        .WithMany("DataSourceQueuedUploads")
                        .HasForeignKey("DataSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("nscreg.Data.Entities.User", "User")
                        .WithMany("DataSourceQueues")
                        .HasForeignKey("UserId");

                    b.Navigation("DataSource");

                    b.Navigation("User");
                });

            modelBuilder.Entity("nscreg.Data.Entities.DataUploadingLog", b =>
                {
                    b.HasOne("nscreg.Data.Entities.DataSourceQueue", "DataSourceQueue")
                        .WithMany("DataUploadingLogs")
                        .HasForeignKey("DataSourceQueueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataSourceQueue");
                });

            modelBuilder.Entity("nscreg.Data.Entities.EnterpriseGroup", b =>
                {
                    b.HasOne("nscreg.Data.Entities.Address", "ActualAddress")
                        .WithMany()
                        .HasForeignKey("ActualAddressId");

                    b.HasOne("nscreg.Data.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("nscreg.Data.Entities.DataSourceClassification", "DataSourceClassification")
                        .WithMany()
                        .HasForeignKey("DataSourceClassificationId");

                    b.HasOne("nscreg.Data.Entities.EnterpriseGroupType", "EntGroupType")
                        .WithMany("EnterpriseGroups")
                        .HasForeignKey("EntGroupTypeId");

                    b.HasOne("nscreg.Data.Entities.ForeignParticipation", "ForeignParticipation")
                        .WithMany()
                        .HasForeignKey("ForeignParticipationId");

                    b.HasOne("nscreg.Data.Entities.Address", "PostalAddress")
                        .WithMany()
                        .HasForeignKey("PostalAddressId");

                    b.HasOne("nscreg.Data.Entities.RegistrationReason", "RegistrationReason")
                        .WithMany()
                        .HasForeignKey("RegistrationReasonId");

                    b.HasOne("nscreg.Data.Entities.ReorgType", "ReorgType")
                        .WithMany()
                        .HasForeignKey("ReorgTypeId");

                    b.HasOne("nscreg.Data.Entities.UnitSize", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId");

                    b.HasOne("nscreg.Data.Entities.UnitStatus", "UnitStatus")
                        .WithMany()
                        .HasForeignKey("UnitStatusId");

                    b.Navigation("ActualAddress");

                    b.Navigation("Address");

                    b.Navigation("DataSourceClassification");

                    b.Navigation("EntGroupType");

                    b.Navigation("ForeignParticipation");

                    b.Navigation("PostalAddress");

                    b.Navigation("RegistrationReason");

                    b.Navigation("ReorgType");

                    b.Navigation("Size");

                    b.Navigation("UnitStatus");
                });

            modelBuilder.Entity("nscreg.Data.Entities.EnterpriseUnit", b =>
                {
                    b.HasOne("nscreg.Data.Entities.Address", "ActualAddress")
                        .WithMany()
                        .HasForeignKey("ActualAddressId");

                    b.HasOne("nscreg.Data.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("nscreg.Data.Entities.DataSourceClassification", "DataSourceClassification")
                        .WithMany()
                        .HasForeignKey("DataSourceClassificationId");

                    b.HasOne("nscreg.Data.Entities.EnterpriseGroupRole", "EntGroupRole")
                        .WithMany("EnterpriseUnits")
                        .HasForeignKey("EntGroupRoleId");

                    b.HasOne("nscreg.Data.Entities.EnterpriseGroup", "EnterpriseGroup")
                        .WithMany("EnterpriseUnits")
                        .HasForeignKey("EnterpriseGroupId");

                    b.HasOne("nscreg.Data.Entities.ForeignParticipation", "ForeignParticipation")
                        .WithMany()
                        .HasForeignKey("ForeignParticipationId");

                    b.HasOne("nscreg.Data.Entities.SectorCode", "InstSectorCode")
                        .WithMany()
                        .HasForeignKey("InstSectorCodeId");

                    b.HasOne("nscreg.Data.Entities.LegalForm", "LegalForm")
                        .WithMany()
                        .HasForeignKey("LegalFormId");

                    b.HasOne("nscreg.Data.Entities.Address", "PostalAddress")
                        .WithMany()
                        .HasForeignKey("PostalAddressId");

                    b.HasOne("nscreg.Data.Entities.RegistrationReason", "RegistrationReason")
                        .WithMany()
                        .HasForeignKey("RegistrationReasonId");

                    b.HasOne("nscreg.Data.Entities.ReorgType", "ReorgType")
                        .WithMany()
                        .HasForeignKey("ReorgTypeId");

                    b.HasOne("nscreg.Data.Entities.UnitSize", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId");

                    b.HasOne("nscreg.Data.Entities.UnitStatus", "UnitStatus")
                        .WithMany()
                        .HasForeignKey("UnitStatusId");

                    b.Navigation("ActualAddress");

                    b.Navigation("Address");

                    b.Navigation("DataSourceClassification");

                    b.Navigation("EntGroupRole");

                    b.Navigation("EnterpriseGroup");

                    b.Navigation("ForeignParticipation");

                    b.Navigation("InstSectorCode");

                    b.Navigation("LegalForm");

                    b.Navigation("PostalAddress");

                    b.Navigation("RegistrationReason");

                    b.Navigation("ReorgType");

                    b.Navigation("Size");

                    b.Navigation("UnitStatus");
                });

            modelBuilder.Entity("nscreg.Data.Entities.History", b =>
                {
                    b.HasOne("nscreg.Data.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("nscreg.Data.Entities.LegalUnit", b =>
                {
                    b.HasOne("nscreg.Data.Entities.Address", "ActualAddress")
                        .WithMany()
                        .HasForeignKey("ActualAddressId");

                    b.HasOne("nscreg.Data.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("nscreg.Data.Entities.DataSourceClassification", "DataSourceClassification")
                        .WithMany()
                        .HasForeignKey("DataSourceClassificationId");

                    b.HasOne("nscreg.Data.Entities.EnterpriseUnit", "EnterpriseUnit")
                        .WithMany("LegalUnits")
                        .HasForeignKey("EnterpriseUnitRegId");

                    b.HasOne("nscreg.Data.Entities.ForeignParticipation", "ForeignParticipation")
                        .WithMany()
                        .HasForeignKey("ForeignParticipationId");

                    b.HasOne("nscreg.Data.Entities.SectorCode", "InstSectorCode")
                        .WithMany()
                        .HasForeignKey("InstSectorCodeId");

                    b.HasOne("nscreg.Data.Entities.LegalForm", "LegalForm")
                        .WithMany()
                        .HasForeignKey("LegalFormId");

                    b.HasOne("nscreg.Data.Entities.Address", "PostalAddress")
                        .WithMany()
                        .HasForeignKey("PostalAddressId");

                    b.HasOne("nscreg.Data.Entities.RegistrationReason", "RegistrationReason")
                        .WithMany()
                        .HasForeignKey("RegistrationReasonId");

                    b.HasOne("nscreg.Data.Entities.ReorgType", "ReorgType")
                        .WithMany()
                        .HasForeignKey("ReorgTypeId");

                    b.HasOne("nscreg.Data.Entities.UnitSize", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId");

                    b.HasOne("nscreg.Data.Entities.UnitStatus", "UnitStatus")
                        .WithMany()
                        .HasForeignKey("UnitStatusId");

                    b.Navigation("ActualAddress");

                    b.Navigation("Address");

                    b.Navigation("DataSourceClassification");

                    b.Navigation("EnterpriseUnit");

                    b.Navigation("ForeignParticipation");

                    b.Navigation("InstSectorCode");

                    b.Navigation("LegalForm");

                    b.Navigation("PostalAddress");

                    b.Navigation("RegistrationReason");

                    b.Navigation("ReorgType");

                    b.Navigation("Size");

                    b.Navigation("UnitStatus");
                });

            modelBuilder.Entity("nscreg.Data.Entities.LocalUnit", b =>
                {
                    b.HasOne("nscreg.Data.Entities.Address", "ActualAddress")
                        .WithMany()
                        .HasForeignKey("ActualAddressId");

                    b.HasOne("nscreg.Data.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("nscreg.Data.Entities.DataSourceClassification", "DataSourceClassification")
                        .WithMany()
                        .HasForeignKey("DataSourceClassificationId");

                    b.HasOne("nscreg.Data.Entities.ForeignParticipation", "ForeignParticipation")
                        .WithMany()
                        .HasForeignKey("ForeignParticipationId");

                    b.HasOne("nscreg.Data.Entities.SectorCode", "InstSectorCode")
                        .WithMany()
                        .HasForeignKey("InstSectorCodeId");

                    b.HasOne("nscreg.Data.Entities.LegalForm", "LegalForm")
                        .WithMany()
                        .HasForeignKey("LegalFormId");

                    b.HasOne("nscreg.Data.Entities.LegalUnit", "LegalUnit")
                        .WithMany("LocalUnits")
                        .HasForeignKey("LegalUnitId");

                    b.HasOne("nscreg.Data.Entities.Address", "PostalAddress")
                        .WithMany()
                        .HasForeignKey("PostalAddressId");

                    b.HasOne("nscreg.Data.Entities.RegistrationReason", "RegistrationReason")
                        .WithMany()
                        .HasForeignKey("RegistrationReasonId");

                    b.HasOne("nscreg.Data.Entities.ReorgType", "ReorgType")
                        .WithMany()
                        .HasForeignKey("ReorgTypeId");

                    b.HasOne("nscreg.Data.Entities.UnitSize", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId");

                    b.HasOne("nscreg.Data.Entities.UnitStatus", "UnitStatus")
                        .WithMany()
                        .HasForeignKey("UnitStatusId");

                    b.Navigation("ActualAddress");

                    b.Navigation("Address");

                    b.Navigation("DataSourceClassification");

                    b.Navigation("ForeignParticipation");

                    b.Navigation("InstSectorCode");

                    b.Navigation("LegalForm");

                    b.Navigation("LegalUnit");

                    b.Navigation("PostalAddress");

                    b.Navigation("RegistrationReason");

                    b.Navigation("ReorgType");

                    b.Navigation("Size");

                    b.Navigation("UnitStatus");
                });

            modelBuilder.Entity("nscreg.Data.Entities.Person", b =>
                {
                    b.HasOne("nscreg.Data.Entities.Country", "NationalityCode")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("NationalityCode");
                });

            modelBuilder.Entity("nscreg.Data.Entities.PersonForUnit", b =>
                {
                    b.HasOne("nscreg.Data.Entities.EnterpriseGroup", "EnterpriseGroup")
                        .WithMany("PersonsUnits")
                        .HasForeignKey("EnterpriseGroupId");

                    b.HasOne("nscreg.Data.Entities.EnterpriseUnit", "EnterpriseUnit")
                        .WithMany("PersonsUnits")
                        .HasForeignKey("EnterpriseUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("nscreg.Data.Entities.History", null)
                        .WithMany("PersonsForUnit")
                        .HasForeignKey("HistoryId");

                    b.HasOne("nscreg.Data.Entities.LegalUnit", "LegalUnit")
                        .WithMany("PersonsUnits")
                        .HasForeignKey("LegalUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("nscreg.Data.Entities.LocalUnit", "LocalUnit")
                        .WithMany("PersonsUnits")
                        .HasForeignKey("LocalUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("nscreg.Data.Entities.Person", "Person")
                        .WithMany("PersonsUnits")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("nscreg.Data.Entities.PersonType", "PersonType")
                        .WithMany()
                        .HasForeignKey("PersonTypeId");

                    b.Navigation("EnterpriseGroup");

                    b.Navigation("EnterpriseUnit");

                    b.Navigation("LegalUnit");

                    b.Navigation("LocalUnit");

                    b.Navigation("Person");

                    b.Navigation("PersonType");
                });

            modelBuilder.Entity("nscreg.Data.Entities.Region", b =>
                {
                    b.HasOne("nscreg.Data.Entities.Region", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("nscreg.Data.Entities.SampleFrame", b =>
                {
                    b.HasOne("nscreg.Data.Entities.User", "User")
                        .WithMany("SampleFrames")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("nscreg.Data.Entities.SectorCode", b =>
                {
                    b.HasOne("nscreg.Data.Entities.SectorCode", "Parent")
                        .WithMany("SectorCodes")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("nscreg.Data.Entities.UserRegion", b =>
                {
                    b.HasOne("nscreg.Data.Entities.Region", "Region")
                        .WithMany("UserRegions")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("nscreg.Data.Entities.User", "User")
                        .WithMany("UserRegions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");

                    b.Navigation("User");
                });

            modelBuilder.Entity("nscreg.Data.Entities.UserRole", b =>
                {
                    b.HasOne("nscreg.Data.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("nscreg.Data.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("nscreg.Data.Entities.Activity", b =>
                {
                    b.Navigation("ActivitiesUnits");
                });

            modelBuilder.Entity("nscreg.Data.Entities.ActivityCategory", b =>
                {
                    b.Navigation("ActivityCategoryUsers");

                    b.Navigation("Children");
                });

            modelBuilder.Entity("nscreg.Data.Entities.AnalysisQueue", b =>
                {
                    b.Navigation("AnalysisLogs");
                });

            modelBuilder.Entity("nscreg.Data.Entities.Country", b =>
                {
                    b.Navigation("CountriesUnits");
                });

            modelBuilder.Entity("nscreg.Data.Entities.DataSource", b =>
                {
                    b.Navigation("DataSourceQueuedUploads");
                });

            modelBuilder.Entity("nscreg.Data.Entities.DataSourceQueue", b =>
                {
                    b.Navigation("DataUploadingLogs");
                });

            modelBuilder.Entity("nscreg.Data.Entities.EnterpriseGroup", b =>
                {
                    b.Navigation("EnterpriseUnits");

                    b.Navigation("PersonsUnits");
                });

            modelBuilder.Entity("nscreg.Data.Entities.EnterpriseGroupRole", b =>
                {
                    b.Navigation("EnterpriseUnits");
                });

            modelBuilder.Entity("nscreg.Data.Entities.EnterpriseGroupType", b =>
                {
                    b.Navigation("EnterpriseGroups");
                });

            modelBuilder.Entity("nscreg.Data.Entities.EnterpriseUnit", b =>
                {
                    b.Navigation("ActivitiesUnits");

                    b.Navigation("ForeignParticipationCountriesUnits");

                    b.Navigation("LegalUnits");

                    b.Navigation("PersonsUnits");
                });

            modelBuilder.Entity("nscreg.Data.Entities.History", b =>
                {
                    b.Navigation("ActivitiesForLegalUnit");

                    b.Navigation("PersonsForUnit");
                });

            modelBuilder.Entity("nscreg.Data.Entities.LegalUnit", b =>
                {
                    b.Navigation("ActivitiesUnits");

                    b.Navigation("ForeignParticipationCountriesUnits");

                    b.Navigation("LocalUnits");

                    b.Navigation("PersonsUnits");
                });

            modelBuilder.Entity("nscreg.Data.Entities.LocalUnit", b =>
                {
                    b.Navigation("ActivitiesUnits");

                    b.Navigation("ForeignParticipationCountriesUnits");

                    b.Navigation("PersonsUnits");
                });

            modelBuilder.Entity("nscreg.Data.Entities.Person", b =>
                {
                    b.Navigation("PersonsUnits");
                });

            modelBuilder.Entity("nscreg.Data.Entities.Region", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("UserRegions");
                });

            modelBuilder.Entity("nscreg.Data.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("nscreg.Data.Entities.SectorCode", b =>
                {
                    b.Navigation("SectorCodes");
                });

            modelBuilder.Entity("nscreg.Data.Entities.User", b =>
                {
                    b.Navigation("ActivityCategoryUsers");

                    b.Navigation("AnalysisQueues");

                    b.Navigation("DataSourceQueues");

                    b.Navigation("DataSources");

                    b.Navigation("SampleFrames");

                    b.Navigation("UserRegions");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
