// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using nscreg.Data;

#nullable disable

namespace nscreg.Data.Migrations
{
    [DbContext(typeof(NSCRegDbContext))]
    [Migration("20230928103208_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("activity_category_id");

                    b.Property<int>("ActivityType")
                        .HasColumnType("integer")
                        .HasColumnName("activity_type");

                    b.Property<int?>("ActivityYear")
                        .HasColumnType("integer")
                        .HasColumnName("activity_year");

                    b.Property<int?>("Employees")
                        .HasColumnType("integer")
                        .HasColumnName("employees");

                    b.Property<DateTimeOffset>("IdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("id_date");

                    b.Property<decimal?>("Turnover")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("turnover");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_activity");

                    b.HasIndex("ActivityCategoryId")
                        .HasDatabaseName("ix_activity_activity_category_id");

                    b.HasIndex("UpdatedBy")
                        .HasDatabaseName("ix_activity_updated_by");

                    b.ToTable("activity", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.ActivityCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActivityCategoryLevel")
                        .HasColumnType("integer")
                        .HasColumnName("activity_category_level");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code");

                    b.Property<int?>("DicParentId")
                        .HasColumnType("integer")
                        .HasColumnName("dic_parent_id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameLanguage1")
                        .HasColumnType("text")
                        .HasColumnName("name_language1");

                    b.Property<string>("NameLanguage2")
                        .HasColumnType("text")
                        .HasColumnName("name_language2");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("section");

                    b.Property<int>("VersionId")
                        .HasColumnType("integer")
                        .HasColumnName("version_id");

                    b.HasKey("Id")
                        .HasName("pk_activity_category");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_activity_category_code");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_activity_category_parent_id");

                    b.ToTable("activity_category", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.ActivityCategoryUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<int>("ActivityCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("activity_category_id");

                    b.HasKey("UserId", "ActivityCategoryId")
                        .HasName("pk_activity_category_user");

                    b.HasIndex("ActivityCategoryId")
                        .HasDatabaseName("ix_activity_category_user_activity_category_id");

                    b.ToTable("activity_category_user", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.ActivityLegalUnit", b =>
                {
                    b.Property<int>("UnitId")
                        .HasColumnType("integer")
                        .HasColumnName("unit_id");

                    b.Property<int>("ActivityId")
                        .HasColumnType("integer")
                        .HasColumnName("activity_id");

                    b.Property<int?>("EnterpriseUnitRegId")
                        .HasColumnType("integer")
                        .HasColumnName("enterprise_unit_reg_id");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("integer")
                        .HasColumnName("history_id");

                    b.Property<int?>("LocalUnitRegId")
                        .HasColumnType("integer")
                        .HasColumnName("local_unit_reg_id");

                    b.HasKey("UnitId", "ActivityId")
                        .HasName("pk_activity_legal_unit");

                    b.HasIndex("ActivityId")
                        .HasDatabaseName("ix_activity_legal_unit_activity_id");

                    b.HasIndex("EnterpriseUnitRegId")
                        .HasDatabaseName("ix_activity_legal_unit_enterprise_unit_reg_id");

                    b.HasIndex("HistoryId")
                        .HasDatabaseName("ix_activity_legal_unit_history_id");

                    b.HasIndex("LocalUnitRegId")
                        .HasDatabaseName("ix_activity_legal_unit_local_unit_reg_id");

                    b.HasIndex("UnitId")
                        .HasDatabaseName("ix_activity_legal_unit_unit_id");

                    b.ToTable("activity_legal_unit", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressPart1")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("address_part1");

                    b.Property<string>("AddressPart2")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("address_part2");

                    b.Property<string>("AddressPart3")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("address_part3");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer")
                        .HasColumnName("region_id");

                    b.HasKey("Id")
                        .HasName("pk_address");

                    b.HasIndex("RegionId")
                        .HasDatabaseName("ix_address_region_id");

                    b.HasIndex("AddressPart1", "AddressPart2", "AddressPart3", "RegionId", "Latitude", "Longitude")
                        .HasDatabaseName("ix_address_address_part1_address_part2_address_part3_region_id");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.AnalysisLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnalysisQueueId")
                        .HasColumnType("integer")
                        .HasColumnName("analysis_queue_id");

                    b.Property<int>("AnalyzedUnitId")
                        .HasColumnType("integer")
                        .HasColumnName("analyzed_unit_id");

                    b.Property<int>("AnalyzedUnitType")
                        .HasColumnType("integer")
                        .HasColumnName("analyzed_unit_type");

                    b.Property<string>("ErrorValues")
                        .HasColumnType("text")
                        .HasColumnName("error_values");

                    b.Property<DateTimeOffset>("IssuedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("issued_at");

                    b.Property<DateTimeOffset?>("ResolvedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("resolved_at");

                    b.Property<string>("SummaryMessages")
                        .HasColumnType("text")
                        .HasColumnName("summary_messages");

                    b.HasKey("Id")
                        .HasName("pk_analysis_log");

                    b.HasIndex("AnalysisQueueId", "AnalyzedUnitId")
                        .HasDatabaseName("ix_analysis_log_analysis_queue_id_analyzed_unit_id");

                    b.ToTable("analysis_log", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.AnalysisQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTimeOffset?>("ServerEndPeriod")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("server_end_period");

                    b.Property<DateTimeOffset?>("ServerStartPeriod")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("server_start_period");

                    b.Property<DateTimeOffset>("UserEndPeriod")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("user_end_period");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<DateTimeOffset>("UserStartPeriod")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("user_start_period");

                    b.HasKey("Id")
                        .HasName("pk_analysis_queue");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_analysis_queue_user_id");

                    b.ToTable("analysis_queue", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("IsoCode")
                        .HasColumnType("text")
                        .HasColumnName("iso_code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameLanguage1")
                        .HasColumnType("text")
                        .HasColumnName("name_language1");

                    b.Property<string>("NameLanguage2")
                        .HasColumnType("text")
                        .HasColumnName("name_language2");

                    b.HasKey("Id")
                        .HasName("pk_country");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_country_code");

                    b.ToTable("country", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.CountryForUnit", b =>
                {
                    b.Property<int?>("EnterpriseUnitId")
                        .HasColumnType("integer")
                        .HasColumnName("enterprise_unit_id");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<int?>("EnterpriseGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("enterprise_group_id");

                    b.Property<int?>("LegalUnitId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("legal_unit_id");

                    b.Property<int?>("LocalUnitId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("local_unit_id");

                    b.HasKey("EnterpriseUnitId", "CountryId")
                        .HasName("pk_country_for_unit");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_country_for_unit_country_id");

                    b.HasIndex("EnterpriseGroupId")
                        .HasDatabaseName("ix_country_for_unit_enterprise_group_id");

                    b.HasIndex("LegalUnitId")
                        .HasDatabaseName("ix_country_for_unit_legal_unit_id");

                    b.HasIndex("LocalUnitId")
                        .HasDatabaseName("ix_country_for_unit_local_unit_id");

                    b.ToTable("country_for_unit", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.CustomAnalysisCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.Property<string>("Query")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("query");

                    b.Property<string>("TargetUnitTypes")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("target_unit_types");

                    b.HasKey("Id")
                        .HasName("pk_custom_analysis_check");

                    b.ToTable("custom_analysis_check", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.DataSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AllowedOperations")
                        .HasColumnType("integer")
                        .HasColumnName("allowed_operations");

                    b.Property<string>("AttributesToCheck")
                        .HasColumnType("text")
                        .HasColumnName("attributes_to_check");

                    b.Property<string>("CsvDelimiter")
                        .HasColumnType("text")
                        .HasColumnName("csv_delimiter");

                    b.Property<int>("CsvSkipCount")
                        .HasColumnType("integer")
                        .HasColumnName("csv_skip_count");

                    b.Property<int>("DataSourceUploadType")
                        .HasColumnType("integer")
                        .HasColumnName("data_source_upload_type");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("OriginalCsvAttributes")
                        .HasColumnType("text")
                        .HasColumnName("original_csv_attributes");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<string>("Restrictions")
                        .HasColumnType("text")
                        .HasColumnName("restrictions");

                    b.Property<int>("StatUnitType")
                        .HasColumnType("integer")
                        .HasColumnName("stat_unit_type");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("VariablesMapping")
                        .HasColumnType("text")
                        .HasColumnName("variables_mapping");

                    b.HasKey("Id")
                        .HasName("pk_data_source");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_data_source_name");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_data_source_user_id");

                    b.ToTable("data_source", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.DataSourceClassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameLanguage1")
                        .HasColumnType("text")
                        .HasColumnName("name_language1");

                    b.Property<string>("NameLanguage2")
                        .HasColumnType("text")
                        .HasColumnName("name_language2");

                    b.HasKey("Id")
                        .HasName("pk_data_source_classification");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_data_source_classification_code");

                    b.ToTable("data_source_classification", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.DataSourceQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DataSourceFileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data_source_file_name");

                    b.Property<int>("DataSourceId")
                        .HasColumnType("integer")
                        .HasColumnName("data_source_id");

                    b.Property<string>("DataSourcePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data_source_path");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset?>("EndImportDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_import_date");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<int>("SkipLinesCount")
                        .HasColumnType("integer")
                        .HasColumnName("skip_lines_count");

                    b.Property<DateTimeOffset?>("StartImportDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_import_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_data_source_queue");

                    b.HasIndex("DataSourceId")
                        .HasDatabaseName("ix_data_source_queue_data_source_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_data_source_queue_user_id");

                    b.ToTable("data_source_queue", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.DataUploadingLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DataSourceQueueId")
                        .HasColumnType("integer")
                        .HasColumnName("data_source_queue_id");

                    b.Property<DateTimeOffset?>("EndImportDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_import_date");

                    b.Property<string>("Errors")
                        .HasColumnType("text")
                        .HasColumnName("errors");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<string>("SerializedRawUnit")
                        .HasColumnType("text")
                        .HasColumnName("serialized_raw_unit");

                    b.Property<string>("SerializedUnit")
                        .HasColumnType("text")
                        .HasColumnName("serialized_unit");

                    b.Property<DateTimeOffset?>("StartImportDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_import_date");

                    b.Property<string>("StatUnitName")
                        .HasColumnType("text")
                        .HasColumnName("stat_unit_name");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Summary")
                        .HasColumnType("text")
                        .HasColumnName("summary");

                    b.Property<string>("TargetStatId")
                        .HasColumnType("text")
                        .HasColumnName("target_stat_id");

                    b.HasKey("Id")
                        .HasName("pk_data_uploading_log");

                    b.HasIndex("DataSourceQueueId")
                        .HasDatabaseName("ix_data_uploading_log_data_source_queue_id");

                    b.ToTable("data_uploading_log", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.DictionaryVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("VersionId")
                        .HasColumnType("integer")
                        .HasColumnName("version_id");

                    b.Property<string>("VersionName")
                        .HasColumnType("text")
                        .HasColumnName("version_name");

                    b.HasKey("Id")
                        .HasName("pk_dictionary_version");

                    b.ToTable("dictionary_version", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.EnterpriseGroup", b =>
                {
                    b.Property<int>("RegId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("reg_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RegId"));

                    b.Property<int?>("ActualAddressId")
                        .HasColumnType("integer")
                        .HasColumnName("actual_address_id");

                    b.Property<int?>("AddressId")
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    b.Property<int>("ChangeReason")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("change_reason");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("text")
                        .HasColumnName("contact_person");

                    b.Property<string>("DataSource")
                        .HasColumnType("text")
                        .HasColumnName("data_source");

                    b.Property<int?>("DataSourceClassificationId")
                        .HasColumnType("integer")
                        .HasColumnName("data_source_classification_id");

                    b.Property<string>("EditComment")
                        .HasColumnType("text")
                        .HasColumnName("edit_comment");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("text")
                        .HasColumnName("email_address");

                    b.Property<int?>("Employees")
                        .HasColumnType("integer")
                        .HasColumnName("employees");

                    b.Property<DateTimeOffset?>("EmployeesDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("employees_date");

                    b.Property<int?>("EmployeesYear")
                        .HasColumnType("integer")
                        .HasColumnName("employees_year");

                    b.Property<DateTimeOffset>("EndPeriod")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_period");

                    b.Property<int?>("EntGroupTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("ent_group_type_id");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text")
                        .HasColumnName("external_id");

                    b.Property<DateTimeOffset?>("ExternalIdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("external_id_date");

                    b.Property<string>("ExternalIdType")
                        .HasColumnType("text")
                        .HasColumnName("external_id_type");

                    b.Property<int?>("ForeignParticipationId")
                        .HasColumnType("integer")
                        .HasColumnName("foreign_participation_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LiqDateEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("liq_date_end");

                    b.Property<DateTimeOffset?>("LiqDateStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("liq_date_start");

                    b.Property<string>("LiqReason")
                        .HasColumnType("text")
                        .HasColumnName("liq_reason");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int?>("NumOfPeopleEmp")
                        .HasColumnType("integer")
                        .HasColumnName("num_of_people_emp");

                    b.Property<int?>("PostalAddressId")
                        .HasColumnType("integer")
                        .HasColumnName("postal_address_id");

                    b.Property<DateTimeOffset>("RegIdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reg_id_date");

                    b.Property<DateTimeOffset>("RegistrationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registration_date");

                    b.Property<int?>("RegistrationReasonId")
                        .HasColumnType("integer")
                        .HasColumnName("registration_reason_id");

                    b.Property<DateTimeOffset?>("ReorgDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reorg_date");

                    b.Property<string>("ReorgReferences")
                        .HasColumnType("text")
                        .HasColumnName("reorg_references");

                    b.Property<string>("ReorgTypeCode")
                        .HasColumnType("text")
                        .HasColumnName("reorg_type_code");

                    b.Property<int?>("ReorgTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("reorg_type_id");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.Property<int?>("SizeId")
                        .HasColumnType("integer")
                        .HasColumnName("size_id");

                    b.Property<DateTimeOffset>("StartPeriod")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_period");

                    b.Property<string>("StatId")
                        .HasColumnType("text")
                        .HasColumnName("stat_id");

                    b.Property<DateTimeOffset?>("StatIdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("stat_id_date");

                    b.Property<DateTimeOffset>("StatusDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("status_date");

                    b.Property<string>("SuspensionEnd")
                        .HasColumnType("text")
                        .HasColumnName("suspension_end");

                    b.Property<string>("SuspensionStart")
                        .HasColumnType("text")
                        .HasColumnName("suspension_start");

                    b.Property<DateTimeOffset?>("TaxRegDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("tax_reg_date");

                    b.Property<string>("TaxRegId")
                        .HasColumnType("text")
                        .HasColumnName("tax_reg_id");

                    b.Property<string>("TelephoneNo")
                        .HasColumnType("text")
                        .HasColumnName("telephone_no");

                    b.Property<decimal?>("Turnover")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("turnover");

                    b.Property<DateTimeOffset?>("TurnoverDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("turnover_date");

                    b.Property<int?>("TurnoverYear")
                        .HasColumnType("integer")
                        .HasColumnName("turnover_year");

                    b.Property<int?>("UnitStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("unit_status_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("WebAddress")
                        .HasColumnType("text")
                        .HasColumnName("web_address");

                    b.HasKey("RegId")
                        .HasName("pk_enterprise_group");

                    b.HasIndex("ActualAddressId")
                        .HasDatabaseName("ix_enterprise_group_actual_address_id");

                    b.HasIndex("AddressId")
                        .HasDatabaseName("ix_enterprise_group_address_id");

                    b.HasIndex("DataSourceClassificationId")
                        .HasDatabaseName("ix_enterprise_group_data_source_classification_id");

                    b.HasIndex("EntGroupTypeId")
                        .HasDatabaseName("ix_enterprise_group_ent_group_type_id");

                    b.HasIndex("ForeignParticipationId")
                        .HasDatabaseName("ix_enterprise_group_foreign_participation_id");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_enterprise_group_name");

                    b.HasIndex("PostalAddressId")
                        .HasDatabaseName("ix_enterprise_group_postal_address_id");

                    b.HasIndex("RegistrationReasonId")
                        .HasDatabaseName("ix_enterprise_group_registration_reason_id");

                    b.HasIndex("ReorgTypeId")
                        .HasDatabaseName("ix_enterprise_group_reorg_type_id");

                    b.HasIndex("SizeId")
                        .HasDatabaseName("ix_enterprise_group_size_id");

                    b.HasIndex("StartPeriod")
                        .HasDatabaseName("ix_enterprise_group_start_period");

                    b.HasIndex("UnitStatusId")
                        .HasDatabaseName("ix_enterprise_group_unit_status_id");

                    b.ToTable("enterprise_group", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.EnterpriseGroupRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameLanguage1")
                        .HasColumnType("text")
                        .HasColumnName("name_language1");

                    b.Property<string>("NameLanguage2")
                        .HasColumnType("text")
                        .HasColumnName("name_language2");

                    b.HasKey("Id")
                        .HasName("pk_enterprise_group_role");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_enterprise_group_role_code");

                    b.ToTable("enterprise_group_role", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.EnterpriseGroupType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameLanguage1")
                        .HasColumnType("text")
                        .HasColumnName("name_language1");

                    b.Property<string>("NameLanguage2")
                        .HasColumnType("text")
                        .HasColumnName("name_language2");

                    b.HasKey("Id")
                        .HasName("pk_enterprise_group_type");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_enterprise_group_type_code");

                    b.ToTable("enterprise_group_type", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.EnterpriseUnit", b =>
                {
                    b.Property<int>("RegId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("reg_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RegId"));

                    b.Property<int?>("ActualAddressId")
                        .HasColumnType("integer")
                        .HasColumnName("actual_address_id");

                    b.Property<int?>("AddressId")
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    b.Property<int>("ChangeReason")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("change_reason");

                    b.Property<bool?>("Classified")
                        .HasColumnType("boolean")
                        .HasColumnName("classified");

                    b.Property<bool>("Commercial")
                        .HasColumnType("boolean")
                        .HasColumnName("commercial");

                    b.Property<string>("DataSource")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("data_source");

                    b.Property<int?>("DataSourceClassificationId")
                        .HasColumnType("integer")
                        .HasColumnName("data_source_classification_id");

                    b.Property<string>("EditComment")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("edit_comment");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email_address");

                    b.Property<int?>("Employees")
                        .HasColumnType("integer")
                        .HasColumnName("employees");

                    b.Property<DateTimeOffset?>("EmployeesDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("employees_date");

                    b.Property<int?>("EmployeesYear")
                        .HasColumnType("integer")
                        .HasColumnName("employees_year");

                    b.Property<DateTimeOffset>("EndPeriod")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_period");

                    b.Property<DateTimeOffset?>("EntGroupIdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ent_group_id_date");

                    b.Property<int?>("EntGroupRoleId")
                        .HasColumnType("integer")
                        .HasColumnName("ent_group_role_id");

                    b.Property<int?>("EnterpriseGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("enterprise_group_id");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("external_id");

                    b.Property<DateTimeOffset?>("ExternalIdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("external_id_date");

                    b.Property<string>("ExternalIdType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("external_id_type");

                    b.Property<string>("ForeignCapitalCurrency")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ForeignCapitalCurrency");

                    b.Property<string>("ForeignCapitalShare")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ForeignCapitalShare");

                    b.Property<int?>("ForeignParticipationId")
                        .HasColumnType("integer")
                        .HasColumnName("foreign_participation_id");

                    b.Property<bool>("FreeEconZone")
                        .HasColumnType("boolean")
                        .HasColumnName("free_econ_zone");

                    b.Property<int?>("InstSectorCodeId")
                        .HasColumnType("integer")
                        .HasColumnName("inst_sector_code_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int?>("LegalFormId")
                        .HasColumnType("integer")
                        .HasColumnName("legal_form_id");

                    b.Property<DateTimeOffset?>("LiqDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("liq_date");

                    b.Property<string>("LiqReason")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("liq_reason");

                    b.Property<string>("MunCapitalShare")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("MunCapitalShare");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int?>("NumOfPeopleEmp")
                        .HasColumnType("integer")
                        .HasColumnName("num_of_people_emp");

                    b.Property<int?>("ParentOrgLink")
                        .HasColumnType("integer")
                        .HasColumnName("parent_org_link");

                    b.Property<int?>("PostalAddressId")
                        .HasColumnType("integer")
                        .HasColumnName("postal_address_id");

                    b.Property<string>("PrivCapitalShare")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("PrivCapitalShare");

                    b.Property<string>("RefNo")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("ref_no");

                    b.Property<DateTimeOffset>("RegIdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reg_id_date");

                    b.Property<DateTimeOffset?>("RegistrationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registration_date");

                    b.Property<int?>("RegistrationReasonId")
                        .HasColumnType("integer")
                        .HasColumnName("registration_reason_id");

                    b.Property<DateTimeOffset?>("ReorgDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reorg_date");

                    b.Property<int?>("ReorgReferences")
                        .HasColumnType("integer")
                        .HasColumnName("reorg_references");

                    b.Property<string>("ReorgTypeCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("reorg_type_code");

                    b.Property<int?>("ReorgTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("reorg_type_id");

                    b.Property<string>("ShortName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("short_name");

                    b.Property<int?>("SizeId")
                        .HasColumnType("integer")
                        .HasColumnName("size_id");

                    b.Property<DateTimeOffset>("StartPeriod")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_period");

                    b.Property<string>("StatId")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("stat_id");

                    b.Property<DateTimeOffset?>("StatIdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("stat_id_date");

                    b.Property<string>("StateCapitalShare")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("StateCapitalShare");

                    b.Property<DateTimeOffset?>("StatusDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("status_date");

                    b.Property<DateTimeOffset?>("SuspensionEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("suspension_end");

                    b.Property<DateTimeOffset?>("SuspensionStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("suspension_start");

                    b.Property<DateTimeOffset?>("TaxRegDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("tax_reg_date");

                    b.Property<string>("TaxRegId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tax_reg_id");

                    b.Property<string>("TelephoneNo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telephone_no");

                    b.Property<string>("TotalCapital")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("TotalCapital");

                    b.Property<decimal?>("Turnover")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("turnover");

                    b.Property<DateTimeOffset?>("TurnoverDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("turnover_date");

                    b.Property<int?>("TurnoverYear")
                        .HasColumnType("integer")
                        .HasColumnName("turnover_year");

                    b.Property<int?>("UnitStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("unit_status_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user_id");

                    b.Property<string>("WebAddress")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("web_address");

                    b.HasKey("RegId")
                        .HasName("pk_enterprise_unit");

                    b.HasIndex("ActualAddressId")
                        .HasDatabaseName("ix_enterprise_unit_actual_address_id");

                    b.HasIndex("AddressId")
                        .HasDatabaseName("ix_enterprise_unit_address_id");

                    b.HasIndex("DataSourceClassificationId")
                        .HasDatabaseName("ix_enterprise_unit_data_source_classification_id");

                    b.HasIndex("EntGroupRoleId")
                        .HasDatabaseName("ix_enterprise_unit_ent_group_role_id");

                    b.HasIndex("EnterpriseGroupId")
                        .HasDatabaseName("ix_enterprise_unit_enterprise_group_id");

                    b.HasIndex("ForeignParticipationId")
                        .HasDatabaseName("ix_enterprise_unit_foreign_participation_id");

                    b.HasIndex("InstSectorCodeId")
                        .HasDatabaseName("ix_enterprise_unit_inst_sector_code_id");

                    b.HasIndex("LegalFormId")
                        .HasDatabaseName("ix_enterprise_unit_legal_form_id");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_enterprise_unit_name");

                    b.HasIndex("PostalAddressId")
                        .HasDatabaseName("ix_enterprise_unit_postal_address_id");

                    b.HasIndex("RegistrationReasonId")
                        .HasDatabaseName("ix_enterprise_unit_registration_reason_id");

                    b.HasIndex("ReorgTypeId")
                        .HasDatabaseName("ix_enterprise_unit_reorg_type_id");

                    b.HasIndex("SizeId")
                        .HasDatabaseName("ix_enterprise_unit_size_id");

                    b.HasIndex("StartPeriod")
                        .HasDatabaseName("ix_enterprise_unit_start_period");

                    b.HasIndex("StatId")
                        .HasDatabaseName("ix_enterprise_unit_stat_id");

                    b.HasIndex("UnitStatusId")
                        .HasDatabaseName("ix_enterprise_unit_unit_status_id");

                    b.HasIndex("ShortName", "RegId", "StatId", "TaxRegId")
                        .HasDatabaseName("ix_enterprise_unit_short_name_reg_id_stat_id_tax_reg_id");

                    b.ToTable("enterprise_unit", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.ForeignParticipation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameLanguage1")
                        .HasColumnType("text")
                        .HasColumnName("name_language1");

                    b.Property<string>("NameLanguage2")
                        .HasColumnType("text")
                        .HasColumnName("name_language2");

                    b.HasKey("Id")
                        .HasName("pk_foreign_participation");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_foreign_participation_code");

                    b.ToTable("foreign_participation", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int[]>("ActivityCategoryIds")
                        .HasColumnType("integer[]")
                        .HasColumnName("activity_category_ids");

                    b.Property<int?>("AddressId")
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    b.Property<int>("ChangeReason")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("change_reason");

                    b.Property<bool?>("Classified")
                        .HasColumnType("boolean")
                        .HasColumnName("classified");

                    b.Property<string>("DataSource")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("data_source");

                    b.Property<int?>("DataSourceClassificationId")
                        .HasColumnType("integer")
                        .HasColumnName("data_source_classification_id");

                    b.Property<string>("EditComment")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("edit_comment");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email_address");

                    b.Property<int?>("Employees")
                        .HasColumnType("integer")
                        .HasColumnName("employees");

                    b.Property<int?>("EnterpriseGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("enterprise_group_id");

                    b.Property<int?>("EnterpriseUnitId")
                        .HasColumnType("integer")
                        .HasColumnName("enterprise_unit_id");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("external_id");

                    b.Property<string>("ExternalIdType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("external_id_type");

                    b.Property<bool>("FreeEconZone")
                        .HasColumnType("boolean")
                        .HasColumnName("free_econ_zone");

                    b.Property<int?>("LegalFormId")
                        .HasColumnType("integer")
                        .HasColumnName("legal_form_id");

                    b.Property<int?>("LegalUnitId")
                        .HasColumnType("integer")
                        .HasColumnName("legal_unit_id");

                    b.Property<DateTimeOffset?>("LiqDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("liq_date");

                    b.Property<string>("LiqReason")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("liq_reason");

                    b.Property<int?>("LocalUnitId")
                        .HasColumnType("integer")
                        .HasColumnName("local_unit_id");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("name");

                    b.Property<int?>("NumOfPeopleEmp")
                        .HasColumnType("integer")
                        .HasColumnName("num_of_people_emp");

                    b.Property<int[]>("RegionIds")
                        .HasColumnType("integer[]")
                        .HasColumnName("region_ids");

                    b.Property<int?>("ReorgTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("reorg_type_id");

                    b.Property<int[]>("SectorCodeIds")
                        .HasColumnType("integer[]")
                        .HasColumnName("sector_code_ids");

                    b.Property<string>("ShortName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("short_name");

                    b.Property<int?>("SizeId")
                        .HasColumnType("integer")
                        .HasColumnName("size_id");

                    b.Property<DateOnly>("StartOn")
                        .HasColumnType("date")
                        .HasColumnName("start_on");

                    b.Property<DateOnly?>("StopOn")
                        .HasColumnType("date")
                        .HasColumnName("stop_on");

                    b.Property<string>("TaxRegId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tax_reg_id");

                    b.Property<string>("TelephoneNo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telephone_no");

                    b.Property<decimal?>("Turnover")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("turnover");

                    b.Property<int?>("UnitStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("unit_status_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user_id");

                    b.Property<string>("WebAddress")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("web_address");

                    b.HasKey("Id")
                        .HasName("pk_history");

                    b.HasIndex("AddressId")
                        .HasDatabaseName("ix_history_address_id");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_history_name");

                    b.ToTable("history", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.LegalForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameLanguage1")
                        .HasColumnType("text")
                        .HasColumnName("name_language1");

                    b.Property<string>("NameLanguage2")
                        .HasColumnType("text")
                        .HasColumnName("name_language2");

                    b.HasKey("Id")
                        .HasName("pk_legal_form");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_legal_form_code");

                    b.ToTable("legal_form", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.LegalUnit", b =>
                {
                    b.Property<int>("RegId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("reg_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RegId"));

                    b.Property<int?>("ActualAddressId")
                        .HasColumnType("integer")
                        .HasColumnName("actual_address_id");

                    b.Property<int?>("AddressId")
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    b.Property<int>("ChangeReason")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("change_reason");

                    b.Property<bool?>("Classified")
                        .HasColumnType("boolean")
                        .HasColumnName("classified");

                    b.Property<string>("DataSource")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("data_source");

                    b.Property<int?>("DataSourceClassificationId")
                        .HasColumnType("integer")
                        .HasColumnName("data_source_classification_id");

                    b.Property<string>("EditComment")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("edit_comment");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email_address");

                    b.Property<int?>("Employees")
                        .HasColumnType("integer")
                        .HasColumnName("employees");

                    b.Property<DateTimeOffset?>("EmployeesDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("employees_date");

                    b.Property<int?>("EmployeesYear")
                        .HasColumnType("integer")
                        .HasColumnName("employees_year");

                    b.Property<DateTimeOffset>("EndPeriod")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_period");

                    b.Property<DateTimeOffset?>("EntRegIdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ent_reg_id_date");

                    b.Property<int?>("EnterpriseUnitRegId")
                        .HasColumnType("integer")
                        .HasColumnName("enterprise_unit_reg_id");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("external_id");

                    b.Property<DateTimeOffset?>("ExternalIdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("external_id_date");

                    b.Property<string>("ExternalIdType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("external_id_type");

                    b.Property<string>("ForeignCapitalCurrency")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ForeignCapitalCurrency");

                    b.Property<string>("ForeignCapitalShare")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ForeignCapitalShare");

                    b.Property<int?>("ForeignParticipationId")
                        .HasColumnType("integer")
                        .HasColumnName("foreign_participation_id");

                    b.Property<bool>("FreeEconZone")
                        .HasColumnType("boolean")
                        .HasColumnName("free_econ_zone");

                    b.Property<int?>("InstSectorCodeId")
                        .HasColumnType("integer")
                        .HasColumnName("inst_sector_code_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int?>("LegalFormId")
                        .HasColumnType("integer")
                        .HasColumnName("legal_form_id");

                    b.Property<DateTimeOffset?>("LiqDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("liq_date");

                    b.Property<string>("LiqReason")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("liq_reason");

                    b.Property<bool?>("Market")
                        .HasColumnType("boolean")
                        .HasColumnName("market");

                    b.Property<string>("MunCapitalShare")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("MunCapitalShare");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int?>("NumOfPeopleEmp")
                        .HasColumnType("integer")
                        .HasColumnName("num_of_people_emp");

                    b.Property<int?>("ParentOrgLink")
                        .HasColumnType("integer")
                        .HasColumnName("parent_org_link");

                    b.Property<int?>("PostalAddressId")
                        .HasColumnType("integer")
                        .HasColumnName("postal_address_id");

                    b.Property<string>("PrivCapitalShare")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("PrivCapitalShare");

                    b.Property<string>("RefNo")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("ref_no");

                    b.Property<DateTimeOffset>("RegIdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reg_id_date");

                    b.Property<DateTimeOffset?>("RegistrationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registration_date");

                    b.Property<int?>("RegistrationReasonId")
                        .HasColumnType("integer")
                        .HasColumnName("registration_reason_id");

                    b.Property<DateTimeOffset?>("ReorgDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reorg_date");

                    b.Property<int?>("ReorgReferences")
                        .HasColumnType("integer")
                        .HasColumnName("reorg_references");

                    b.Property<string>("ReorgTypeCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("reorg_type_code");

                    b.Property<int?>("ReorgTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("reorg_type_id");

                    b.Property<string>("ShortName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("short_name");

                    b.Property<int?>("SizeId")
                        .HasColumnType("integer")
                        .HasColumnName("size_id");

                    b.Property<DateTimeOffset>("StartPeriod")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_period");

                    b.Property<string>("StatId")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("stat_id");

                    b.Property<DateTimeOffset?>("StatIdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("stat_id_date");

                    b.Property<string>("StateCapitalShare")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("StateCapitalShare");

                    b.Property<DateTimeOffset?>("StatusDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("status_date");

                    b.Property<DateTimeOffset?>("SuspensionEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("suspension_end");

                    b.Property<DateTimeOffset?>("SuspensionStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("suspension_start");

                    b.Property<DateTimeOffset?>("TaxRegDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("tax_reg_date");

                    b.Property<string>("TaxRegId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tax_reg_id");

                    b.Property<string>("TelephoneNo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telephone_no");

                    b.Property<string>("TotalCapital")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("TotalCapital");

                    b.Property<decimal?>("Turnover")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("turnover");

                    b.Property<DateTimeOffset?>("TurnoverDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("turnover_date");

                    b.Property<int?>("TurnoverYear")
                        .HasColumnType("integer")
                        .HasColumnName("turnover_year");

                    b.Property<int?>("UnitStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("unit_status_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user_id");

                    b.Property<string>("WebAddress")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("web_address");

                    b.HasKey("RegId")
                        .HasName("pk_legal_unit");

                    b.HasIndex("ActualAddressId")
                        .HasDatabaseName("ix_legal_unit_actual_address_id");

                    b.HasIndex("AddressId")
                        .HasDatabaseName("ix_legal_unit_address_id");

                    b.HasIndex("DataSourceClassificationId")
                        .HasDatabaseName("ix_legal_unit_data_source_classification_id");

                    b.HasIndex("EnterpriseUnitRegId")
                        .HasDatabaseName("ix_legal_unit_enterprise_unit_reg_id");

                    b.HasIndex("ForeignParticipationId")
                        .HasDatabaseName("ix_legal_unit_foreign_participation_id");

                    b.HasIndex("InstSectorCodeId")
                        .HasDatabaseName("ix_legal_unit_inst_sector_code_id");

                    b.HasIndex("LegalFormId")
                        .HasDatabaseName("ix_legal_unit_legal_form_id");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_legal_unit_name");

                    b.HasIndex("PostalAddressId")
                        .HasDatabaseName("ix_legal_unit_postal_address_id");

                    b.HasIndex("RegistrationReasonId")
                        .HasDatabaseName("ix_legal_unit_registration_reason_id");

                    b.HasIndex("ReorgTypeId")
                        .HasDatabaseName("ix_legal_unit_reorg_type_id");

                    b.HasIndex("SizeId")
                        .HasDatabaseName("ix_legal_unit_size_id");

                    b.HasIndex("StartPeriod")
                        .HasDatabaseName("ix_legal_unit_start_period");

                    b.HasIndex("StatId")
                        .HasDatabaseName("ix_legal_unit_stat_id");

                    b.HasIndex("UnitStatusId")
                        .HasDatabaseName("ix_legal_unit_unit_status_id");

                    b.HasIndex("ShortName", "RegId", "StatId", "TaxRegId")
                        .HasDatabaseName("ix_legal_unit_short_name_reg_id_stat_id_tax_reg_id");

                    b.ToTable("legal_unit", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.LocalUnit", b =>
                {
                    b.Property<int>("RegId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("reg_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RegId"));

                    b.Property<int?>("ActualAddressId")
                        .HasColumnType("integer")
                        .HasColumnName("actual_address_id");

                    b.Property<int?>("AddressId")
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    b.Property<int>("ChangeReason")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("change_reason");

                    b.Property<bool?>("Classified")
                        .HasColumnType("boolean")
                        .HasColumnName("classified");

                    b.Property<string>("DataSource")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("data_source");

                    b.Property<int?>("DataSourceClassificationId")
                        .HasColumnType("integer")
                        .HasColumnName("data_source_classification_id");

                    b.Property<string>("EditComment")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("edit_comment");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email_address");

                    b.Property<int?>("Employees")
                        .HasColumnType("integer")
                        .HasColumnName("employees");

                    b.Property<DateTimeOffset?>("EmployeesDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("employees_date");

                    b.Property<int?>("EmployeesYear")
                        .HasColumnType("integer")
                        .HasColumnName("employees_year");

                    b.Property<DateTimeOffset>("EndPeriod")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_period");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("external_id");

                    b.Property<DateTimeOffset?>("ExternalIdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("external_id_date");

                    b.Property<string>("ExternalIdType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("external_id_type");

                    b.Property<int?>("ForeignParticipationId")
                        .HasColumnType("integer")
                        .HasColumnName("foreign_participation_id");

                    b.Property<bool>("FreeEconZone")
                        .HasColumnType("boolean")
                        .HasColumnName("free_econ_zone");

                    b.Property<int?>("InstSectorCodeId")
                        .HasColumnType("integer")
                        .HasColumnName("inst_sector_code_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int?>("LegalFormId")
                        .HasColumnType("integer")
                        .HasColumnName("legal_form_id");

                    b.Property<int?>("LegalUnitId")
                        .HasColumnType("integer")
                        .HasColumnName("legal_unit_id");

                    b.Property<DateTimeOffset?>("LegalUnitIdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("legal_unit_id_date");

                    b.Property<DateTimeOffset?>("LiqDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("liq_date");

                    b.Property<string>("LiqReason")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("liq_reason");

                    b.Property<string>("Name")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int?>("NumOfPeopleEmp")
                        .HasColumnType("integer")
                        .HasColumnName("num_of_people_emp");

                    b.Property<int?>("ParentOrgLink")
                        .HasColumnType("integer")
                        .HasColumnName("parent_org_link");

                    b.Property<int?>("PostalAddressId")
                        .HasColumnType("integer")
                        .HasColumnName("postal_address_id");

                    b.Property<string>("RefNo")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("ref_no");

                    b.Property<DateTimeOffset>("RegIdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reg_id_date");

                    b.Property<DateTimeOffset?>("RegistrationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registration_date");

                    b.Property<int?>("RegistrationReasonId")
                        .HasColumnType("integer")
                        .HasColumnName("registration_reason_id");

                    b.Property<DateTimeOffset?>("ReorgDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reorg_date");

                    b.Property<int?>("ReorgReferences")
                        .HasColumnType("integer")
                        .HasColumnName("reorg_references");

                    b.Property<string>("ReorgTypeCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("reorg_type_code");

                    b.Property<int?>("ReorgTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("reorg_type_id");

                    b.Property<string>("ShortName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("short_name");

                    b.Property<int?>("SizeId")
                        .HasColumnType("integer")
                        .HasColumnName("size_id");

                    b.Property<DateTimeOffset>("StartPeriod")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_period");

                    b.Property<string>("StatId")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("stat_id");

                    b.Property<DateTimeOffset?>("StatIdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("stat_id_date");

                    b.Property<DateTimeOffset?>("StatusDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("status_date");

                    b.Property<DateTimeOffset?>("SuspensionEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("suspension_end");

                    b.Property<DateTimeOffset?>("SuspensionStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("suspension_start");

                    b.Property<DateTimeOffset?>("TaxRegDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("tax_reg_date");

                    b.Property<string>("TaxRegId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tax_reg_id");

                    b.Property<string>("TelephoneNo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telephone_no");

                    b.Property<decimal?>("Turnover")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("turnover");

                    b.Property<DateTimeOffset?>("TurnoverDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("turnover_date");

                    b.Property<int?>("TurnoverYear")
                        .HasColumnType("integer")
                        .HasColumnName("turnover_year");

                    b.Property<int?>("UnitStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("unit_status_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user_id");

                    b.Property<string>("WebAddress")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("web_address");

                    b.HasKey("RegId")
                        .HasName("pk_local_unit");

                    b.HasIndex("ActualAddressId")
                        .HasDatabaseName("ix_local_unit_actual_address_id");

                    b.HasIndex("AddressId")
                        .HasDatabaseName("ix_local_unit_address_id");

                    b.HasIndex("DataSourceClassificationId")
                        .HasDatabaseName("ix_local_unit_data_source_classification_id");

                    b.HasIndex("ForeignParticipationId")
                        .HasDatabaseName("ix_local_unit_foreign_participation_id");

                    b.HasIndex("InstSectorCodeId")
                        .HasDatabaseName("ix_local_unit_inst_sector_code_id");

                    b.HasIndex("LegalFormId")
                        .HasDatabaseName("ix_local_unit_legal_form_id");

                    b.HasIndex("LegalUnitId")
                        .HasDatabaseName("ix_local_unit_legal_unit_id");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_local_unit_name");

                    b.HasIndex("PostalAddressId")
                        .HasDatabaseName("ix_local_unit_postal_address_id");

                    b.HasIndex("RegistrationReasonId")
                        .HasDatabaseName("ix_local_unit_registration_reason_id");

                    b.HasIndex("ReorgTypeId")
                        .HasDatabaseName("ix_local_unit_reorg_type_id");

                    b.HasIndex("SizeId")
                        .HasDatabaseName("ix_local_unit_size_id");

                    b.HasIndex("StartPeriod")
                        .HasDatabaseName("ix_local_unit_start_period");

                    b.HasIndex("StatId")
                        .HasDatabaseName("ix_local_unit_stat_id");

                    b.HasIndex("UnitStatusId")
                        .HasDatabaseName("ix_local_unit_unit_status_id");

                    b.HasIndex("ShortName", "RegId", "StatId", "TaxRegId")
                        .HasDatabaseName("ix_local_unit_short_name_reg_id_stat_id_tax_reg_id");

                    b.ToTable("local_unit", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<DateTimeOffset?>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<string>("GivenName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("given_name");

                    b.Property<DateTimeOffset>("IdDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("id_date");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("middle_name");

                    b.Property<string>("PersonalId")
                        .HasColumnType("text")
                        .HasColumnName("personal_id");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("PhoneNumber1")
                        .HasColumnType("text")
                        .HasColumnName("phone_number1");

                    b.Property<byte?>("Sex")
                        .HasColumnType("smallint")
                        .HasColumnName("sex");

                    b.Property<string>("Surname")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("surname");

                    b.HasKey("Id")
                        .HasName("pk_person");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_person_country_id");

                    b.HasIndex("GivenName", "Surname")
                        .HasDatabaseName("ix_person_given_name_surname");

                    b.ToTable("person", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.PersonForUnit", b =>
                {
                    b.Property<int?>("EnterpriseUnitId")
                        .HasColumnType("integer")
                        .HasColumnName("enterprise_unit_id");

                    b.Property<int?>("PersonId")
                        .HasColumnType("integer")
                        .HasColumnName("person_id");

                    b.Property<int?>("EnterpriseGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("enterprise_group_id");

                    b.Property<int?>("HistoryId")
                        .HasColumnType("integer")
                        .HasColumnName("history_id");

                    b.Property<int?>("LegalUnitId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("legal_unit_id");

                    b.Property<int?>("LocalUnitId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("local_unit_id");

                    b.Property<int?>("PersonTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("person_type_id");

                    b.HasKey("EnterpriseUnitId", "PersonId")
                        .HasName("pk_person_for_unit");

                    b.HasIndex("EnterpriseGroupId")
                        .HasDatabaseName("ix_person_for_unit_enterprise_group_id");

                    b.HasIndex("EnterpriseUnitId")
                        .HasDatabaseName("ix_person_for_unit_enterprise_unit_id");

                    b.HasIndex("HistoryId")
                        .HasDatabaseName("ix_person_for_unit_history_id");

                    b.HasIndex("LegalUnitId")
                        .HasDatabaseName("ix_person_for_unit_legal_unit_id");

                    b.HasIndex("LocalUnitId")
                        .HasDatabaseName("ix_person_for_unit_local_unit_id");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("ix_person_for_unit_person_id");

                    b.HasIndex("PersonTypeId", "LocalUnitId", "LegalUnitId", "EnterpriseUnitId", "PersonId")
                        .IsUnique()
                        .HasDatabaseName("ix_person_for_unit_person_type_id_local_unit_id_legal_unit_id_");

                    b.ToTable("person_for_unit", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.PersonType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameLanguage1")
                        .HasColumnType("text")
                        .HasColumnName("name_language1");

                    b.Property<string>("NameLanguage2")
                        .HasColumnType("text")
                        .HasColumnName("name_language2");

                    b.HasKey("Id")
                        .HasName("pk_person_type");

                    b.ToTable("person_type", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.PostalIndex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameLanguage1")
                        .HasColumnType("text")
                        .HasColumnName("name_language1");

                    b.Property<string>("NameLanguage2")
                        .HasColumnType("text")
                        .HasColumnName("name_language2");

                    b.HasKey("Id")
                        .HasName("pk_postal_index");

                    b.ToTable("postal_index", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminstrativeCenter")
                        .HasColumnType("text")
                        .HasColumnName("adminstrative_center");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("FullPath")
                        .HasColumnType("text")
                        .HasColumnName("full_path");

                    b.Property<string>("FullPathLanguage1")
                        .HasColumnType("text")
                        .HasColumnName("full_path_language1");

                    b.Property<string>("FullPathLanguage2")
                        .HasColumnType("text")
                        .HasColumnName("full_path_language2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameLanguage1")
                        .HasColumnType("text")
                        .HasColumnName("name_language1");

                    b.Property<string>("NameLanguage2")
                        .HasColumnType("text")
                        .HasColumnName("name_language2");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<int?>("RegionLevel")
                        .HasColumnType("integer")
                        .HasColumnName("region_level");

                    b.HasKey("Id")
                        .HasName("pk_region");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_region_code");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_region_parent_id");

                    b.ToTable("region", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.RegistrationReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameLanguage1")
                        .HasColumnType("text")
                        .HasColumnName("name_language1");

                    b.Property<string>("NameLanguage2")
                        .HasColumnType("text")
                        .HasColumnName("name_language2");

                    b.HasKey("Id")
                        .HasName("pk_registration_reason");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_registration_reason_code");

                    b.ToTable("registration_reason", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.ReorgType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameLanguage1")
                        .HasColumnType("text")
                        .HasColumnName("name_language1");

                    b.Property<string>("NameLanguage2")
                        .HasColumnType("text")
                        .HasColumnName("name_language2");

                    b.HasKey("Id")
                        .HasName("pk_reorg_type");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_reorg_type_code");

                    b.ToTable("reorg_type", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.ReportTree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int?>("ParentNodeId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_node_id");

                    b.Property<int?>("ReportId")
                        .HasColumnType("integer")
                        .HasColumnName("report_id");

                    b.Property<string>("ReportUrl")
                        .HasColumnType("text")
                        .HasColumnName("report_url");

                    b.Property<string>("ResourceGroup")
                        .HasColumnType("text")
                        .HasColumnName("resource_group");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_report_tree");

                    b.ToTable("report_tree", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("AccessToSystemFunctions")
                        .HasColumnType("text")
                        .HasColumnName("access_to_system_functions");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.Property<string>("SqlWalletUser")
                        .HasColumnType("text")
                        .HasColumnName("sql_wallet_user");

                    b.Property<string>("StandardDataAccess")
                        .HasColumnType("text")
                        .HasColumnName("standard_data_access");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.SampleFrame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset?>("EditingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("editing_date");

                    b.Property<string>("Fields")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fields");

                    b.Property<string>("FilePath")
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<DateTimeOffset?>("GeneratedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("generated_date_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Predicate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("predicate");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_sample_frame");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_sample_frame_user_id");

                    b.ToTable("sample_frame", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.SectorCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameLanguage1")
                        .HasColumnType("text")
                        .HasColumnName("name_language1");

                    b.Property<string>("NameLanguage2")
                        .HasColumnType("text")
                        .HasColumnName("name_language2");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.HasKey("Id")
                        .HasName("pk_sector_code");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_sector_code_code");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_sector_code_parent_id");

                    b.ToTable("sector_code", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.StatUnitEnterprise_2021", b =>
                {
                    b.Property<string>("StatId")
                        .HasColumnType("text")
                        .HasColumnName("stat_id");

                    b.Property<string>("ActCat_2dig_code")
                        .HasColumnType("text")
                        .HasColumnName("act_cat_2dig_code");

                    b.Property<string>("ActCat_2dig_desc")
                        .HasColumnType("text")
                        .HasColumnName("act_cat_2dig_desc");

                    b.Property<string>("ActCat_3dig_code")
                        .HasColumnType("text")
                        .HasColumnName("act_cat_3dig_code");

                    b.Property<string>("ActCat_3dig_desc")
                        .HasColumnType("text")
                        .HasColumnName("act_cat_3dig_desc");

                    b.Property<string>("ActCat_section_code")
                        .HasColumnType("text")
                        .HasColumnName("act_cat_section_code");

                    b.Property<string>("ActCat_section_desc")
                        .HasColumnType("text")
                        .HasColumnName("act_cat_section_desc");

                    b.Property<int?>("Employees")
                        .HasColumnType("integer")
                        .HasColumnName("employees");

                    b.Property<string>("InstSectorCode_level1")
                        .HasColumnType("text")
                        .HasColumnName("inst_sector_code_level1");

                    b.Property<string>("InstSectorCode_level1_desc")
                        .HasColumnType("text")
                        .HasColumnName("inst_sector_code_level1_desc");

                    b.Property<string>("InstSectorCode_level2")
                        .HasColumnType("text")
                        .HasColumnName("inst_sector_code_level2");

                    b.Property<string>("InstSectorCode_level2_desc")
                        .HasColumnType("text")
                        .HasColumnName("inst_sector_code_level2_desc");

                    b.Property<string>("LegalForm_code")
                        .HasColumnType("text")
                        .HasColumnName("legal_form_code");

                    b.Property<string>("LegalForm_desc")
                        .HasColumnType("text")
                        .HasColumnName("legal_form_desc");

                    b.Property<DateTimeOffset?>("LiqDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("liq_date");

                    b.Property<int?>("NumOfPeopleEmp")
                        .HasColumnType("integer")
                        .HasColumnName("num_of_people_emp");

                    b.Property<int?>("Oblast")
                        .HasColumnType("integer")
                        .HasColumnName("oblast");

                    b.Property<int?>("Rayon")
                        .HasColumnType("integer")
                        .HasColumnName("rayon");

                    b.Property<DateTimeOffset?>("RegistrationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registration_date");

                    b.Property<bool?>("Sex")
                        .HasColumnType("boolean")
                        .HasColumnName("sex");

                    b.Property<int?>("SizeCode")
                        .HasColumnType("integer")
                        .HasColumnName("size_code");

                    b.Property<string>("SizeDesc")
                        .HasColumnType("text")
                        .HasColumnName("size_desc");

                    b.Property<string>("StatusCode")
                        .HasColumnType("text")
                        .HasColumnName("status_code");

                    b.Property<string>("StatusDesc")
                        .HasColumnType("text")
                        .HasColumnName("status_desc");

                    b.Property<decimal?>("Turnover")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("turnover");

                    b.HasKey("StatId")
                        .HasName("pk_stat_unit_enterprise_2021");

                    b.ToTable((string)null);

                    b.ToView("V_StatUnitEnterprise_2021", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.StatUnitLocal_2021", b =>
                {
                    b.Property<string>("StatId")
                        .HasColumnType("text")
                        .HasColumnName("stat_id");

                    b.Property<string>("ActCat_2dig_code")
                        .HasColumnType("text")
                        .HasColumnName("act_cat_2dig_code");

                    b.Property<string>("ActCat_2dig_desc")
                        .HasColumnType("text")
                        .HasColumnName("act_cat_2dig_desc");

                    b.Property<string>("ActCat_3dig_code")
                        .HasColumnType("text")
                        .HasColumnName("act_cat_3dig_code");

                    b.Property<string>("ActCat_3dig_desc")
                        .HasColumnType("text")
                        .HasColumnName("act_cat_3dig_desc");

                    b.Property<string>("ActCat_section_code")
                        .HasColumnType("text")
                        .HasColumnName("act_cat_section_code");

                    b.Property<string>("ActCat_section_desc")
                        .HasColumnType("text")
                        .HasColumnName("act_cat_section_desc");

                    b.Property<int?>("Employees")
                        .HasColumnType("integer")
                        .HasColumnName("employees");

                    b.Property<string>("InstSectorCode_level1")
                        .HasColumnType("text")
                        .HasColumnName("inst_sector_code_level1");

                    b.Property<string>("InstSectorCode_level1_desc")
                        .HasColumnType("text")
                        .HasColumnName("inst_sector_code_level1_desc");

                    b.Property<string>("InstSectorCode_level2")
                        .HasColumnType("text")
                        .HasColumnName("inst_sector_code_level2");

                    b.Property<string>("InstSectorCode_level2_desc")
                        .HasColumnType("text")
                        .HasColumnName("inst_sector_code_level2_desc");

                    b.Property<string>("LegalForm_code")
                        .HasColumnType("text")
                        .HasColumnName("legal_form_code");

                    b.Property<string>("LegalForm_desc")
                        .HasColumnType("text")
                        .HasColumnName("legal_form_desc");

                    b.Property<DateTimeOffset?>("LiqDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("liq_date");

                    b.Property<int?>("NumOfPeopleEmp")
                        .HasColumnType("integer")
                        .HasColumnName("num_of_people_emp");

                    b.Property<int?>("Oblast")
                        .HasColumnType("integer")
                        .HasColumnName("oblast");

                    b.Property<int?>("Rayon")
                        .HasColumnType("integer")
                        .HasColumnName("rayon");

                    b.Property<DateTimeOffset?>("RegistrationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registration_date");

                    b.Property<bool?>("Sex")
                        .HasColumnType("boolean")
                        .HasColumnName("sex");

                    b.Property<int?>("SizeCode")
                        .HasColumnType("integer")
                        .HasColumnName("size_code");

                    b.Property<string>("SizeDesc")
                        .HasColumnType("text")
                        .HasColumnName("size_desc");

                    b.Property<string>("StatusCode")
                        .HasColumnType("text")
                        .HasColumnName("status_code");

                    b.Property<string>("StatusDesc")
                        .HasColumnType("text")
                        .HasColumnName("status_desc");

                    b.Property<decimal?>("Turnover")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("turnover");

                    b.HasKey("StatId")
                        .HasName("pk_stat_unit_local_2021");

                    b.ToTable((string)null);

                    b.ToView("V_StatUnitLocal_2021", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.StatUnitSearchView", b =>
                {
                    b.Property<int>("RegId")
                        .HasColumnType("integer")
                        .HasColumnName("reg_id");

                    b.Property<int?>("ActualAddressId")
                        .HasColumnType("integer")
                        .HasColumnName("actual_address_id");

                    b.Property<string>("ActualAddressPart1")
                        .HasColumnType("text")
                        .HasColumnName("actual_address_part1");

                    b.Property<string>("ActualAddressPart2")
                        .HasColumnType("text")
                        .HasColumnName("actual_address_part2");

                    b.Property<string>("ActualAddressPart3")
                        .HasColumnType("text")
                        .HasColumnName("actual_address_part3");

                    b.Property<int?>("ActualAddressRegionId")
                        .HasColumnType("integer")
                        .HasColumnName("actual_address_region_id");

                    b.Property<int?>("AddressId")
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    b.Property<string>("AddressPart1")
                        .HasColumnType("text")
                        .HasColumnName("address_part1");

                    b.Property<string>("AddressPart2")
                        .HasColumnType("text")
                        .HasColumnName("address_part2");

                    b.Property<string>("AddressPart3")
                        .HasColumnType("text")
                        .HasColumnName("address_part3");

                    b.Property<int>("ChangeReason")
                        .HasColumnType("integer")
                        .HasColumnName("change_reason");

                    b.Property<int?>("DataSourceClassificationId")
                        .HasColumnType("integer")
                        .HasColumnName("data_source_classification_id");

                    b.Property<int?>("Employees")
                        .HasColumnType("integer")
                        .HasColumnName("employees");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text")
                        .HasColumnName("external_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int?>("LegalFormId")
                        .HasColumnType("integer")
                        .HasColumnName("legal_form_id");

                    b.Property<DateTimeOffset?>("LiqDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("liq_date");

                    b.Property<string>("LiqReason")
                        .HasColumnType("text")
                        .HasColumnName("liq_reason");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("RegionId")
                        .HasColumnType("integer")
                        .HasColumnName("region_id");

                    b.Property<int?>("SectorCodeId")
                        .HasColumnType("integer")
                        .HasColumnName("sector_code_id");

                    b.Property<DateTimeOffset>("StartPeriod")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_period");

                    b.Property<string>("StatId")
                        .HasColumnType("text")
                        .HasColumnName("stat_id");

                    b.Property<string>("TaxRegId")
                        .HasColumnType("text")
                        .HasColumnName("tax_reg_id");

                    b.Property<decimal?>("Turnover")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("turnover");

                    b.Property<int>("UnitType")
                        .HasColumnType("integer")
                        .HasColumnName("unit_type");

                    b.HasKey("RegId")
                        .HasName("pk_stat_unit_search_view");

                    b.ToTable((string)null);

                    b.ToView("V_StatUnitSearch", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.UnitSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameLanguage1")
                        .HasColumnType("text")
                        .HasColumnName("name_language1");

                    b.Property<string>("NameLanguage2")
                        .HasColumnType("text")
                        .HasColumnName("name_language2");

                    b.HasKey("Id")
                        .HasName("pk_unit_size");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_unit_size_code");

                    b.ToTable("unit_size", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.UnitStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameLanguage1")
                        .HasColumnType("text")
                        .HasColumnName("name_language1");

                    b.Property<string>("NameLanguage2")
                        .HasColumnType("text")
                        .HasColumnName("name_language2");

                    b.HasKey("Id")
                        .HasName("pk_unit_status");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_unit_status_code");

                    b.ToTable("unit_status", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("DataAccess")
                        .HasColumnType("text")
                        .HasColumnName("data_access");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset?>("SuspensionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("suspension_date");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.UserRegion", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer")
                        .HasColumnName("region_id");

                    b.HasKey("UserId", "RegionId")
                        .HasName("pk_user_region");

                    b.HasIndex("RegionId")
                        .HasDatabaseName("ix_user_region_region_id");

                    b.ToTable("user_region", (string)null);
                });

            modelBuilder.Entity("nscreg.Data.Entities.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("nscreg.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("nscreg.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("nscreg.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("nscreg.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("nscreg.Data.Entities.Activity", b =>
                {
                    b.HasOne("nscreg.Data.Entities.ActivityCategory", "ActivityCategory")
                        .WithMany()
                        .HasForeignKey("ActivityCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_activity_activity_category_activity_category_id");

                    b.HasOne("nscreg.Data.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_activity_user_updated_by_user_id");

                    b.Navigation("ActivityCategory");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("nscreg.Data.Entities.ActivityCategory", b =>
                {
                    b.HasOne("nscreg.Data.Entities.ActivityCategory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_activity_category_activity_category_parent_id");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("nscreg.Data.Entities.ActivityCategoryUser", b =>
                {
                    b.HasOne("nscreg.Data.Entities.ActivityCategory", "ActivityCategory")
                        .WithMany("ActivityCategoryUsers")
                        .HasForeignKey("ActivityCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_activity_category_user_activity_category_activity_category_");

                    b.HasOne("nscreg.Data.Entities.User", "User")
                        .WithMany("ActivityCategoryUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_activity_category_user_user_user_id");

                    b.Navigation("ActivityCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("nscreg.Data.Entities.ActivityLegalUnit", b =>
                {
                    b.HasOne("nscreg.Data.Entities.Activity", "Activity")
                        .WithMany("ActivitiesUnits")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_activity_legal_unit_activity_activity_id");

                    b.HasOne("nscreg.Data.Entities.EnterpriseUnit", null)
                        .WithMany("ActivitiesUnits")
                        .HasForeignKey("EnterpriseUnitRegId")
                        .HasConstraintName("fk_activity_legal_unit_enterprise_unit_enterprise_unit_temp_id3");

                    b.HasOne("nscreg.Data.Entities.History", null)
                        .WithMany("ActivitiesForLegalUnit")
                        .HasForeignKey("HistoryId")
                        .HasConstraintName("fk_activity_legal_unit_history_history_id");

                    b.HasOne("nscreg.Data.Entities.LocalUnit", null)
                        .WithMany("ActivitiesUnits")
                        .HasForeignKey("LocalUnitRegId")
                        .HasConstraintName("fk_activity_legal_unit_local_unit_local_unit_temp_id2");

                    b.HasOne("nscreg.Data.Entities.LegalUnit", "Unit")
                        .WithMany("ActivitiesUnits")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_activity_legal_unit_legal_unit_unit_id");

                    b.Navigation("Activity");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("nscreg.Data.Entities.Address", b =>
                {
                    b.HasOne("nscreg.Data.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_address_region_region_id");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("nscreg.Data.Entities.AnalysisLog", b =>
                {
                    b.HasOne("nscreg.Data.Entities.AnalysisQueue", "AnalysisQueue")
                        .WithMany("AnalysisLogs")
                        .HasForeignKey("AnalysisQueueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_analysis_log_analysis_queue_analysis_queue_id");

                    b.Navigation("AnalysisQueue");
                });

            modelBuilder.Entity("nscreg.Data.Entities.AnalysisQueue", b =>
                {
                    b.HasOne("nscreg.Data.Entities.User", "User")
                        .WithMany("AnalysisQueues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_analysis_queue_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("nscreg.Data.Entities.CountryForUnit", b =>
                {
                    b.HasOne("nscreg.Data.Entities.Country", "Country")
                        .WithMany("CountriesUnits")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_country_for_unit_country_country_id");

                    b.HasOne("nscreg.Data.Entities.EnterpriseGroup", "EnterpriseGroup")
                        .WithMany()
                        .HasForeignKey("EnterpriseGroupId")
                        .HasConstraintName("fk_country_for_unit_enterprise_group_enterprise_group_id");

                    b.HasOne("nscreg.Data.Entities.EnterpriseUnit", "EnterpriseUnit")
                        .WithMany("ForeignParticipationCountriesUnits")
                        .HasForeignKey("EnterpriseUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_country_for_unit_enterprise_unit_enterprise_unit_id");

                    b.HasOne("nscreg.Data.Entities.LegalUnit", "LegalUnit")
                        .WithMany("ForeignParticipationCountriesUnits")
                        .HasForeignKey("LegalUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_country_for_unit_legal_unit_legal_unit_id");

                    b.HasOne("nscreg.Data.Entities.LocalUnit", "LocalUnit")
                        .WithMany("ForeignParticipationCountriesUnits")
                        .HasForeignKey("LocalUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_country_for_unit_local_unit_local_unit_id");

                    b.Navigation("Country");

                    b.Navigation("EnterpriseGroup");

                    b.Navigation("EnterpriseUnit");

                    b.Navigation("LegalUnit");

                    b.Navigation("LocalUnit");
                });

            modelBuilder.Entity("nscreg.Data.Entities.DataSource", b =>
                {
                    b.HasOne("nscreg.Data.Entities.User", "User")
                        .WithMany("DataSources")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_data_source_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("nscreg.Data.Entities.DataSourceQueue", b =>
                {
                    b.HasOne("nscreg.Data.Entities.DataSource", "DataSource")
                        .WithMany("DataSourceQueuedUploads")
                        .HasForeignKey("DataSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_data_source_queue_data_source_data_source_id");

                    b.HasOne("nscreg.Data.Entities.User", "User")
                        .WithMany("DataSourceQueues")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_data_source_queue_user_user_id");

                    b.Navigation("DataSource");

                    b.Navigation("User");
                });

            modelBuilder.Entity("nscreg.Data.Entities.DataUploadingLog", b =>
                {
                    b.HasOne("nscreg.Data.Entities.DataSourceQueue", "DataSourceQueue")
                        .WithMany("DataUploadingLogs")
                        .HasForeignKey("DataSourceQueueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_data_uploading_log_data_source_queue_data_source_queue_id");

                    b.Navigation("DataSourceQueue");
                });

            modelBuilder.Entity("nscreg.Data.Entities.EnterpriseGroup", b =>
                {
                    b.HasOne("nscreg.Data.Entities.Address", "ActualAddress")
                        .WithMany()
                        .HasForeignKey("ActualAddressId")
                        .HasConstraintName("fk_enterprise_group_address_actual_address_id");

                    b.HasOne("nscreg.Data.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .HasConstraintName("fk_enterprise_group_address_address_id");

                    b.HasOne("nscreg.Data.Entities.DataSourceClassification", "DataSourceClassification")
                        .WithMany()
                        .HasForeignKey("DataSourceClassificationId")
                        .HasConstraintName("fk_enterprise_group_data_source_classification_data_source_cla");

                    b.HasOne("nscreg.Data.Entities.EnterpriseGroupType", "EntGroupType")
                        .WithMany("EnterpriseGroups")
                        .HasForeignKey("EntGroupTypeId")
                        .HasConstraintName("fk_enterprise_group_enterprise_group_type_ent_group_type_id");

                    b.HasOne("nscreg.Data.Entities.ForeignParticipation", "ForeignParticipation")
                        .WithMany()
                        .HasForeignKey("ForeignParticipationId")
                        .HasConstraintName("fk_enterprise_group_foreign_participation_foreign_participatio");

                    b.HasOne("nscreg.Data.Entities.Address", "PostalAddress")
                        .WithMany()
                        .HasForeignKey("PostalAddressId")
                        .HasConstraintName("fk_enterprise_group_address_postal_address_id");

                    b.HasOne("nscreg.Data.Entities.RegistrationReason", "RegistrationReason")
                        .WithMany()
                        .HasForeignKey("RegistrationReasonId")
                        .HasConstraintName("fk_enterprise_group_registration_reason_registration_reason_id");

                    b.HasOne("nscreg.Data.Entities.ReorgType", "ReorgType")
                        .WithMany()
                        .HasForeignKey("ReorgTypeId")
                        .HasConstraintName("fk_enterprise_group_reorg_type_reorg_type_id");

                    b.HasOne("nscreg.Data.Entities.UnitSize", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .HasConstraintName("fk_enterprise_group_unit_size_size_id");

                    b.HasOne("nscreg.Data.Entities.UnitStatus", "UnitStatus")
                        .WithMany()
                        .HasForeignKey("UnitStatusId")
                        .HasConstraintName("fk_enterprise_group_unit_status_unit_status_id");

                    b.Navigation("ActualAddress");

                    b.Navigation("Address");

                    b.Navigation("DataSourceClassification");

                    b.Navigation("EntGroupType");

                    b.Navigation("ForeignParticipation");

                    b.Navigation("PostalAddress");

                    b.Navigation("RegistrationReason");

                    b.Navigation("ReorgType");

                    b.Navigation("Size");

                    b.Navigation("UnitStatus");
                });

            modelBuilder.Entity("nscreg.Data.Entities.EnterpriseUnit", b =>
                {
                    b.HasOne("nscreg.Data.Entities.Address", "ActualAddress")
                        .WithMany()
                        .HasForeignKey("ActualAddressId")
                        .HasConstraintName("fk_enterprise_unit_address_actual_address_id");

                    b.HasOne("nscreg.Data.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .HasConstraintName("fk_enterprise_unit_address_address_id");

                    b.HasOne("nscreg.Data.Entities.DataSourceClassification", "DataSourceClassification")
                        .WithMany()
                        .HasForeignKey("DataSourceClassificationId")
                        .HasConstraintName("fk_enterprise_unit_data_source_classification_data_source_clas");

                    b.HasOne("nscreg.Data.Entities.EnterpriseGroupRole", "EntGroupRole")
                        .WithMany("EnterpriseUnits")
                        .HasForeignKey("EntGroupRoleId")
                        .HasConstraintName("fk_enterprise_unit_enterprise_group_role_ent_group_role_id");

                    b.HasOne("nscreg.Data.Entities.EnterpriseGroup", "EnterpriseGroup")
                        .WithMany("EnterpriseUnits")
                        .HasForeignKey("EnterpriseGroupId")
                        .HasConstraintName("fk_enterprise_unit_enterprise_group_enterprise_group_id");

                    b.HasOne("nscreg.Data.Entities.ForeignParticipation", "ForeignParticipation")
                        .WithMany()
                        .HasForeignKey("ForeignParticipationId")
                        .HasConstraintName("fk_enterprise_unit_foreign_participation_foreign_participation");

                    b.HasOne("nscreg.Data.Entities.SectorCode", "InstSectorCode")
                        .WithMany()
                        .HasForeignKey("InstSectorCodeId")
                        .HasConstraintName("fk_enterprise_unit_sector_code_inst_sector_code_id");

                    b.HasOne("nscreg.Data.Entities.LegalForm", "LegalForm")
                        .WithMany()
                        .HasForeignKey("LegalFormId")
                        .HasConstraintName("fk_enterprise_unit_legal_form_legal_form_id");

                    b.HasOne("nscreg.Data.Entities.Address", "PostalAddress")
                        .WithMany()
                        .HasForeignKey("PostalAddressId")
                        .HasConstraintName("fk_enterprise_unit_address_postal_address_id");

                    b.HasOne("nscreg.Data.Entities.RegistrationReason", "RegistrationReason")
                        .WithMany()
                        .HasForeignKey("RegistrationReasonId")
                        .HasConstraintName("fk_enterprise_unit_registration_reason_registration_reason_id");

                    b.HasOne("nscreg.Data.Entities.ReorgType", "ReorgType")
                        .WithMany()
                        .HasForeignKey("ReorgTypeId")
                        .HasConstraintName("fk_enterprise_unit_reorg_type_reorg_type_id");

                    b.HasOne("nscreg.Data.Entities.UnitSize", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .HasConstraintName("fk_enterprise_unit_unit_size_size_id");

                    b.HasOne("nscreg.Data.Entities.UnitStatus", "UnitStatus")
                        .WithMany()
                        .HasForeignKey("UnitStatusId")
                        .HasConstraintName("fk_enterprise_unit_unit_status_unit_status_id");

                    b.Navigation("ActualAddress");

                    b.Navigation("Address");

                    b.Navigation("DataSourceClassification");

                    b.Navigation("EntGroupRole");

                    b.Navigation("EnterpriseGroup");

                    b.Navigation("ForeignParticipation");

                    b.Navigation("InstSectorCode");

                    b.Navigation("LegalForm");

                    b.Navigation("PostalAddress");

                    b.Navigation("RegistrationReason");

                    b.Navigation("ReorgType");

                    b.Navigation("Size");

                    b.Navigation("UnitStatus");
                });

            modelBuilder.Entity("nscreg.Data.Entities.History", b =>
                {
                    b.HasOne("nscreg.Data.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .HasConstraintName("fk_history_address_address_id");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("nscreg.Data.Entities.LegalUnit", b =>
                {
                    b.HasOne("nscreg.Data.Entities.Address", "ActualAddress")
                        .WithMany()
                        .HasForeignKey("ActualAddressId")
                        .HasConstraintName("fk_legal_unit_address_actual_address_id");

                    b.HasOne("nscreg.Data.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .HasConstraintName("fk_legal_unit_address_address_id");

                    b.HasOne("nscreg.Data.Entities.DataSourceClassification", "DataSourceClassification")
                        .WithMany()
                        .HasForeignKey("DataSourceClassificationId")
                        .HasConstraintName("fk_legal_unit_data_source_classification_data_source_classific");

                    b.HasOne("nscreg.Data.Entities.EnterpriseUnit", "EnterpriseUnit")
                        .WithMany("LegalUnits")
                        .HasForeignKey("EnterpriseUnitRegId")
                        .HasConstraintName("fk_legal_unit_enterprise_unit_enterprise_unit_temp_id");

                    b.HasOne("nscreg.Data.Entities.ForeignParticipation", "ForeignParticipation")
                        .WithMany()
                        .HasForeignKey("ForeignParticipationId")
                        .HasConstraintName("fk_legal_unit_foreign_participation_foreign_participation_id");

                    b.HasOne("nscreg.Data.Entities.SectorCode", "InstSectorCode")
                        .WithMany()
                        .HasForeignKey("InstSectorCodeId")
                        .HasConstraintName("fk_legal_unit_sector_code_inst_sector_code_id");

                    b.HasOne("nscreg.Data.Entities.LegalForm", "LegalForm")
                        .WithMany()
                        .HasForeignKey("LegalFormId")
                        .HasConstraintName("fk_legal_unit_legal_form_legal_form_id");

                    b.HasOne("nscreg.Data.Entities.Address", "PostalAddress")
                        .WithMany()
                        .HasForeignKey("PostalAddressId")
                        .HasConstraintName("fk_legal_unit_address_postal_address_id");

                    b.HasOne("nscreg.Data.Entities.RegistrationReason", "RegistrationReason")
                        .WithMany()
                        .HasForeignKey("RegistrationReasonId")
                        .HasConstraintName("fk_legal_unit_registration_reason_registration_reason_id");

                    b.HasOne("nscreg.Data.Entities.ReorgType", "ReorgType")
                        .WithMany()
                        .HasForeignKey("ReorgTypeId")
                        .HasConstraintName("fk_legal_unit_reorg_type_reorg_type_id");

                    b.HasOne("nscreg.Data.Entities.UnitSize", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .HasConstraintName("fk_legal_unit_unit_size_size_id");

                    b.HasOne("nscreg.Data.Entities.UnitStatus", "UnitStatus")
                        .WithMany()
                        .HasForeignKey("UnitStatusId")
                        .HasConstraintName("fk_legal_unit_unit_status_unit_status_id");

                    b.Navigation("ActualAddress");

                    b.Navigation("Address");

                    b.Navigation("DataSourceClassification");

                    b.Navigation("EnterpriseUnit");

                    b.Navigation("ForeignParticipation");

                    b.Navigation("InstSectorCode");

                    b.Navigation("LegalForm");

                    b.Navigation("PostalAddress");

                    b.Navigation("RegistrationReason");

                    b.Navigation("ReorgType");

                    b.Navigation("Size");

                    b.Navigation("UnitStatus");
                });

            modelBuilder.Entity("nscreg.Data.Entities.LocalUnit", b =>
                {
                    b.HasOne("nscreg.Data.Entities.Address", "ActualAddress")
                        .WithMany()
                        .HasForeignKey("ActualAddressId")
                        .HasConstraintName("fk_local_unit_address_actual_address_id");

                    b.HasOne("nscreg.Data.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .HasConstraintName("fk_local_unit_address_address_id");

                    b.HasOne("nscreg.Data.Entities.DataSourceClassification", "DataSourceClassification")
                        .WithMany()
                        .HasForeignKey("DataSourceClassificationId")
                        .HasConstraintName("fk_local_unit_data_source_classification_data_source_classific");

                    b.HasOne("nscreg.Data.Entities.ForeignParticipation", "ForeignParticipation")
                        .WithMany()
                        .HasForeignKey("ForeignParticipationId")
                        .HasConstraintName("fk_local_unit_foreign_participation_foreign_participation_id");

                    b.HasOne("nscreg.Data.Entities.SectorCode", "InstSectorCode")
                        .WithMany()
                        .HasForeignKey("InstSectorCodeId")
                        .HasConstraintName("fk_local_unit_sector_code_inst_sector_code_id");

                    b.HasOne("nscreg.Data.Entities.LegalForm", "LegalForm")
                        .WithMany()
                        .HasForeignKey("LegalFormId")
                        .HasConstraintName("fk_local_unit_legal_form_legal_form_id");

                    b.HasOne("nscreg.Data.Entities.LegalUnit", "LegalUnit")
                        .WithMany("LocalUnits")
                        .HasForeignKey("LegalUnitId")
                        .HasConstraintName("fk_local_unit_legal_unit_legal_unit_id");

                    b.HasOne("nscreg.Data.Entities.Address", "PostalAddress")
                        .WithMany()
                        .HasForeignKey("PostalAddressId")
                        .HasConstraintName("fk_local_unit_address_postal_address_id");

                    b.HasOne("nscreg.Data.Entities.RegistrationReason", "RegistrationReason")
                        .WithMany()
                        .HasForeignKey("RegistrationReasonId")
                        .HasConstraintName("fk_local_unit_registration_reason_registration_reason_id");

                    b.HasOne("nscreg.Data.Entities.ReorgType", "ReorgType")
                        .WithMany()
                        .HasForeignKey("ReorgTypeId")
                        .HasConstraintName("fk_local_unit_reorg_type_reorg_type_id");

                    b.HasOne("nscreg.Data.Entities.UnitSize", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .HasConstraintName("fk_local_unit_unit_size_size_id");

                    b.HasOne("nscreg.Data.Entities.UnitStatus", "UnitStatus")
                        .WithMany()
                        .HasForeignKey("UnitStatusId")
                        .HasConstraintName("fk_local_unit_unit_status_unit_status_id");

                    b.Navigation("ActualAddress");

                    b.Navigation("Address");

                    b.Navigation("DataSourceClassification");

                    b.Navigation("ForeignParticipation");

                    b.Navigation("InstSectorCode");

                    b.Navigation("LegalForm");

                    b.Navigation("LegalUnit");

                    b.Navigation("PostalAddress");

                    b.Navigation("RegistrationReason");

                    b.Navigation("ReorgType");

                    b.Navigation("Size");

                    b.Navigation("UnitStatus");
                });

            modelBuilder.Entity("nscreg.Data.Entities.Person", b =>
                {
                    b.HasOne("nscreg.Data.Entities.Country", "NationalityCode")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .HasConstraintName("fk_person_country_country_id");

                    b.Navigation("NationalityCode");
                });

            modelBuilder.Entity("nscreg.Data.Entities.PersonForUnit", b =>
                {
                    b.HasOne("nscreg.Data.Entities.EnterpriseGroup", "EnterpriseGroup")
                        .WithMany("PersonsUnits")
                        .HasForeignKey("EnterpriseGroupId")
                        .HasConstraintName("fk_person_for_unit_enterprise_group_enterprise_group_id");

                    b.HasOne("nscreg.Data.Entities.EnterpriseUnit", "EnterpriseUnit")
                        .WithMany("PersonsUnits")
                        .HasForeignKey("EnterpriseUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_person_for_unit_enterprise_unit_enterprise_unit_id");

                    b.HasOne("nscreg.Data.Entities.History", null)
                        .WithMany("PersonsForUnit")
                        .HasForeignKey("HistoryId")
                        .HasConstraintName("fk_person_for_unit_history_history_id");

                    b.HasOne("nscreg.Data.Entities.LegalUnit", "LegalUnit")
                        .WithMany("PersonsUnits")
                        .HasForeignKey("LegalUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_person_for_unit_legal_unit_legal_unit_id");

                    b.HasOne("nscreg.Data.Entities.LocalUnit", "LocalUnit")
                        .WithMany("PersonsUnits")
                        .HasForeignKey("LocalUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_person_for_unit_local_unit_local_unit_id");

                    b.HasOne("nscreg.Data.Entities.Person", "Person")
                        .WithMany("PersonsUnits")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_person_for_unit_person_person_id");

                    b.HasOne("nscreg.Data.Entities.PersonType", "PersonType")
                        .WithMany()
                        .HasForeignKey("PersonTypeId")
                        .HasConstraintName("fk_person_for_unit_person_type_person_type_id");

                    b.Navigation("EnterpriseGroup");

                    b.Navigation("EnterpriseUnit");

                    b.Navigation("LegalUnit");

                    b.Navigation("LocalUnit");

                    b.Navigation("Person");

                    b.Navigation("PersonType");
                });

            modelBuilder.Entity("nscreg.Data.Entities.Region", b =>
                {
                    b.HasOne("nscreg.Data.Entities.Region", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_region_region_parent_id");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("nscreg.Data.Entities.SampleFrame", b =>
                {
                    b.HasOne("nscreg.Data.Entities.User", "User")
                        .WithMany("SampleFrames")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_sample_frame_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("nscreg.Data.Entities.SectorCode", b =>
                {
                    b.HasOne("nscreg.Data.Entities.SectorCode", "Parent")
                        .WithMany("SectorCodes")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_sector_code_sector_code_parent_id");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("nscreg.Data.Entities.UserRegion", b =>
                {
                    b.HasOne("nscreg.Data.Entities.Region", "Region")
                        .WithMany("UserRegions")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_region_region_region_id");

                    b.HasOne("nscreg.Data.Entities.User", "User")
                        .WithMany("UserRegions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_region_user_user_id");

                    b.Navigation("Region");

                    b.Navigation("User");
                });

            modelBuilder.Entity("nscreg.Data.Entities.UserRole", b =>
                {
                    b.HasOne("nscreg.Data.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("nscreg.Data.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("nscreg.Data.Entities.Activity", b =>
                {
                    b.Navigation("ActivitiesUnits");
                });

            modelBuilder.Entity("nscreg.Data.Entities.ActivityCategory", b =>
                {
                    b.Navigation("ActivityCategoryUsers");

                    b.Navigation("Children");
                });

            modelBuilder.Entity("nscreg.Data.Entities.AnalysisQueue", b =>
                {
                    b.Navigation("AnalysisLogs");
                });

            modelBuilder.Entity("nscreg.Data.Entities.Country", b =>
                {
                    b.Navigation("CountriesUnits");
                });

            modelBuilder.Entity("nscreg.Data.Entities.DataSource", b =>
                {
                    b.Navigation("DataSourceQueuedUploads");
                });

            modelBuilder.Entity("nscreg.Data.Entities.DataSourceQueue", b =>
                {
                    b.Navigation("DataUploadingLogs");
                });

            modelBuilder.Entity("nscreg.Data.Entities.EnterpriseGroup", b =>
                {
                    b.Navigation("EnterpriseUnits");

                    b.Navigation("PersonsUnits");
                });

            modelBuilder.Entity("nscreg.Data.Entities.EnterpriseGroupRole", b =>
                {
                    b.Navigation("EnterpriseUnits");
                });

            modelBuilder.Entity("nscreg.Data.Entities.EnterpriseGroupType", b =>
                {
                    b.Navigation("EnterpriseGroups");
                });

            modelBuilder.Entity("nscreg.Data.Entities.EnterpriseUnit", b =>
                {
                    b.Navigation("ActivitiesUnits");

                    b.Navigation("ForeignParticipationCountriesUnits");

                    b.Navigation("LegalUnits");

                    b.Navigation("PersonsUnits");
                });

            modelBuilder.Entity("nscreg.Data.Entities.History", b =>
                {
                    b.Navigation("ActivitiesForLegalUnit");

                    b.Navigation("PersonsForUnit");
                });

            modelBuilder.Entity("nscreg.Data.Entities.LegalUnit", b =>
                {
                    b.Navigation("ActivitiesUnits");

                    b.Navigation("ForeignParticipationCountriesUnits");

                    b.Navigation("LocalUnits");

                    b.Navigation("PersonsUnits");
                });

            modelBuilder.Entity("nscreg.Data.Entities.LocalUnit", b =>
                {
                    b.Navigation("ActivitiesUnits");

                    b.Navigation("ForeignParticipationCountriesUnits");

                    b.Navigation("PersonsUnits");
                });

            modelBuilder.Entity("nscreg.Data.Entities.Person", b =>
                {
                    b.Navigation("PersonsUnits");
                });

            modelBuilder.Entity("nscreg.Data.Entities.Region", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("UserRegions");
                });

            modelBuilder.Entity("nscreg.Data.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("nscreg.Data.Entities.SectorCode", b =>
                {
                    b.Navigation("SectorCodes");
                });

            modelBuilder.Entity("nscreg.Data.Entities.User", b =>
                {
                    b.Navigation("ActivityCategoryUsers");

                    b.Navigation("AnalysisQueues");

                    b.Navigation("DataSourceQueues");

                    b.Navigation("DataSources");

                    b.Navigation("SampleFrames");

                    b.Navigation("UserRegions");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
