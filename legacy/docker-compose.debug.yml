version: "3.4"
services:
  server:
    container_name: nscreg-server
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
    image: ghcr.io/statisticsnorway/nscreg:latest
    pull_policy: build
    build:
      context: .
      dockerfile: src/nscreg.Server/Dockerfile
      args:
        CONFIGURATION: Release
      tags:
        - "dev"
    ports:
      - 6080:80
    volumes:
      - ./uploads:/app/uploads
      - ./sampleframes:/app/sampleframes
      # Used to persist keys for signing cookies and verifying them https://learn.microsoft.com/en-us/aspnet/core/security/data-protection/consumer-apis/overview?view=aspnetcore-7.0
      - keys:/app/keys
    depends_on:
      postgres:
        condition: service_healthy
      #sqlserver:
      #  condition: service_healthy
    networks:
      - elastic
  postgres:
    # We use the same version supported by the latest Ubuntu LTS release
    image: postgres:14
    container_name: statbus-postgres
    user: postgres
    ports:
      - "6543:5432"
    restart: always
    secrets:
      - db-admin-password
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/db-admin-password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      # Local mount of directory fails due to docker file system ownership problems.
      # So instead of the line below, we must use a volume
      #- ./postgres-data:/var/lib/postgresql/data:rw
      - statbus-postgres-data:/var/lib/postgresql/data:rw
      - ./postgres-initdb.d:/docker-entrypoint-initdb.d:r
    networks:
      - elastic
  #sqlserver:
  #  image: mcr.microsoft.com/azure-sql-edge:latest
  #  container_name: azure-sql-latest
  #  user: root
  #  ports:
  #    - "1433:1433"
  #  restart: always
  #  secrets:
  #    - db-admin-password
  #  environment:
  #    MSSQL_SA_PASSWORD_FILE: /run/secrets/db-admin-password
  #    ACCEPT_EULA: Y
  #  healthcheck:
  #    test: '/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P $$(cat $$MSSQL_SA_PASSWORD_FILE) -Q "Select 1"'
  #    interval: 20s
  #    retries: 5
  #  volumes:
  #    - nscreg-mssql-data:/var/opt/mssql/data:rw
  #  networks:
  #    - elastic
  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.2
    ports:
      - 9200:9200
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    environment:
      - xpack.monitoring.enabled=true
      - xpack.watcher.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx1024m"
      - discovery.type=single-node
    networks:
      - elastic

networks:
  elastic:
    driver: bridge

secrets:
  db-admin-password:
    file: mssql_password.txt

volumes:
  statbus-postgres-data:
    # This volume is independent, and therefore protected from accidental deletion
    # when using docker compose.
    # docker volume create --name=statbus-postgres-data
    #external: true
  elasticsearch-data:
  nscreg-mssql-data:
  keys:
