# Generated by <%= @program_name %> manage generate-config
# Do not edit directly - changes will be lost

# Common snippets for all Caddyfile configurations

# Auth-related paths definition (as a snippet to be used in matchers)
(auth_paths) {
    path /postgrest/rpc/login
    path /postgrest/rpc/logout
    path /postgrest/rpc/refresh
    path /postgrest/rpc/auth_status
}

# CORS handling for preflight requests
(cors) {
    @options method OPTIONS
    handle @options {
        header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
        header Access-Control-Allow-Headers "Content-Type, Authorization"
        header Access-Control-Allow-Credentials "true"
        respond 204
    }
}

# CORS headers for development mode with origin
(cors_dev) {
    @origin header Origin {args[0]}
    header @origin {
        Access-Control-Allow-Origin "{args[0]}"
        Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS"
        Access-Control-Allow-Headers "Authorization, Content-Type, Accept"
        Access-Control-Allow-Credentials true
        Access-Control-Max-Age 3600
        defer
    }
}

# Maintenance mode handling
(maintenance) {
    @maintenance {
        file {
            try_files {args[0]}/maintenance
        }
    }
    handle @maintenance {
        root * {args[1]}
        rewrite * /maintenance.html
        file_server {
            status 503
        }
    }
}

# Reverse proxy with standard headers - args[0] is the target address
(reverse_proxy_standard) {
    reverse_proxy {args[0]} {
        header_up Host {host}
        header_up X-Real-IP {remote}
    }
}

# Reverse proxy with auth token - args[0] is the target address, args[1] is the token cookie name
(reverse_proxy_auth) {
    reverse_proxy {args[0]} {
        header_up Host {host}
        header_up X-Real-IP {remote}
        header_up Authorization "Bearer {http.request.cookie.{args[1]}}"
    }
}

# Common PostgREST endpoint handling - args[0] is the postgrest address, args[1] is the deployment slot code
(postgrest_endpoints) {
    # Handle PostgREST auth requests (login/logout/refresh/auth_status) that should not fail due to expired Authorization
    # therefore the Authorization is not set.
    # Those functions directly look at the cookies as they can be called by anonymous.
    @auth_requests {
        import auth_paths
    }
    
    handle @auth_requests {
        uri strip_prefix /postgrest
        import reverse_proxy_standard {args[0]}
    }
    
    # Handle all other PostgREST requests (excluding login/logout/refresh/auth_status)
    handle_path /postgrest/* {
        import reverse_proxy_auth {args[0]} statbus-{args[1]}
    }
}

# PostgREST endpoint handling with CORS for development - args[0] is the postgrest address, args[1] is the deployment slot code, args[2] is the CORS origin
(postgrest_endpoints_dev) {
    # Handle PostgREST auth requests (login/logout/refresh/auth_status) that should not fail due to expired Authorization
    @auth_requests {
        import auth_paths
    }
    
    handle @auth_requests {
        uri strip_prefix /postgrest
        import reverse_proxy_standard {args[0]}
        import cors_dev {args[2]}
    }
    
    # Handle all other PostgREST requests (excluding login/logout/refresh/auth_status)
    handle_path /postgrest/* {
        import reverse_proxy_auth {args[0]} statbus-{args[1]}
        import cors_dev {args[2]}
    }
}

# Standard logging configuration - args[0] is the log path
(standard_logging) {
    log {
        output file {args[0]}
        format json
    }
}
