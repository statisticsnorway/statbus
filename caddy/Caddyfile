{
    # Global Caddy configuration
    admin off
    log {
        format json
    }
}

# Main site configuration
{$SITE_ADDRESS} {
    # Enable compression
    encode gzip

    # Handle login endpoint - extract JWT from response and set as cookie
    handle /api/rpc/login {
        uri strip_prefix /api
        reverse_proxy {$REST_HOST}:{$REST_PORT} {
            header_up Host {host}
            header_up X-Real-IP {remote}
            header_up X-Forwarded-For {remote}
            header_up X-Forwarded-Proto {scheme}
            
            # Pass any existing auth token
            header_up Authorization "Bearer {http.request.cookie.statbus-{$DEPLOYMENT_SLOT_CODE}}"
            
            # Handle successful login response
            @success status 2xx
            handle_response @success {
                # Extract token from response and set as cookie
                # The login function in PostgreSQL sets response.headers with Set-Cookie
                # which will be passed through automatically
            }
        }
    }
    
    # Handle logout endpoint - clear the auth cookie
    handle /api/rpc/logout {
        uri strip_prefix /api
        reverse_proxy {$REST_HOST}:{$REST_PORT} {
            header_up Host {host}
            header_up X-Real-IP {remote}
            header_up X-Forwarded-For {remote}
            header_up X-Forwarded-Proto {scheme}
            
            # Pass the auth token for validation
            header_up Authorization "Bearer {http.request.cookie.statbus-{$DEPLOYMENT_SLOT_CODE}}"
            
            # The logout function in PostgreSQL sets response.headers with Set-Cookie
            # which will be passed through automatically
        }
    }
    
    # Handle refresh token endpoint
    handle /api/rpc/refresh {
        uri strip_prefix /api
        reverse_proxy {$REST_HOST}:{$REST_PORT} {
            header_up Host {host}
            header_up X-Real-IP {remote}
            header_up X-Forwarded-For {remote}
            header_up X-Forwarded-Proto {scheme}
            
            # Pass the refresh token from cookie as Authorization header
            # The refresh token is a valid JWT that can be used to authenticate
            # with PostgREST for the purpose of getting new tokens
            header_up Authorization "Bearer {http.request.cookie.statbus-{$DEPLOYMENT_SLOT_CODE}-refresh}"
        }
    }

    # Handle all other API requests - pass JWT from cookie as Authorization header
    handle /api/* {
        uri strip_prefix /api
        reverse_proxy {$REST_HOST}:{$REST_PORT} {
            header_up Host {host}
            header_up X-Real-IP {remote}
            header_up X-Forwarded-For {remote}
            header_up X-Forwarded-Proto {scheme}
            
            # Pass the access token from cookie as Authorization header
            header_up Authorization "Bearer {http.request.cookie.statbus-{$DEPLOYMENT_SLOT_CODE}}"
        }
    }

    # Handle all other requests (Next.js app)
    handle {
        reverse_proxy {$APP_HOST}:{$APP_PORT} {
            header_up Host {host}
            header_up X-Real-IP {remote}
            header_up X-Forwarded-For {remote}
            header_up X-Forwarded-Proto {scheme}
        }
    }

    # Log all requests
    log {
        output file /var/log/caddy/access.log
        format json
    }
}
