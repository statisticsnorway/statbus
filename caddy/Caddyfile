{
    # Global Caddy configuration
    admin off
    log {
        format json
    }
}

# Snippet for development environment configuration
(development_config) {
    # Add CORS headers for development
    header Access-Control-Allow-Origin "http://localhost:3000"
    header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
    header Access-Control-Allow-Headers "Content-Type, Authorization"
    header Access-Control-Allow-Credentials "true"
}

# Main site configuration
{$SITE_ADDRESS:localhost} {
    # Import configs based on deployment mode
    @is_development {
        expression {$CADDY_DEPLOYMENT_MODE} == "development"
    }
    import development_config @is_development
    
    # Handle HTTPS based on deployment mode
    @is_standalone {
        expression {$CADDY_DEPLOYMENT_MODE} == "standalone"
    }
    @not_standalone {
        expression {$CADDY_DEPLOYMENT_MODE} != "standalone"
    }
    tls internal @is_standalone
    tls off @not_standalone
    
    # Enable compression
    encode gzip

    # Handle OPTIONS preflight requests
    @options method OPTIONS
    handle @options {
        header Access-Control-Allow-Origin "http://localhost:3000"
        header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
        header Access-Control-Allow-Headers "Content-Type, Authorization"
        header Access-Control-Allow-Credentials "true"
        respond 204
    }

    # Handle login endpoint
    handle /postgrest/rpc/login {
        uri strip_prefix /postgrest
        reverse_proxy {$POSTGREST_BIND_ADDRESS:rest:3000} {
            header_up Host {host}
            header_up X-Real-IP {remote}
            header_up Authorization "Bearer {http.request.cookie.statbus-{$DEPLOYMENT_SLOT_CODE:dev}}"
        }
    }
    
    # Handle logout endpoint
    handle /postgrest/rpc/logout {
        uri strip_prefix /postgrest
        reverse_proxy {$POSTGREST_BIND_ADDRESS:rest:3000} {
            header_up Host {host}
            header_up X-Real-IP {remote}
            header_up Authorization "Bearer {http.request.cookie.statbus-{$DEPLOYMENT_SLOT_CODE:dev}}"
        }
    }
    
    # Handle refresh token endpoint
    handle /postgrest/rpc/refresh {
        uri strip_prefix /postgrest
        reverse_proxy {$POSTGREST_BIND_ADDRESS:rest:3000} {
            header_up Host {host}
            header_up X-Real-IP {remote}
            header_up Authorization "Bearer {http.request.cookie.statbus-{$DEPLOYMENT_SLOT_CODE:dev}-refresh}"
        }
    }

    # Handle all other PostgREST requests
    handle /postgrest/* {
        uri strip_prefix /postgrest
        reverse_proxy {$POSTGREST_BIND_ADDRESS:rest:3000} {
            header_up Host {host}
            header_up X-Real-IP {remote}
            header_up Authorization "Bearer {http.request.cookie.statbus-{$DEPLOYMENT_SLOT_CODE:dev}}"
        }
    }

    # Maintenance mode check (not in development)
    @maintenance {
        not {
            expression {$CADDY_DEPLOYMENT_MODE} == "development"
        }
        file {
            try_files {$MAINTENANCE_FILE_PATH}
        }
    }
    
    handle @maintenance {
        root * {$MAINTENANCE_ROOT_PATH:/app/public}
        rewrite * /maintenance.html
        file_server {
            status 503
        }
    }

    # For development mode, return a message for non-API requests
    @development_non_api {
        expression {$CADDY_DEPLOYMENT_MODE} == "development"
        not path /api/*
    }
    
    handle @development_non_api {
        respond "Statbus API Gateway - Next.js app should be running locally on http://localhost:3000" 200
    }

    # For private or standalone mode, proxy to the Next.js app
    @production_non_api {
        not {
            expression {$CADDY_DEPLOYMENT_MODE} == "development"
        }
        not path /api/*
    }
    
    handle @production_non_api {
        reverse_proxy {$APP_BIND_ADDRESS:app:3000} {
            header_up Host {host}
            header_up X-Real-IP {remote}
        }
    }

    # Log all requests
    log {
        output file {$CADDY_LOG_PATH}
        format json
    }
}
